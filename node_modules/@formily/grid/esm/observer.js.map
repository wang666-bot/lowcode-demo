{"version":3,"file":"observer.js","sourceRoot":"","sources":["../src/observer.ts"],"names":[],"mappings":"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","sourcesContent":["const isHTMLElement = (node: Node): node is HTMLElement => node.nodeType === 1\n\ntype ChildNode = {\n  element?: HTMLElement\n  observer?: MutationObserver\n  dispose?: () => void\n}\n\nexport class ChildListMutationObserver {\n  observer: MutationObserver\n  callback: MutationCallback\n  childList: ChildNode[] = []\n  init: MutationObserverInit\n  constructor(callback: MutationCallback) {\n    this.callback = callback\n    this.observer = new MutationObserver(this.handler)\n  }\n\n  observeChildList(element: HTMLElement) {\n    Array.from(element.children).forEach((node: HTMLElement) => {\n      this.addObserver(node)\n    })\n  }\n\n  addObserver(element: HTMLElement) {\n    const child = this.childList.find((t) => t.element === element)\n    if (!child) {\n      const childIndex = this.childList.length\n      const child = {\n        element,\n        observer: new MutationObserver(this.callback),\n        dispose: () => {\n          if (child.observer) {\n            child.observer.disconnect()\n            delete child.observer\n            this.childList.splice(childIndex, 1)\n          }\n        },\n      }\n      child.observer.observe(child.element, {\n        ...this.init,\n        subtree: false,\n        childList: false,\n        characterData: false,\n        characterDataOldValue: false,\n        attributeOldValue: false,\n      })\n      this.childList.push(child)\n    }\n  }\n\n  removeObserver(element: HTMLElement) {\n    const child = this.childList.find((t) => t.element === element)\n    if (child) {\n      child.dispose?.()\n    }\n  }\n\n  handler = (mutations: MutationRecord[]) => {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach((node) => {\n          if (isHTMLElement(node)) {\n            this.addObserver(node)\n          }\n        })\n        mutation.removedNodes.forEach((node) => {\n          if (isHTMLElement(node)) {\n            this.removeObserver(node)\n          }\n        })\n      }\n    })\n    this.callback(mutations, this.observer)\n  }\n\n  observe = (element: HTMLElement, init?: MutationObserverInit) => {\n    this.init = init\n    this.observeChildList(element)\n    this.observer.observe(element, {\n      ...this.init,\n      subtree: false,\n      childList: true,\n      characterData: false,\n      characterDataOldValue: false,\n      attributeOldValue: false,\n    })\n  }\n\n  disconnect = () => {\n    this.observer.disconnect()\n  }\n}\n"]}