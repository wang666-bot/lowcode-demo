{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { define, observable, batch, reaction } from '@formily/reactive'\nimport { ChildListMutationObserver } from './observer'\nimport { ResizeObserver } from '@juggle/resize-observer'\nexport interface IGridOptions {\n  maxRows?: number\n  maxColumns?: number | number[]\n  minColumns?: number | number[]\n  maxWidth?: number | number[]\n  minWidth?: number | number[]\n  breakpoints?: number[]\n  columnGap?: number\n  rowGap?: number\n  colWrap?: boolean\n  strictAutoFit?: boolean\n  shouldVisible?: (node: GridNode, grid: Grid<HTMLElement>) => boolean\n  onDigest?: (grid: Grid<HTMLElement>) => void\n  onInitialized?: (grid: Grid<HTMLElement>) => void\n}\n\nconst SpanRegExp = /span\\s*(\\d+)/\n\nconst isValid = (value: any) => value !== undefined && value !== null\n\nconst calcBreakpointIndex = (breakpoints: number[], width: number) => {\n  if (Array.isArray(breakpoints)) {\n    for (let i = 0; i < breakpoints.length; i++) {\n      if (width <= breakpoints[i]) {\n        return i\n      }\n    }\n  }\n  return -1\n}\n\nconst calcFactor = <T>(value: T | T[], breakpointIndex: number): T => {\n  if (Array.isArray(value)) {\n    if (breakpointIndex === -1) return value[0]\n    return value[breakpointIndex] ?? value[value.length - 1]\n  } else {\n    return value\n  }\n}\n\nconst parseGridNode = (elements: HTMLCollection): GridNode[] => {\n  return Array.from(elements).reduce((buf, element: HTMLElement, index) => {\n    const style = getComputedStyle(element)\n    const visible = !(style.display === 'none')\n    const origin = element.getAttribute('data-grid-span')\n    const span = parseSpan(style.gridColumnStart) ?? 1\n    const originSpan = Number(origin ?? span)\n    const node: GridNode = {\n      index,\n      span,\n      visible,\n      originSpan,\n      element,\n    }\n    if (!origin) {\n      element.setAttribute('data-grid-span', String(span))\n    }\n    return buf.concat(node)\n  }, [])\n}\n\nconst calcChildTotalColumns = (nodes: GridNode[], shadow = false) =>\n  nodes.reduce((buf, node) => {\n    if (!shadow) {\n      if (!node.visible) return buf\n    }\n    if (node.originSpan === -1) return buf + (node.span ?? 1)\n    return buf + node.span\n  }, 0)\n\nconst calcChildOriginTotalColumns = (nodes: GridNode[], shadow = false) =>\n  nodes.reduce((buf, node) => {\n    if (!shadow) {\n      if (!node.visible) return buf\n    }\n    if (node.originSpan === -1) return buf + (node.span ?? 1)\n    return buf + node.originSpan\n  }, 0)\n\nconst calcSatisfyColumns = (\n  width: number,\n  maxColumns: number,\n  minColumns: number,\n  maxWidth: number,\n  minWidth: number,\n  gap: number\n) => {\n  const results = []\n  for (let columns = minColumns; columns <= maxColumns; columns++) {\n    const innerWidth = width - (columns - 1) * gap\n    const columnWidth = innerWidth / columns\n    if (columnWidth >= minWidth && columnWidth <= maxWidth) {\n      results.push(columns)\n    } else if (columnWidth < minWidth) {\n      results.push(Math.min(Math.floor(innerWidth / minWidth), maxColumns))\n    } else if (columnWidth > maxWidth) {\n      results.push(Math.min(Math.floor(innerWidth / maxWidth), maxColumns))\n    }\n  }\n  return Math.max(...results)\n}\n\nconst parseSpan = (gridColumnStart: string) => {\n  return Number(String(gridColumnStart).match(SpanRegExp)?.[1] ?? 1)\n}\n\nconst factor = <T>(value: T | T[], grid: Grid<HTMLElement>): T =>\n  isValid(value) ? calcFactor(value as any, grid.breakpoint) : value\n\nconst resolveChildren = (grid: Grid<HTMLElement>) => {\n  let walked = 0,\n    shadowWalked = 0,\n    rowIndex = 0,\n    shadowRowIndex = 0\n  if (!grid.ready) return\n  grid.children = grid.children.map((node) => {\n    const columnIndex = walked % grid.columns\n    const shadowColumnIndex = shadowWalked % grid.columns\n    const remainColumns = grid.columns - columnIndex\n    const originSpan = node.originSpan\n    const targetSpan = originSpan > grid.columns ? grid.columns : originSpan\n    const span = grid.options.strictAutoFit\n      ? targetSpan\n      : targetSpan > remainColumns\n      ? remainColumns\n      : targetSpan\n    const gridColumn =\n      originSpan === -1 ? `span ${remainColumns} / -1` : `span ${span} / auto`\n    if (node.element.style.gridColumn !== gridColumn) {\n      node.element.style.gridColumn = gridColumn\n    }\n    if (node.visible) {\n      walked += span\n    }\n    shadowWalked += span\n    if (columnIndex === 0) {\n      rowIndex++\n    }\n    if (shadowColumnIndex == 0) {\n      shadowRowIndex++\n    }\n    node.shadowRow = shadowRowIndex\n    node.shadowColumn = shadowColumnIndex + 1\n    if (node.visible) {\n      node.row = rowIndex\n      node.column = columnIndex + 1\n    }\n    if (grid.options?.shouldVisible) {\n      if (!grid.options.shouldVisible(node, grid)) {\n        if (node.visible) {\n          node.element.style.display = 'none'\n        }\n        node.visible = false\n      } else {\n        if (!node.visible) {\n          node.element.style.display = ''\n        }\n        node.visible = true\n      }\n    }\n    return node\n  })\n}\n\nconst nextTick = (callback?: () => void) => Promise.resolve(0).then(callback)\n\nexport type GridNode = {\n  index?: number\n  visible?: boolean\n  column?: number\n  shadowColumn?: number\n  row?: number\n  shadowRow?: number\n  span?: number\n  originSpan?: number\n  element?: HTMLElement\n}\nexport class Grid<Container extends HTMLElement> {\n  options: IGridOptions\n  width = 0\n  height = 0\n  container: Container\n  children: GridNode[] = []\n  childTotalColumns = 0\n  shadowChildTotalColumns = 0\n  childOriginTotalColumns = 0\n  shadowChildOriginTotalColumns = 0\n  ready = false\n  constructor(options?: IGridOptions) {\n    this.options = {\n      breakpoints: [720, 1280, 1920],\n      columnGap: 8,\n      rowGap: 4,\n      minWidth: 100,\n      colWrap: true,\n      strictAutoFit: false,\n      ...options,\n    }\n    define(this, {\n      options: observable.shallow,\n      width: observable.ref,\n      height: observable.ref,\n      ready: observable.ref,\n      children: observable.ref,\n      childOriginTotalColumns: observable.ref,\n      shadowChildOriginTotalColumns: observable.ref,\n      shadowChildTotalColumns: observable.ref,\n      childTotalColumns: observable.ref,\n      columns: observable.computed,\n      templateColumns: observable.computed,\n      gap: observable.computed,\n      maxColumns: observable.computed,\n      minColumns: observable.computed,\n      maxWidth: observable.computed,\n      minWidth: observable.computed,\n      breakpoints: observable.computed,\n      breakpoint: observable.computed,\n      rowGap: observable.computed,\n      columnGap: observable.computed,\n      colWrap: observable.computed,\n    })\n  }\n\n  set breakpoints(breakpoints) {\n    this.options.breakpoints = breakpoints\n  }\n\n  get breakpoints() {\n    return this.options.breakpoints\n  }\n\n  get breakpoint() {\n    return calcBreakpointIndex(this.options.breakpoints, this.width)\n  }\n\n  set maxWidth(maxWidth) {\n    this.options.maxWidth = maxWidth\n  }\n\n  get maxWidth() {\n    return factor(this.options.maxWidth, this) ?? Infinity\n  }\n\n  set minWidth(minWidth) {\n    this.options.minWidth = minWidth\n  }\n\n  get minWidth() {\n    return factor(this.options.minWidth, this) ?? 100\n  }\n\n  set maxColumns(maxColumns) {\n    this.options.maxColumns = maxColumns\n  }\n\n  get maxColumns() {\n    return factor(this.options.maxColumns, this) ?? Infinity\n  }\n\n  set maxRows(maxRows) {\n    this.options.maxRows = maxRows\n  }\n\n  get maxRows() {\n    return this.options.maxRows ?? Infinity\n  }\n\n  set minColumns(minColumns) {\n    this.options.minColumns = minColumns\n  }\n\n  get minColumns() {\n    return factor(this.options.minColumns, this) ?? 1\n  }\n\n  set rowGap(rowGap) {\n    this.options.rowGap = rowGap\n  }\n\n  get rowGap() {\n    return factor(this.options.rowGap, this) ?? 5\n  }\n\n  set columnGap(columnGap) {\n    this.options.columnGap = columnGap\n  }\n\n  get columnGap() {\n    return factor(this.options.columnGap, this) ?? 10\n  }\n\n  set colWrap(colWrap) {\n    this.options.colWrap = colWrap\n  }\n\n  get colWrap() {\n    return factor(this.options.colWrap, this) ?? true\n  }\n\n  get columns() {\n    if (!this.ready) return 0\n\n    const originTotalColumns = this.childOriginTotalColumns\n\n    if (this.colWrap === false) {\n      return originTotalColumns\n    }\n\n    const baseColumns = this.childSize\n\n    const strictMaxWidthColumns = Math.round(\n      this.width / (this.maxWidth + this.columnGap)\n    )\n\n    const looseMaxWidthColumns = Math.min(\n      originTotalColumns,\n      strictMaxWidthColumns\n    )\n\n    const maxWidthColumns = this.options.strictAutoFit\n      ? strictMaxWidthColumns\n      : looseMaxWidthColumns\n\n    const strictMinWidthColumns = Math.round(\n      this.width / (this.minWidth + this.columnGap)\n    )\n\n    const looseMinWidthColumns = Math.min(\n      originTotalColumns,\n      strictMinWidthColumns\n    )\n\n    const minWidthColumns = this.options.strictAutoFit\n      ? strictMinWidthColumns\n      : looseMinWidthColumns\n\n    const minCalculatedColumns = Math.min(\n      baseColumns,\n      originTotalColumns,\n      maxWidthColumns,\n      minWidthColumns\n    )\n\n    const maxCalculatedColumns = Math.max(\n      baseColumns,\n      originTotalColumns,\n      maxWidthColumns,\n      minWidthColumns\n    )\n\n    const finalColumns = calcSatisfyColumns(\n      this.width,\n      maxCalculatedColumns,\n      minCalculatedColumns,\n      this.maxWidth,\n      this.minWidth,\n      this.columnGap\n    )\n    if (finalColumns >= this.maxColumns) {\n      return this.maxColumns\n    }\n    if (finalColumns <= this.minColumns) {\n      return this.minColumns\n    }\n    return finalColumns\n  }\n\n  get rows() {\n    return Math.ceil(this.childTotalColumns / this.columns)\n  }\n\n  get shadowRows() {\n    return Math.ceil(this.shadowChildTotalColumns / this.columns)\n  }\n\n  get templateColumns() {\n    if (!this.width) return ''\n    if (this.maxWidth === Infinity) {\n      return `repeat(${this.columns},minmax(0,1fr))`\n    }\n    if (this.options.strictAutoFit !== true) {\n      const columnWidth =\n        (this.width - (this.columns - 1) * this.columnGap) / this.columns\n      if (columnWidth < this.minWidth || columnWidth > this.maxWidth) {\n        return `repeat(${this.columns},minmax(0,1fr))`\n      }\n    }\n    return `repeat(${this.columns},minmax(${this.minWidth}px,${this.maxWidth}px))`\n  }\n\n  get gap() {\n    return `${this.rowGap}px ${this.columnGap}px`\n  }\n\n  get childSize() {\n    return this.children.length\n  }\n\n  get fullnessLastColumn() {\n    return this.columns === this.children[this.childSize - 1]?.span\n  }\n\n  connect = (container: Container) => {\n    if (container) {\n      this.container = container\n      const initialize = batch.bound(() => {\n        digest()\n        this.ready = true\n      })\n      const digest = batch.bound(() => {\n        this.children = parseGridNode(this.container.children)\n        this.childTotalColumns = calcChildTotalColumns(this.children)\n        this.shadowChildTotalColumns = calcChildTotalColumns(\n          this.children,\n          true\n        )\n        this.childOriginTotalColumns = calcChildOriginTotalColumns(\n          this.children\n        )\n        this.shadowChildOriginTotalColumns = calcChildOriginTotalColumns(\n          this.children,\n          true\n        )\n        const rect = this.container.getBoundingClientRect()\n        if (rect.width && rect.height) {\n          this.width = rect.width\n          this.height = rect.height\n        }\n        resolveChildren(this)\n        nextTick(() => {\n          this.options?.onDigest?.(this)\n        })\n        if (!this.ready) {\n          nextTick(() => {\n            this.options?.onInitialized?.(this)\n          })\n        }\n      })\n      const mutationObserver = new ChildListMutationObserver(digest)\n      const resizeObserver = new ResizeObserver(digest)\n      const dispose = reaction(() => ({ ...this.options }), digest)\n      resizeObserver.observe(this.container)\n      mutationObserver.observe(this.container, {\n        attributeFilter: ['data-grid-span'],\n        attributes: true,\n      })\n      initialize()\n      return () => {\n        resizeObserver.unobserve(this.container)\n        resizeObserver.disconnect()\n        mutationObserver.disconnect()\n        dispose()\n        this.children = []\n      }\n    }\n\n    return () => {}\n  }\n\n  static id = (options: IGridOptions = {}) =>\n    JSON.stringify(\n      [\n        'maxRows',\n        'maxColumns',\n        'minColumns',\n        'maxWidth',\n        'minWidth',\n        'breakpoints',\n        'columnGap',\n        'rowGap',\n        'colWrap',\n        'strictAutoFit',\n      ].map((key) => options[key])\n    )\n}\n"]}