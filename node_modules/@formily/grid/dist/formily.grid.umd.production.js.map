{"version":3,"file":"formily.grid.umd.production.js","sources":["../src/observer.ts","../../../node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js","../../../node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js","../../../node_modules/@juggle/resize-observer/lib/utils/freeze.js","../../../node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js","../../../node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js","../../../node_modules/@juggle/resize-observer/lib/utils/element.js","../../../node_modules/@juggle/resize-observer/lib/utils/global.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js","../../../node_modules/@juggle/resize-observer/lib/utils/process.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js","../../../node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js","../../../node_modules/@juggle/resize-observer/lib/utils/scheduler.js","../../../node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObservation.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObserverController.js","../../../node_modules/@juggle/resize-observer/lib/ResizeObserver.js","../src/index.ts"],"sourcesContent":["const isHTMLElement = (node: Node): node is HTMLElement => node.nodeType === 1\n\ntype ChildNode = {\n  element?: HTMLElement\n  observer?: MutationObserver\n  dispose?: () => void\n}\n\nexport class ChildListMutationObserver {\n  observer: MutationObserver\n  callback: MutationCallback\n  childList: ChildNode[] = []\n  init: MutationObserverInit\n  constructor(callback: MutationCallback) {\n    this.callback = callback\n    this.observer = new MutationObserver(this.handler)\n  }\n\n  observeChildList(element: HTMLElement) {\n    Array.from(element.children).forEach((node: HTMLElement) => {\n      this.addObserver(node)\n    })\n  }\n\n  addObserver(element: HTMLElement) {\n    const child = this.childList.find((t) => t.element === element)\n    if (!child) {\n      const childIndex = this.childList.length\n      const child = {\n        element,\n        observer: new MutationObserver(this.callback),\n        dispose: () => {\n          if (child.observer) {\n            child.observer.disconnect()\n            delete child.observer\n            this.childList.splice(childIndex, 1)\n          }\n        },\n      }\n      child.observer.observe(child.element, {\n        ...this.init,\n        subtree: false,\n        childList: false,\n        characterData: false,\n        characterDataOldValue: false,\n        attributeOldValue: false,\n      })\n      this.childList.push(child)\n    }\n  }\n\n  removeObserver(element: HTMLElement) {\n    const child = this.childList.find((t) => t.element === element)\n    if (child) {\n      child.dispose?.()\n    }\n  }\n\n  handler = (mutations: MutationRecord[]) => {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach((node) => {\n          if (isHTMLElement(node)) {\n            this.addObserver(node)\n          }\n        })\n        mutation.removedNodes.forEach((node) => {\n          if (isHTMLElement(node)) {\n            this.removeObserver(node)\n          }\n        })\n      }\n    })\n    this.callback(mutations, this.observer)\n  }\n\n  observe = (element: HTMLElement, init?: MutationObserverInit) => {\n    this.init = init\n    this.observeChildList(element)\n    this.observer.observe(element, {\n      ...this.init,\n      subtree: false,\n      childList: true,\n      characterData: false,\n      characterDataOldValue: false,\n      attributeOldValue: false,\n    })\n  }\n\n  disconnect = () => {\n    this.observer.disconnect()\n  }\n}\n","var ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\nexport { ResizeObserverBoxOptions };\n","var resizeObservers = [];\nexport { resizeObservers };\n","var msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\nexport { deliverResizeLoopError };\n","export var freeze = function (obj) { return Object.freeze(obj); };\n","var trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode('');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\nexport { queueMicroTask };\n","import { freeze } from './utils/freeze';\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        freeze(this);\n    }\n    return ResizeObserverSize;\n}());\nexport { ResizeObserverSize };\n","import { freeze } from './utils/freeze';\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return freeze(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\nexport { DOMRectReadOnly };\n","var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a, _b;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\nexport { isSVG, isHidden, isElement, isReplacedElement };\n","export var global = typeof window !== 'undefined' ? window : {};\n","import { ResizeObserverBoxOptions } from '../ResizeObserverBoxOptions';\nimport { ResizeObserverSize } from '../ResizeObserverSize';\nimport { DOMRectReadOnly } from '../DOMRectReadOnly';\nimport { isSVG, isHidden } from '../utils/element';\nimport { freeze } from '../utils/freeze';\nimport { global } from '../utils/global';\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = freeze({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if (isHidden(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = freeze({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\nexport { calculateBoxSize, calculateBoxSizes };\n","import { calculateBoxSizes } from './algorithms/calculateBoxSize';\nimport { freeze } from './utils/freeze';\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = calculateBoxSizes(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = freeze([boxes.borderBoxSize]);\n        this.contentBoxSize = freeze([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\nexport { ResizeObserverEntry };\n","import { isHidden } from '../utils/element';\nvar calculateDepthForNode = function (node) {\n    if (isHidden(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\nexport { calculateDepthForNode };\n","import { resizeObservers } from '../utils/resizeObservers';\nimport { ResizeObserverEntry } from '../ResizeObserverEntry';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { calculateBoxSize } from './calculateBoxSize';\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new ResizeObserverEntry(ot.target);\n            var targetDepth = calculateDepthForNode(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\nexport { broadcastActiveObservations };\n","import { resizeObservers } from '../utils/resizeObservers';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nvar gatherActiveObservationsAtDepth = function (depth) {\n    resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if (calculateDepthForNode(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\nexport { gatherActiveObservationsAtDepth };\n","import { hasActiveObservations } from '../algorithms/hasActiveObservations';\nimport { hasSkippedObservations } from '../algorithms/hasSkippedObservations';\nimport { deliverResizeLoopError } from '../algorithms/deliverResizeLoopError';\nimport { broadcastActiveObservations } from '../algorithms/broadcastActiveObservations';\nimport { gatherActiveObservationsAtDepth } from '../algorithms/gatherActiveObservationsAtDepth';\nvar process = function () {\n    var depth = 0;\n    gatherActiveObservationsAtDepth(depth);\n    while (hasActiveObservations()) {\n        depth = broadcastActiveObservations();\n        gatherActiveObservationsAtDepth(depth);\n    }\n    if (hasSkippedObservations()) {\n        deliverResizeLoopError();\n    }\n    return depth > 0;\n};\nexport { process };\n","import { resizeObservers } from '../utils/resizeObservers';\nvar hasActiveObservations = function () {\n    return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\nexport { hasActiveObservations };\n","import { resizeObservers } from '../utils/resizeObservers';\nvar hasSkippedObservations = function () {\n    return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\nexport { hasSkippedObservations };\n","import { process } from './process';\nimport { global } from './global';\nimport { queueResizeObserver } from './queueResizeObserver';\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        queueResizeObserver(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = process();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\nexport { scheduler, updateCount };\n","import { queueMicroTask } from './queueMicroTask';\nvar queueResizeObserver = function (cb) {\n    queueMicroTask(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\nexport { queueResizeObserver };\n","import { ResizeObserverBoxOptions } from './ResizeObserverBoxOptions';\nimport { calculateBoxSize } from './algorithms/calculateBoxSize';\nimport { isSVG, isReplacedElement } from './utils/element';\nvar skipNotifyOnElement = function (target) {\n    return !isSVG(target)\n        && !isReplacedElement(target)\n        && getComputedStyle(target).display === 'inline';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = calculateBoxSize(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\nexport { ResizeObservation };\n","var ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\nexport { ResizeObserverDetail };\n","import { scheduler, updateCount } from './utils/scheduler';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverDetail } from './ResizeObserverDetail';\nimport { resizeObservers } from './utils/resizeObservers';\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && resizeObservers.push(detail);\n            detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n            updateCount(1);\n            scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            updateCount(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\nexport { ResizeObserverController };\n","import { ResizeObserverController } from './ResizeObserverController';\nimport { isElement } from './utils/element';\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!isElement(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!isElement(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\nexport { ResizeObserver };\n","import { define, observable, batch, reaction } from '@formily/reactive'\nimport { ChildListMutationObserver } from './observer'\nimport { ResizeObserver } from '@juggle/resize-observer'\nexport interface IGridOptions {\n  maxRows?: number\n  maxColumns?: number | number[]\n  minColumns?: number | number[]\n  maxWidth?: number | number[]\n  minWidth?: number | number[]\n  breakpoints?: number[]\n  columnGap?: number\n  rowGap?: number\n  colWrap?: boolean\n  strictAutoFit?: boolean\n  shouldVisible?: (node: GridNode, grid: Grid<HTMLElement>) => boolean\n  onDigest?: (grid: Grid<HTMLElement>) => void\n  onInitialized?: (grid: Grid<HTMLElement>) => void\n}\n\nconst SpanRegExp = /span\\s*(\\d+)/\n\nconst isValid = (value: any) => value !== undefined && value !== null\n\nconst calcBreakpointIndex = (breakpoints: number[], width: number) => {\n  if (Array.isArray(breakpoints)) {\n    for (let i = 0; i < breakpoints.length; i++) {\n      if (width <= breakpoints[i]) {\n        return i\n      }\n    }\n  }\n  return -1\n}\n\nconst calcFactor = <T>(value: T | T[], breakpointIndex: number): T => {\n  if (Array.isArray(value)) {\n    if (breakpointIndex === -1) return value[0]\n    return value[breakpointIndex] ?? value[value.length - 1]\n  } else {\n    return value\n  }\n}\n\nconst parseGridNode = (elements: HTMLCollection): GridNode[] => {\n  return Array.from(elements).reduce((buf, element: HTMLElement, index) => {\n    const style = getComputedStyle(element)\n    const visible = !(style.display === 'none')\n    const origin = element.getAttribute('data-grid-span')\n    const span = parseSpan(style.gridColumnStart) ?? 1\n    const originSpan = Number(origin ?? span)\n    const node: GridNode = {\n      index,\n      span,\n      visible,\n      originSpan,\n      element,\n    }\n    if (!origin) {\n      element.setAttribute('data-grid-span', String(span))\n    }\n    return buf.concat(node)\n  }, [])\n}\n\nconst calcChildTotalColumns = (nodes: GridNode[], shadow = false) =>\n  nodes.reduce((buf, node) => {\n    if (!shadow) {\n      if (!node.visible) return buf\n    }\n    if (node.originSpan === -1) return buf + (node.span ?? 1)\n    return buf + node.span\n  }, 0)\n\nconst calcChildOriginTotalColumns = (nodes: GridNode[], shadow = false) =>\n  nodes.reduce((buf, node) => {\n    if (!shadow) {\n      if (!node.visible) return buf\n    }\n    if (node.originSpan === -1) return buf + (node.span ?? 1)\n    return buf + node.originSpan\n  }, 0)\n\nconst calcSatisfyColumns = (\n  width: number,\n  maxColumns: number,\n  minColumns: number,\n  maxWidth: number,\n  minWidth: number,\n  gap: number\n) => {\n  const results = []\n  for (let columns = minColumns; columns <= maxColumns; columns++) {\n    const innerWidth = width - (columns - 1) * gap\n    const columnWidth = innerWidth / columns\n    if (columnWidth >= minWidth && columnWidth <= maxWidth) {\n      results.push(columns)\n    } else if (columnWidth < minWidth) {\n      results.push(Math.min(Math.floor(innerWidth / minWidth), maxColumns))\n    } else if (columnWidth > maxWidth) {\n      results.push(Math.min(Math.floor(innerWidth / maxWidth), maxColumns))\n    }\n  }\n  return Math.max(...results)\n}\n\nconst parseSpan = (gridColumnStart: string) => {\n  return Number(String(gridColumnStart).match(SpanRegExp)?.[1] ?? 1)\n}\n\nconst factor = <T>(value: T | T[], grid: Grid<HTMLElement>): T =>\n  isValid(value) ? calcFactor(value as any, grid.breakpoint) : value\n\nconst resolveChildren = (grid: Grid<HTMLElement>) => {\n  let walked = 0,\n    shadowWalked = 0,\n    rowIndex = 0,\n    shadowRowIndex = 0\n  if (!grid.ready) return\n  grid.children = grid.children.map((node) => {\n    const columnIndex = walked % grid.columns\n    const shadowColumnIndex = shadowWalked % grid.columns\n    const remainColumns = grid.columns - columnIndex\n    const originSpan = node.originSpan\n    const targetSpan = originSpan > grid.columns ? grid.columns : originSpan\n    const span = grid.options.strictAutoFit\n      ? targetSpan\n      : targetSpan > remainColumns\n      ? remainColumns\n      : targetSpan\n    const gridColumn =\n      originSpan === -1 ? `span ${remainColumns} / -1` : `span ${span} / auto`\n    if (node.element.style.gridColumn !== gridColumn) {\n      node.element.style.gridColumn = gridColumn\n    }\n    if (node.visible) {\n      walked += span\n    }\n    shadowWalked += span\n    if (columnIndex === 0) {\n      rowIndex++\n    }\n    if (shadowColumnIndex == 0) {\n      shadowRowIndex++\n    }\n    node.shadowRow = shadowRowIndex\n    node.shadowColumn = shadowColumnIndex + 1\n    if (node.visible) {\n      node.row = rowIndex\n      node.column = columnIndex + 1\n    }\n    if (grid.options?.shouldVisible) {\n      if (!grid.options.shouldVisible(node, grid)) {\n        if (node.visible) {\n          node.element.style.display = 'none'\n        }\n        node.visible = false\n      } else {\n        if (!node.visible) {\n          node.element.style.display = ''\n        }\n        node.visible = true\n      }\n    }\n    return node\n  })\n}\n\nconst nextTick = (callback?: () => void) => Promise.resolve(0).then(callback)\n\nexport type GridNode = {\n  index?: number\n  visible?: boolean\n  column?: number\n  shadowColumn?: number\n  row?: number\n  shadowRow?: number\n  span?: number\n  originSpan?: number\n  element?: HTMLElement\n}\nexport class Grid<Container extends HTMLElement> {\n  options: IGridOptions\n  width = 0\n  height = 0\n  container: Container\n  children: GridNode[] = []\n  childTotalColumns = 0\n  shadowChildTotalColumns = 0\n  childOriginTotalColumns = 0\n  shadowChildOriginTotalColumns = 0\n  ready = false\n  constructor(options?: IGridOptions) {\n    this.options = {\n      breakpoints: [720, 1280, 1920],\n      columnGap: 8,\n      rowGap: 4,\n      minWidth: 100,\n      colWrap: true,\n      strictAutoFit: false,\n      ...options,\n    }\n    define(this, {\n      options: observable.shallow,\n      width: observable.ref,\n      height: observable.ref,\n      ready: observable.ref,\n      children: observable.ref,\n      childOriginTotalColumns: observable.ref,\n      shadowChildOriginTotalColumns: observable.ref,\n      shadowChildTotalColumns: observable.ref,\n      childTotalColumns: observable.ref,\n      columns: observable.computed,\n      templateColumns: observable.computed,\n      gap: observable.computed,\n      maxColumns: observable.computed,\n      minColumns: observable.computed,\n      maxWidth: observable.computed,\n      minWidth: observable.computed,\n      breakpoints: observable.computed,\n      breakpoint: observable.computed,\n      rowGap: observable.computed,\n      columnGap: observable.computed,\n      colWrap: observable.computed,\n    })\n  }\n\n  set breakpoints(breakpoints) {\n    this.options.breakpoints = breakpoints\n  }\n\n  get breakpoints() {\n    return this.options.breakpoints\n  }\n\n  get breakpoint() {\n    return calcBreakpointIndex(this.options.breakpoints, this.width)\n  }\n\n  set maxWidth(maxWidth) {\n    this.options.maxWidth = maxWidth\n  }\n\n  get maxWidth() {\n    return factor(this.options.maxWidth, this) ?? Infinity\n  }\n\n  set minWidth(minWidth) {\n    this.options.minWidth = minWidth\n  }\n\n  get minWidth() {\n    return factor(this.options.minWidth, this) ?? 100\n  }\n\n  set maxColumns(maxColumns) {\n    this.options.maxColumns = maxColumns\n  }\n\n  get maxColumns() {\n    return factor(this.options.maxColumns, this) ?? Infinity\n  }\n\n  set maxRows(maxRows) {\n    this.options.maxRows = maxRows\n  }\n\n  get maxRows() {\n    return this.options.maxRows ?? Infinity\n  }\n\n  set minColumns(minColumns) {\n    this.options.minColumns = minColumns\n  }\n\n  get minColumns() {\n    return factor(this.options.minColumns, this) ?? 1\n  }\n\n  set rowGap(rowGap) {\n    this.options.rowGap = rowGap\n  }\n\n  get rowGap() {\n    return factor(this.options.rowGap, this) ?? 5\n  }\n\n  set columnGap(columnGap) {\n    this.options.columnGap = columnGap\n  }\n\n  get columnGap() {\n    return factor(this.options.columnGap, this) ?? 10\n  }\n\n  set colWrap(colWrap) {\n    this.options.colWrap = colWrap\n  }\n\n  get colWrap() {\n    return factor(this.options.colWrap, this) ?? true\n  }\n\n  get columns() {\n    if (!this.ready) return 0\n\n    const originTotalColumns = this.childOriginTotalColumns\n\n    if (this.colWrap === false) {\n      return originTotalColumns\n    }\n\n    const baseColumns = this.childSize\n\n    const strictMaxWidthColumns = Math.round(\n      this.width / (this.maxWidth + this.columnGap)\n    )\n\n    const looseMaxWidthColumns = Math.min(\n      originTotalColumns,\n      strictMaxWidthColumns\n    )\n\n    const maxWidthColumns = this.options.strictAutoFit\n      ? strictMaxWidthColumns\n      : looseMaxWidthColumns\n\n    const strictMinWidthColumns = Math.round(\n      this.width / (this.minWidth + this.columnGap)\n    )\n\n    const looseMinWidthColumns = Math.min(\n      originTotalColumns,\n      strictMinWidthColumns\n    )\n\n    const minWidthColumns = this.options.strictAutoFit\n      ? strictMinWidthColumns\n      : looseMinWidthColumns\n\n    const minCalculatedColumns = Math.min(\n      baseColumns,\n      originTotalColumns,\n      maxWidthColumns,\n      minWidthColumns\n    )\n\n    const maxCalculatedColumns = Math.max(\n      baseColumns,\n      originTotalColumns,\n      maxWidthColumns,\n      minWidthColumns\n    )\n\n    const finalColumns = calcSatisfyColumns(\n      this.width,\n      maxCalculatedColumns,\n      minCalculatedColumns,\n      this.maxWidth,\n      this.minWidth,\n      this.columnGap\n    )\n    if (finalColumns >= this.maxColumns) {\n      return this.maxColumns\n    }\n    if (finalColumns <= this.minColumns) {\n      return this.minColumns\n    }\n    return finalColumns\n  }\n\n  get rows() {\n    return Math.ceil(this.childTotalColumns / this.columns)\n  }\n\n  get shadowRows() {\n    return Math.ceil(this.shadowChildTotalColumns / this.columns)\n  }\n\n  get templateColumns() {\n    if (!this.width) return ''\n    if (this.maxWidth === Infinity) {\n      return `repeat(${this.columns},minmax(0,1fr))`\n    }\n    if (this.options.strictAutoFit !== true) {\n      const columnWidth =\n        (this.width - (this.columns - 1) * this.columnGap) / this.columns\n      if (columnWidth < this.minWidth || columnWidth > this.maxWidth) {\n        return `repeat(${this.columns},minmax(0,1fr))`\n      }\n    }\n    return `repeat(${this.columns},minmax(${this.minWidth}px,${this.maxWidth}px))`\n  }\n\n  get gap() {\n    return `${this.rowGap}px ${this.columnGap}px`\n  }\n\n  get childSize() {\n    return this.children.length\n  }\n\n  get fullnessLastColumn() {\n    return this.columns === this.children[this.childSize - 1]?.span\n  }\n\n  connect = (container: Container) => {\n    if (container) {\n      this.container = container\n      const initialize = batch.bound(() => {\n        digest()\n        this.ready = true\n      })\n      const digest = batch.bound(() => {\n        this.children = parseGridNode(this.container.children)\n        this.childTotalColumns = calcChildTotalColumns(this.children)\n        this.shadowChildTotalColumns = calcChildTotalColumns(\n          this.children,\n          true\n        )\n        this.childOriginTotalColumns = calcChildOriginTotalColumns(\n          this.children\n        )\n        this.shadowChildOriginTotalColumns = calcChildOriginTotalColumns(\n          this.children,\n          true\n        )\n        const rect = this.container.getBoundingClientRect()\n        if (rect.width && rect.height) {\n          this.width = rect.width\n          this.height = rect.height\n        }\n        resolveChildren(this)\n        nextTick(() => {\n          this.options?.onDigest?.(this)\n        })\n        if (!this.ready) {\n          nextTick(() => {\n            this.options?.onInitialized?.(this)\n          })\n        }\n      })\n      const mutationObserver = new ChildListMutationObserver(digest)\n      const resizeObserver = new ResizeObserver(digest)\n      const dispose = reaction(() => ({ ...this.options }), digest)\n      resizeObserver.observe(this.container)\n      mutationObserver.observe(this.container, {\n        attributeFilter: ['data-grid-span'],\n        attributes: true,\n      })\n      initialize()\n      return () => {\n        resizeObserver.unobserve(this.container)\n        resizeObserver.disconnect()\n        mutationObserver.disconnect()\n        dispose()\n        this.children = []\n      }\n    }\n\n    return () => {}\n  }\n\n  static id = (options: IGridOptions = {}) =>\n    JSON.stringify(\n      [\n        'maxRows',\n        'maxColumns',\n        'minColumns',\n        'maxWidth',\n        'minWidth',\n        'breakpoints',\n        'columnGap',\n        'rowGap',\n        'colWrap',\n        'strictAutoFit',\n      ].map((key) => options[key])\n    )\n}\n"],"names":["ResizeObserverBoxOptions","isHTMLElement","node","nodeType","ChildListMutationObserver","callback","_this","this","childList","handler","mutations","forEach","mutation","type","addedNodes","addObserver","removedNodes","removeObserver","observer","observe","element","init","observeChildList","__assign","subtree","characterData","characterDataOldValue","attributeOldValue","disconnect","MutationObserver","prototype","Array","from","children","find","t","childIndex_1","length","child_1","dispose","splice","push","child","_a","call","resizeObservers","msg","trigger","freeze","obj","Object","ResizeObserverSize","inlineSize","blockSize","DOMRectReadOnly","x","y","width","height","top","left","bottom","right","toJSON","fromRect","rectangle","isSVG","target","SVGElement","isHidden","getBBox","_b","offsetWidth","offsetHeight","getClientRects","isElement","Element","scope","ownerDocument","defaultView","global","window","cache","WeakMap","scrollRegexp","verticalRegexp","IE","test","navigator","userAgent","parseDimension","pixel","parseFloat","size","switchSizes","zeroBoxes","devicePixelContentBoxSize","borderBoxSize","contentBoxSize","contentRect","calculateBoxSizes","forceRecalculation","has","get","set","cs","getComputedStyle","svg","ownerSVGElement","removePadding","boxSizing","writingMode","canScrollVertically","overflowY","canScrollHorizontally","overflowX","paddingTop","paddingRight","paddingBottom","paddingLeft","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","horizontalPadding","verticalPadding","horizontalBorderArea","borderLeftWidth","verticalBorderArea","horizontalScrollbarThickness","clientHeight","verticalScrollbarThickness","clientWidth","widthReduction","heightReduction","contentWidth","contentHeight","borderBoxWidth","borderBoxHeight","boxes","Math","round","devicePixelRatio","calculateBoxSize","observedBox","DEVICE_PIXEL_CONTENT_BOX","BORDER_BOX","ResizeObserverEntry","calculateDepthForNode","Infinity","depth","parent","parentNode","broadcastActiveObservations","shallowestDepth","callbacks","ro","activeTargets","entries","ot","entry","targetDepth","lastReportedSize","_i","callbacks_1","gatherActiveObservationsAtDepth","skippedTargets","observationTargets","isActive","process","event","some","ErrorEvent","message","document","createEvent","initEvent","dispatchEvent","queueMicroTask","toggle_1","el_1","createTextNode","cb","textContent","watching","observerConfig","attributes","events","time","timeout","Date","now","scheduled","scheduler","Scheduler","stopped","listener","schedule","run","until","elementsHaveResized","start","requestAnimationFrame","stop","body","addEventListener","name","removeEventListener","updateCount","n","ResizeObservation","CONTENT_BOX","tagName","isReplacedElement","display","ResizeObserverDetail","resizeObserver","observerMap","getObservationIndex","i","ResizeObserverController","connect","detail","options","firstObservation","box","unobserve","index","lastObservation","indexOf","slice","ResizeObserver","arguments","TypeError","toString","SpanRegExp","calcChildTotalColumns","nodes","shadow","reduce","buf","originSpan","span","calcChildOriginTotalColumns","calcSatisfyColumns","maxColumns","minColumns","maxWidth","minWidth","gap","columnWidth","innerWidth_1","columns","results","min","floor","max","apply","__spreadArray","__read","parseSpan","gridColumnStart","Number","String","match","factor","value","grid","isValid","breakpointIndex","isArray","calcFactor","breakpoint","nextTick","Promise","resolve","then","Grid","container","initialize","Formily","Reactive","batch","bound","digest_1","ready","elements","style","visible","origin","concat","walked","shadowWalked","rowIndex","shadowRowIndex","rect","columnIndex","shadowColumnIndex","remainColumns","targetSpan","strictAutoFit","gridColumn","shadowRow","shadowColumn","row","column","shouldVisible","mutationObserver_1","resizeObserver_1","dispose_1","reaction","breakpoints","columnGap","rowGap","colWrap","define","observable","shallow","ref","computed","defineProperty","calcBreakpointIndex","maxRows","originTotalColumns","childOriginTotalColumns","baseColumns","childSize","maxWidthColumns","strictMaxWidthColumns","minWidthColumns","strictMinWidthColumns","minCalculatedColumns","maxCalculatedColumns","finalColumns","ceil","childTotalColumns","shadowChildTotalColumns","map","key"],"mappings":"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"}