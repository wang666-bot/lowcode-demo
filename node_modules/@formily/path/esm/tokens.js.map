{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../src/tokens.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  bracketContext,\n  parenContext,\n  bracketArrayContext,\n  bracketDContext,\n  braceContext,\n  destructorContext,\n} from './contexts'\n\ninterface ITokenProps {\n  expectNext?: (next?: Token) => boolean\n  expectPrev?: (prev?: Token) => boolean\n  updateContext?: (prev?: Token) => void\n}\n\nexport type Token = ITokenProps & {\n  flag: string\n}\n\nconst TokenType = (flag: string, props?: ITokenProps): Token => {\n  return {\n    flag,\n    ...props,\n  }\n}\n\nexport const nameTok = TokenType('name', {\n  expectNext(next) {\n    if (this.includesContext(destructorContext)) {\n      return (\n        next === nameTok ||\n        next === commaTok ||\n        next === bracketRTok ||\n        next === braceRTok ||\n        next === colonTok\n      )\n    }\n    return (\n      next === dotTok ||\n      next === commaTok ||\n      next === eofTok ||\n      next === bracketRTok ||\n      next === parenRTok ||\n      next === colonTok ||\n      next === expandTok ||\n      next === bracketLTok\n    )\n  },\n})\nexport const starTok = TokenType('*', {\n  expectNext(next) {\n    return (\n      next === dotTok ||\n      next === parenLTok ||\n      next === bracketLTok ||\n      next === eofTok ||\n      next === commaTok ||\n      next === parenRTok\n    )\n  },\n})\nexport const dbStarTok = TokenType('**', {\n  expectNext(next) {\n    return (\n      next === dotTok ||\n      next === bracketLTok ||\n      next === eofTok ||\n      next === commaTok ||\n      next === parenRTok\n    )\n  },\n})\nexport const dotTok = TokenType('.', {\n  expectNext(next) {\n    return (\n      next === dotTok ||\n      next === nameTok ||\n      next === bracketDLTok ||\n      next === starTok ||\n      next === dbStarTok ||\n      next === bracketLTok ||\n      next === braceLTok ||\n      next === eofTok\n    )\n  },\n  expectPrev(prev) {\n    return (\n      prev === dotTok ||\n      prev === nameTok ||\n      prev === bracketDRTok ||\n      prev === starTok ||\n      prev === parenRTok ||\n      prev === bracketRTok ||\n      prev === expandTok ||\n      prev === braceRTok\n    )\n  },\n})\nexport const bangTok = TokenType('!', {\n  expectNext(next) {\n    return next === nameTok || next === bracketDLTok\n  },\n})\nexport const colonTok = TokenType(':', {\n  expectNext(next) {\n    if (this.includesContext(destructorContext)) {\n      return next === nameTok || next === braceLTok || next === bracketLTok\n    }\n    return next === nameTok || next === bracketDLTok || next === bracketRTok\n  },\n})\n\nexport const braceLTok = TokenType('{', {\n  expectNext(next) {\n    return next === nameTok\n  },\n  expectPrev(prev) {\n    if (this.includesContext(destructorContext)) {\n      return prev === colonTok || prev === commaTok || prev === bracketLTok\n    }\n    return prev === dotTok || prev === colonTok || prev === parenLTok\n  },\n  updateContext() {\n    this.state.context.push(braceContext)\n  },\n})\n\nexport const braceRTok = TokenType('}', {\n  expectNext(next) {\n    if (this.includesContext(destructorContext)) {\n      return (\n        next === commaTok ||\n        next === braceRTok ||\n        next === eofTok ||\n        next === bracketRTok\n      )\n    }\n    return next === dotTok || next === eofTok || next === commaTok\n  },\n  expectPrev(prev) {\n    return prev === nameTok || prev === braceRTok || prev === bracketRTok\n  },\n  updateContext() {\n    this.state.context.pop(braceContext)\n  },\n})\n\nexport const bracketLTok = TokenType('[', {\n  expectNext(next) {\n    if (this.includesContext(destructorContext)) {\n      return (\n        next === nameTok ||\n        next === bracketLTok ||\n        next === braceLTok ||\n        next === bracketRTok\n      )\n    }\n    return (\n      next === nameTok ||\n      next === bracketDLTok ||\n      next === colonTok ||\n      next === bracketLTok ||\n      next === ignoreTok ||\n      next === bracketRTok\n    )\n  },\n  expectPrev(prev) {\n    if (this.includesContext(destructorContext)) {\n      return prev === colonTok || prev === commaTok || prev === bracketLTok\n    }\n    return (\n      prev === starTok ||\n      prev === bracketLTok ||\n      prev === dotTok ||\n      prev === nameTok ||\n      prev === parenLTok ||\n      // never reach\n      prev == commaTok\n    )\n  },\n  updateContext() {\n    this.state.context.push(bracketContext)\n  },\n})\n\nexport const bracketRTok = TokenType(']', {\n  expectNext(next) {\n    if (this.includesContext(destructorContext)) {\n      return (\n        next === commaTok ||\n        next === braceRTok ||\n        next === bracketRTok ||\n        next === eofTok\n      )\n    }\n    return (\n      next === dotTok ||\n      next === eofTok ||\n      next === commaTok ||\n      next === parenRTok ||\n      next === bracketRTok\n    )\n  },\n  updateContext() {\n    if (this.includesContext(bracketArrayContext)) return\n    if (!this.includesContext(bracketContext)) throw this.unexpect()\n    this.state.context.pop()\n  },\n})\n\nexport const bracketDLTok = TokenType('[[', {\n  updateContext() {\n    this.state.context.push(bracketDContext)\n  },\n})\n\nexport const bracketDRTok = TokenType(']]', {\n  updateContext() {\n    if (this.curContext() !== bracketDContext) throw this.unexpect()\n    this.state.context.pop()\n  },\n})\n\nexport const parenLTok = TokenType('(', {\n  expectNext(next) {\n    return (\n      next === nameTok ||\n      next === bracketDLTok ||\n      next === braceLTok ||\n      next === bangTok ||\n      next === bracketLTok\n    )\n  },\n  expectPrev(prev) {\n    return prev === starTok\n  },\n  updateContext() {\n    this.state.context.push(parenContext)\n  },\n})\nexport const parenRTok = TokenType(')', {\n  expectNext(next) {\n    return (\n      next === dotTok ||\n      next === eofTok ||\n      next === commaTok ||\n      next === parenRTok\n    )\n  },\n  updateContext() {\n    if (this.curContext() !== parenContext) throw this.unexpect()\n    this.state.context.pop()\n  },\n})\n\nexport const commaTok = TokenType(',', {\n  expectNext(next) {\n    return (\n      next === nameTok ||\n      next === bracketDLTok ||\n      next === bracketLTok ||\n      next === braceLTok\n    )\n  },\n})\nexport const ignoreTok = TokenType('ignore', {\n  expectNext(next) {\n    return next === bracketDRTok\n  },\n  expectPrev(prev) {\n    return prev == bracketDLTok\n  },\n})\n\nexport const expandTok = TokenType('expandTok', {\n  expectNext(next) {\n    return (\n      next === dotTok ||\n      next === eofTok ||\n      next === commaTok ||\n      next === parenRTok\n    )\n  },\n})\n\nexport const eofTok = TokenType('eof')\n"]}