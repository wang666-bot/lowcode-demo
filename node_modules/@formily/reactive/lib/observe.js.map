{"version":3,"file":"observe.js","sourceRoot":"","sources":["../src/observe.ts"],"names":[],"mappings":";;;AACA,6CAAiD;AACjD,yCAA2C;AAC3C,uCAAiC;AACjC,+BAAgD;AAEzC,IAAM,OAAO,GAAG,UACrB,MAAc,EACd,QAAuC,EACvC,IAAW;IAAX,qBAAA,EAAA,WAAW;IAEX,IAAM,WAAW,GAAG,UAAC,MAAW;QAC9B,IAAM,GAAG,GAAG,IAAA,eAAM,EAAC,MAAM,CAAC,CAAA;QAC1B,IAAM,IAAI,GAAG,IAAA,kBAAW,EAAC,GAAG,CAAC,CAAA;QAE7B,IAAM,QAAQ,GAAG,UAAC,SAAqB;YACrC,IAAM,SAAS,GAAG,IAAA,eAAM,EAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YAC1C,IAAM,UAAU,GAAG,IAAA,kBAAW,EAAC,SAAS,CAAC,CAAA;YACzC,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBAC7B,QAAQ,CAAC,IAAI,iBAAU,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAA;oBAC/C,OAAM;iBACP;aACF;YACD,IACE,IAAI,KAAK,UAAU;gBACnB,CAAC,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,CAAC,EAC5D;gBACA,QAAQ,CAAC,IAAI,iBAAU,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAA;aAChD;QACH,CAAC,CAAA;QAED,IAAI,IAAI,IAAI,IAAA,eAAI,EAAC,QAAQ,CAAC,EAAE;YAC1B,+BAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SAChC;QACD,OAAO;YACL,+BAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QACpC,CAAC,CAAA;IACH,CAAC,CAAA;IACD,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ;QACtC,MAAM,KAAK,CAAC,0BAAmB,OAAO,MAAM,WAAQ,CAAC,CAAA;IACvD,OAAO,WAAW,CAAC,MAAM,CAAC,CAAA;AAC5B,CAAC,CAAA;AApCY,QAAA,OAAO,WAoCnB","sourcesContent":["import { IOperation } from './types'\nimport { ObserverListeners } from './environment'\nimport { raw as getRaw } from './externals'\nimport { isFn } from './checkers'\nimport { DataChange, getDataNode } from './tree'\n\nexport const observe = (\n  target: object,\n  observer?: (change: DataChange) => void,\n  deep = true\n) => {\n  const addListener = (target: any) => {\n    const raw = getRaw(target)\n    const node = getDataNode(raw)\n\n    const listener = (operation: IOperation) => {\n      const targetRaw = getRaw(operation.target)\n      const targetNode = getDataNode(targetRaw)\n      if (deep) {\n        if (node.contains(targetNode)) {\n          observer(new DataChange(operation, targetNode))\n          return\n        }\n      }\n      if (\n        node === targetNode ||\n        (node.targetRaw === targetRaw && node.key === operation.key)\n      ) {\n        observer(new DataChange(operation, targetNode))\n      }\n    }\n\n    if (node && isFn(observer)) {\n      ObserverListeners.add(listener)\n    }\n    return () => {\n      ObserverListeners.delete(listener)\n    }\n  }\n  if (target && typeof target !== 'object')\n    throw Error(`Can not observe ${typeof target} type.`)\n  return addListener(target)\n}\n"]}