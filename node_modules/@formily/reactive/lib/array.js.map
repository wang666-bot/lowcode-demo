{"version":3,"file":"array.js","sourceRoot":"","sources":["../src/array.ts"],"names":[],"mappings":";;;AAAO,IAAM,OAAO,GAAG,UAAC,KAAU;IAChC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC,KAAK;QACP,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;YACvC,CAAC,CAAC,CAAC,KAAK,CAAC;YACT,CAAC,CAAC,EAAE,CAAA;AACR,CAAC,CAAA;AANY,QAAA,OAAO,WAMnB;AAED;IAGE,kBAAY,KAAe;QAAf,sBAAA,EAAA,UAAe;QAD3B,iBAAY,GAAG,CAAC,CAAA;QAEd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACpB,CAAC;IAED,sBAAG,GAAH,UAAI,IAAO;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACtB;IACH,CAAC;IAED,sBAAG,GAAH,UAAI,IAAO;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IACtC,CAAC;IAED,yBAAM,GAAN,UAAO,IAAO;QACZ,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAA;QAC7B,IAAI,GAAG,KAAK,CAAC;YAAE,OAAM;QACrB,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;YACvC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;YACf,OAAM;SACP;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC1C,IAAI,SAAS,GAAG,CAAC,CAAC,EAAE;YAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;YAC/B,IAAI,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE;gBAClC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAA;aACvB;SACF;IACH,CAAC;IAED,0BAAO,GAAP,UAAQ,QAA4B;QAClC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,OAAM;QACnC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA;QACrB,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE;YACjE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAA;SACxC;IACH,CAAC;IAED,8BAAW,GAAX,UAAY,QAA4B;QACtC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,OAAM;QACnC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA;QACrB,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE;YACjE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YAC3C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAA;YACvC,IAAI,CAAC,YAAY,EAAE,CAAA;YACnB,QAAQ,CAAC,KAAK,CAAC,CAAA;SAChB;IACH,CAAC;IAED,wBAAK,GAAL;QACE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;IACvB,CAAC;IACH,eAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,4BAAQ","sourcesContent":["export const toArray = (value: any) => {\n  return Array.isArray(value)\n    ? value\n    : value !== undefined && value !== null\n    ? [value]\n    : []\n}\n\nexport class ArraySet<T> {\n  value: T[]\n  forEachIndex = 0\n  constructor(value: T[] = []) {\n    this.value = value\n  }\n\n  add(item: T) {\n    if (!this.has(item)) {\n      this.value.push(item)\n    }\n  }\n\n  has(item: T) {\n    return this.value.indexOf(item) > -1\n  }\n\n  delete(item: T) {\n    const len = this.value.length\n    if (len === 0) return\n    if (len === 1 && this.value[0] === item) {\n      this.value = []\n      return\n    }\n    const findIndex = this.value.indexOf(item)\n    if (findIndex > -1) {\n      this.value.splice(findIndex, 1)\n      if (findIndex <= this.forEachIndex) {\n        this.forEachIndex -= 1\n      }\n    }\n  }\n\n  forEach(callback: (value: T) => void) {\n    if (this.value.length === 0) return\n    this.forEachIndex = 0\n    for (; this.forEachIndex < this.value.length; this.forEachIndex++) {\n      callback(this.value[this.forEachIndex])\n    }\n  }\n\n  batchDelete(callback: (value: T) => void) {\n    if (this.value.length === 0) return\n    this.forEachIndex = 0\n    for (; this.forEachIndex < this.value.length; this.forEachIndex++) {\n      const value = this.value[this.forEachIndex]\n      this.value.splice(this.forEachIndex, 1)\n      this.forEachIndex--\n      callback(value)\n    }\n  }\n\n  clear() {\n    this.value.length = 0\n  }\n}\n"]}