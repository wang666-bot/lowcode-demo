{"version":3,"file":"ref.js","sourceRoot":"","sources":["../../src/annotations/ref.ts"],"names":[],"mappings":";;;AAAA,8CAA8C;AAC9C,0CAA+C;AAC/C,gCAAuC;AACvC,wCAGoB;AAMP,QAAA,GAAG,GAAS,IAAA,4BAAgB,EAAC,UAAC,EAAsB;QAApB,MAAM,YAAA,EAAE,GAAG,SAAA,EAAE,KAAK,WAAA;IAC7D,IAAM,KAAK,GAAG;QACZ,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK;KACpC,CAAA;IAED,IAAM,KAAK,GAAG,EAAE,CAAA;IAEhB,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAA;IACvC,IAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAA;IAEvC,SAAS,GAAG;QACV,IAAA,2CAAgC,EAAC;YAC/B,MAAM,EAAE,OAAO;YACf,GAAG,EAAE,QAAQ;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAA;QACF,OAAO,KAAK,CAAC,KAAK,CAAA;IACpB,CAAC;IAED,SAAS,GAAG,CAAC,KAAU;QACrB,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAA;QAC5B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAA;QACnB,IAAI,QAAQ,KAAK,KAAK,EAAE;YACtB,IAAA,oCAAyB,EAAC;gBACxB,MAAM,EAAE,OAAO;gBACf,GAAG,EAAE,QAAQ;gBACb,IAAI,EAAE,KAAK;gBACX,QAAQ,UAAA;gBACR,KAAK,OAAA;aACN,CAAC,CAAA;SACH;IACH,CAAC;IACD,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE;YACjC,GAAG,KAAA;YACH,GAAG,KAAA;YACH,UAAU,EAAE,IAAI;SACjB,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;KACd;SAAM;QACL,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE;YACpC,GAAG,KAAA;YACH,GAAG,KAAA;SACJ,CAAC,CAAA;QACF,IAAA,oBAAa,EAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;QACjC,KAAK,CAAC,2BAAa,CAAC,GAAG,KAAK,CAAA;KAC7B;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAC,CAAA","sourcesContent":["import { ObModelSymbol } from '../environment'\nimport { createAnnotation } from '../internals'\nimport { buildDataTree } from '../tree'\nimport {\n  bindTargetKeyWithCurrentReaction,\n  runReactionsFromTargetKey,\n} from '../reaction'\n\nexport interface IRef {\n  <T>(target: T): { value: T }\n}\n\nexport const ref: IRef = createAnnotation(({ target, key, value }) => {\n  const store = {\n    value: target ? target[key] : value,\n  }\n\n  const proxy = {}\n\n  const context = target ? target : store\n  const property = target ? key : 'value'\n\n  function get() {\n    bindTargetKeyWithCurrentReaction({\n      target: context,\n      key: property,\n      type: 'get',\n    })\n    return store.value\n  }\n\n  function set(value: any) {\n    const oldValue = store.value\n    store.value = value\n    if (oldValue !== value) {\n      runReactionsFromTargetKey({\n        target: context,\n        key: property,\n        type: 'set',\n        oldValue,\n        value,\n      })\n    }\n  }\n  if (target) {\n    Object.defineProperty(target, key, {\n      get,\n      set,\n      enumerable: true,\n    })\n    return target\n  } else {\n    Object.defineProperty(proxy, 'value', {\n      set,\n      get,\n    })\n    buildDataTree(target, key, store)\n    proxy[ObModelSymbol] = store\n  }\n  return proxy\n})\n"]}