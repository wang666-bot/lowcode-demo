{"version":3,"file":"tree.js","sourceRoot":"","sources":["../src/tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObModelSymbol, ObModelNodeSymbol, RawNode } from './environment'\nimport { raw as getRaw } from './externals'\nimport { PropertyKey, IOperation } from './types'\nexport class DataChange {\n  node: DataNode\n  key: PropertyKey\n  object: object\n  type: string\n  value: any\n  oldValue: any\n  constructor(operation: IOperation, node: DataNode) {\n    this.node = node\n    this.key = operation.key\n    this.type = operation.type\n    this.object = operation.target\n    this.value = operation.value\n    this.oldValue = operation.oldValue\n  }\n\n  get path() {\n    return this.node.path.concat(this.key)\n  }\n}\nexport class DataNode {\n  target: any\n\n  key: PropertyKey\n\n  value: any\n\n  constructor(target: any, key: PropertyKey, value: any) {\n    this.target = target\n    this.key = key\n    this.value = value\n  }\n\n  get path() {\n    if (!this.parent) return this.key ? [this.key] : []\n    return this.parent.path.concat(this.key)\n  }\n\n  get targetRaw() {\n    return getRaw(this.target)\n  }\n\n  get parent() {\n    if (!this.target) return\n    return getDataNode(this.targetRaw)\n  }\n\n  isEqual(node: DataNode) {\n    if (this.key) {\n      return node.targetRaw === this.targetRaw && node.key === this.key\n    }\n    return node.value === this.value\n  }\n\n  contains(node: DataNode) {\n    if (node === this) return true\n    let parent = node.parent\n    while (!!parent) {\n      if (this.isEqual(parent)) return true\n      parent = parent.parent\n    }\n    return false\n  }\n}\n\nexport const getDataNode = (raw: any) => {\n  if (raw?.[ObModelNodeSymbol]) {\n    return raw[ObModelNodeSymbol]\n  }\n  return RawNode.get(raw)\n}\n\nexport const setDataNode = (raw: any, node: DataNode) => {\n  if (raw?.[ObModelSymbol]) {\n    raw[ObModelNodeSymbol] = node\n    return\n  }\n  RawNode.set(raw, node)\n}\n\nexport const buildDataTree = (target: any, key: PropertyKey, value: any) => {\n  const raw = getRaw(value)\n  const currentNode = getDataNode(raw)\n  if (currentNode) return currentNode\n  setDataNode(raw, new DataNode(target, key, value))\n}\n"]}