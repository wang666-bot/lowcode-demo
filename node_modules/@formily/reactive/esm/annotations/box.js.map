{"version":3,"file":"box.js","sourceRoot":"","sources":["../../src/annotations/box.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AACnD,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAA;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AACvC,OAAO,EACL,gCAAgC,EAChC,yBAAyB,GAC1B,MAAM,aAAa,CAAA;AAMpB,MAAM,CAAC,IAAM,GAAG,GAAS,gBAAgB,CAAC,UAAC,EAAsB;QAApB,MAAM,YAAA,EAAE,GAAG,SAAA,EAAE,KAAK,WAAA;IAC7D,IAAM,KAAK,GAAG;QACZ,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK;KACpC,CAAA;IAED,IAAM,KAAK,GAAG;QACZ,GAAG,KAAA;QACH,GAAG,KAAA;KACJ,CAAA;IAED,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAC1B,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAE1B,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;IAEjC,SAAS,GAAG;QACV,gCAAgC,CAAC;YAC/B,MAAM,EAAE,KAAK;YACb,GAAG,KAAA;YACH,IAAI,EAAE,KAAK;SACZ,CAAC,CAAA;QACF,OAAO,KAAK,CAAC,KAAK,CAAA;IACpB,CAAC;IAED,SAAS,GAAG,CAAC,KAAU;QACrB,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAA;QAC5B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAA;QACnB,IAAI,QAAQ,KAAK,KAAK,EAAE;YACtB,yBAAyB,CAAC;gBACxB,MAAM,EAAE,KAAK;gBACb,GAAG,KAAA;gBACH,IAAI,EAAE,KAAK;gBACX,QAAQ,UAAA;gBACR,KAAK,OAAA;aACN,CAAC,CAAA;SACH;IACH,CAAC;IAED,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE;YACjC,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;KACd;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAC,CAAA","sourcesContent":["import { ProxyRaw, RawProxy } from '../environment'\nimport { createAnnotation } from '../internals'\nimport { buildDataTree } from '../tree'\nimport {\n  bindTargetKeyWithCurrentReaction,\n  runReactionsFromTargetKey,\n} from '../reaction'\n\nexport interface IBox {\n  <T>(target: T): { get(): T; set(value: T): void }\n}\n\nexport const box: IBox = createAnnotation(({ target, key, value }) => {\n  const store = {\n    value: target ? target[key] : value,\n  }\n\n  const proxy = {\n    set,\n    get,\n  }\n\n  ProxyRaw.set(proxy, store)\n  RawProxy.set(store, proxy)\n\n  buildDataTree(target, key, store)\n\n  function get() {\n    bindTargetKeyWithCurrentReaction({\n      target: store,\n      key,\n      type: 'get',\n    })\n    return store.value\n  }\n\n  function set(value: any) {\n    const oldValue = store.value\n    store.value = value\n    if (oldValue !== value) {\n      runReactionsFromTargetKey({\n        target: store,\n        key,\n        type: 'set',\n        oldValue,\n        value,\n      })\n    }\n  }\n\n  if (target) {\n    Object.defineProperty(target, key, {\n      value: proxy,\n      enumerable: true,\n      configurable: false,\n      writable: false,\n    })\n    return target\n  }\n  return proxy\n})\n"]}