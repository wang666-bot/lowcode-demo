{"version":3,"file":"reaction.js","sourceRoot":"","sources":["../src/reaction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAA;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAElC,OAAO,EACL,aAAa,EACb,qBAAqB,EACrB,cAAc,EACd,mBAAmB,EACnB,eAAe,EACf,gBAAgB,EAChB,UAAU,EACV,YAAY,EACZ,UAAU,EACV,iBAAiB,GAClB,MAAM,eAAe,CAAA;AAEtB,IAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;AAE7C,IAAM,kBAAkB,GAAG,UACzB,MAAW,EACX,GAAgB,EAChB,QAAkB;IAElB,IAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAChD,IAAI,YAAY,EAAE;QAChB,IAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QACvC,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SACxB;aAAM;YACL,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;SAChD;QACD,OAAO,YAAY,CAAA;KACpB;SAAM;QACL,IAAM,cAAY,GAAiB,IAAI,GAAG,CAAC;YACzC,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SAChC,CAAC,CAAA;QACF,eAAe,CAAC,GAAG,CAAC,MAAM,EAAE,cAAY,CAAC,CAAA;QACzC,OAAO,cAAY,CAAA;KACpB;AACH,CAAC,CAAA;AAED,IAAM,yBAAyB,GAAG,UAChC,QAAkB,EAClB,YAA0B;IAE1B,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAA;IACtC,IAAI,OAAO,EAAE;QACX,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;KAC1B;SAAM;QACL,QAAQ,CAAC,aAAa,GAAG,IAAI,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;KACtD;IACD,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAED,IAAM,yBAAyB,GAAG,UAAC,MAAW,EAAE,GAAgB;IAC9D,IAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAChD,IAAM,SAAS,GAAG,EAAE,CAAA;IACpB,IAAI,YAAY,EAAE;QAChB,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QACjC,IAAI,GAAG,EAAE;YACP,GAAG,CAAC,OAAO,CAAC,UAAC,QAAQ;gBACnB,IAAI,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;oBACtC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;iBACzB;YACH,CAAC,CAAC,CAAA;SACH;KACF;IACD,OAAO,SAAS,CAAA;AAClB,CAAC,CAAA;AAED,IAAM,YAAY,GAAG,UAAC,MAAW,EAAE,GAAgB;IACjD,IAAM,SAAS,GAAG,yBAAyB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;IACxD,IAAM,gBAAgB,GAAG,YAAY,CAAC,KAAK,CAAA;IAC3C,YAAY,CAAC,KAAK,GAAG,CAAC,CAAA;IACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QACpD,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;QAC7B,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;SAC9B;aAAM,IAAI,eAAe,EAAE,EAAE;YAC5B,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SACpC;aAAM,IAAI,UAAU,EAAE,EAAE;YACvB,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SAC/B;aAAM;YACL,cAAc;YACd,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC7B,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;aAC9B;iBAAM;gBACL,QAAQ,EAAE,CAAA;aACX;SACF;KACF;IACD,YAAY,CAAC,KAAK,GAAG,gBAAgB,CAAA;AACvC,CAAC,CAAA;AAED,IAAM,eAAe,GAAG,UAAC,SAAqB;IAC5C,iBAAiB,CAAC,OAAO,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,SAAS,CAAC,EAAb,CAAa,CAAC,CAAA;AAClD,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,gCAAgC,GAAG,UAAC,SAAqB;IAC9D,IAAA,GAAG,GAAmB,SAAS,IAA5B,EAAE,IAAI,GAAa,SAAS,KAAtB,EAAE,MAAM,GAAK,SAAS,OAAd,CAAc;IACrC,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,GAAG,GAAG,aAAa,CAAA;KACpB;IACD,IAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAA;IACxC,IAAI,WAAW,KAAK,CAAC;QAAE,OAAM;IAC7B,IAAM,OAAO,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,CAAA;IAC9C,IAAI,YAAY,EAAE;QAAE,OAAM;IAC1B,IAAI,OAAO,EAAE;QACX,mBAAmB,CAAC,KAAK,GAAG,IAAI,CAAA;QAChC,yBAAyB,CAAC,OAAO,EAAE,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;KAC7E;AACH,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAC,QAAkB;IACtD,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;QAClB,IAAM,OAAO,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QACvD,IAAI,OAAO,EAAE;YACX,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAA;YACrC,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;aACvB;iBAAM;gBACL,OAAO,CAAC,YAAY,GAAG,IAAI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;aAChD;SACF;KACF;AACH,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,yBAAyB,GAAG,UAAC,SAAqB;IACvD,IAAA,GAAG,GAA8B,SAAS,IAAvC,EAAE,IAAI,GAAwB,SAAS,KAAjC,EAAE,MAAM,GAAgB,SAAS,OAAzB,EAAE,SAAS,GAAK,SAAS,UAAd,CAAc;IAChD,UAAU,EAAE,CAAA;IACZ,eAAe,CAAC,SAAS,CAAC,CAAA;IAC1B,IAAI,IAAI,KAAK,OAAO,EAAE;QACpB,SAAS,CAAC,OAAO,CAAC,UAAC,CAAM,EAAE,GAAgB;YACzC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;KACH;SAAM;QACL,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;KAC1B;IACD,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,OAAO,EAAE;QAC3D,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAA;QAC/D,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;KAC7B;IACD,QAAQ,EAAE,CAAA;AACZ,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,kBAAkB,GAAG;IAChC,OAAO,aAAa,CAAC,MAAM,GAAG,CAAC,CAAA;AACjC,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,uBAAuB,GAAG,UAAC,QAAkB;;IACxD,MAAA,QAAQ,CAAC,aAAa,0CAAE,OAAO,CAAC,UAAC,YAAY;QAC3C,YAAY,CAAC,OAAO,CAAC,UAAC,SAAS;YAC7B,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IACF,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IACjC,qBAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IACtC,OAAO,QAAQ,CAAC,aAAa,CAAA;AAC/B,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,OAAiB;;IACxD,MAAA,OAAO,CAAC,YAAY,0CAAE,OAAO,CAAC,UAAC,QAAQ;QACrC,IAAM,SAAS,GAAG,yBAAyB,CACzC,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,SAAS,CACnB,CAAA;QACD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,uBAAuB,CAAC,QAAQ,CAAC,CAAA;YACjC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAA;SACvB;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,uBAAuB,GAAG,UAAC,QAAkB;IACxD,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAA;IACzB,uBAAuB,CAAC,QAAQ,CAAC,CAAA;IACjC,wBAAwB,CAAC,QAAQ,CAAC,CAAA;AACpC,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,UAAU,GAAG;IACxB,UAAU,CAAC,KAAK,EAAE,CAAA;AACpB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,QAAQ,GAAG;IACtB,UAAU,CAAC,KAAK,EAAE,CAAA;IAClB,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;QAC1B,IAAM,gBAAgB,GAAG,YAAY,CAAC,KAAK,CAAA;QAC3C,YAAY,CAAC,KAAK,GAAG,CAAC,CAAA;QACtB,uBAAuB,EAAE,CAAA;QACzB,qBAAqB,EAAE,CAAA;QACvB,YAAY,CAAC,KAAK,GAAG,gBAAgB,CAAA;KACtC;AACH,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,eAAe,GAAG;IAC7B,UAAU,CAAC,KAAK,GAAG,IAAI,CAAA;AACzB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,aAAa,GAAG;IAC3B,IAAM,gBAAgB,GAAG,YAAY,CAAC,KAAK,CAAA;IAC3C,UAAU,CAAC,KAAK,GAAG,KAAK,CAAA;IACxB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAA;IACtB,qBAAqB,CAAC,WAAW,CAAC,UAAC,QAAQ;QACzC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC7B,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;SAC9B;aAAM;YACL,QAAQ,EAAE,CAAA;SACX;IACH,CAAC,CAAC,CAAA;IACF,YAAY,CAAC,KAAK,GAAG,gBAAgB,CAAA;AACvC,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,YAAY,CAAC,KAAK,EAAE,CAAA;AACtB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,UAAU,GAAG;IACxB,YAAY,CAAC,KAAK,EAAE,CAAA;AACtB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,UAAU,GAAG,cAAM,OAAA,UAAU,CAAC,KAAK,GAAG,CAAC,EAApB,CAAoB,CAAA;AAEpD,MAAM,CAAC,IAAM,eAAe,GAAG,cAAM,OAAA,UAAU,CAAC,KAAK,EAAhB,CAAgB,CAAA;AAErD,MAAM,CAAC,IAAM,YAAY,GAAG,cAAM,OAAA,YAAY,CAAC,KAAK,GAAG,CAAC,EAAtB,CAAsB,CAAA;AAExD,MAAM,CAAC,IAAM,uBAAuB,GAAG;IACrC,gBAAgB,CAAC,WAAW,CAAC,UAAC,QAAQ;QACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC7B,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;SAC9B;aAAM;YACL,QAAQ,EAAE,CAAA;SACX;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,qBAAqB,GAAG;IACnC,cAAc,CAAC,WAAW,CAAC,UAAC,QAAQ;QAClC,QAAQ,EAAE,CAAA;IACZ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,OAAc,EAAE,OAAc;IAC1D,IAAI,OAAO,KAAK,OAAO;QAAE,OAAO,KAAK,CAAA;IACrC,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM;QAAE,OAAO,IAAI,CAAA;IAClD,IAAI,OAAO,CAAC,IAAI,CAAC,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,EAAxB,CAAwB,CAAC;QAAE,OAAO,IAAI,CAAA;IACzE,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,QAAkB;IAC/C,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,IAAI;YACF,UAAU,EAAE,CAAA;YACZ,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gBACnC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;oBAAE,OAAM;gBAClC,IAAI,CAAC,OAAO,EAAE,CAAA;YAChB,CAAC,CAAC,CAAA;SACH;gBAAS;YACR,QAAQ,EAAE,CAAA;SACX;KACF;AACH,CAAC,CAAA","sourcesContent":["import { isFn } from './checkers'\nimport { ArraySet } from './array'\nimport { IOperation, ReactionsMap, Reaction, PropertyKey } from './types'\nimport {\n  ReactionStack,\n  PendingScopeReactions,\n  BatchEndpoints,\n  DependencyCollected,\n  RawReactionsMap,\n  PendingReactions,\n  BatchCount,\n  UntrackCount,\n  BatchScope,\n  ObserverListeners,\n} from './environment'\n\nconst ITERATION_KEY = Symbol('iteration key')\n\nconst addRawReactionsMap = (\n  target: any,\n  key: PropertyKey,\n  reaction: Reaction\n) => {\n  const reactionsMap = RawReactionsMap.get(target)\n  if (reactionsMap) {\n    const reactions = reactionsMap.get(key)\n    if (reactions) {\n      reactions.add(reaction)\n    } else {\n      reactionsMap.set(key, new ArraySet([reaction]))\n    }\n    return reactionsMap\n  } else {\n    const reactionsMap: ReactionsMap = new Map([\n      [key, new ArraySet([reaction])],\n    ])\n    RawReactionsMap.set(target, reactionsMap)\n    return reactionsMap\n  }\n}\n\nconst addReactionsMapToReaction = (\n  reaction: Reaction,\n  reactionsMap: ReactionsMap\n) => {\n  const bindSet = reaction._reactionsSet\n  if (bindSet) {\n    bindSet.add(reactionsMap)\n  } else {\n    reaction._reactionsSet = new ArraySet([reactionsMap])\n  }\n  return bindSet\n}\n\nconst getReactionsFromTargetKey = (target: any, key: PropertyKey) => {\n  const reactionsMap = RawReactionsMap.get(target)\n  const reactions = []\n  if (reactionsMap) {\n    const map = reactionsMap.get(key)\n    if (map) {\n      map.forEach((reaction) => {\n        if (reactions.indexOf(reaction) === -1) {\n          reactions.push(reaction)\n        }\n      })\n    }\n  }\n  return reactions\n}\n\nconst runReactions = (target: any, key: PropertyKey) => {\n  const reactions = getReactionsFromTargetKey(target, key)\n  const prevUntrackCount = UntrackCount.value\n  UntrackCount.value = 0\n  for (let i = 0, len = reactions.length; i < len; i++) {\n    const reaction = reactions[i]\n    if (reaction._isComputed) {\n      reaction._scheduler(reaction)\n    } else if (isScopeBatching()) {\n      PendingScopeReactions.add(reaction)\n    } else if (isBatching()) {\n      PendingReactions.add(reaction)\n    } else {\n      // never reach\n      if (isFn(reaction._scheduler)) {\n        reaction._scheduler(reaction)\n      } else {\n        reaction()\n      }\n    }\n  }\n  UntrackCount.value = prevUntrackCount\n}\n\nconst notifyObservers = (operation: IOperation) => {\n  ObserverListeners.forEach((fn) => fn(operation))\n}\n\nexport const bindTargetKeyWithCurrentReaction = (operation: IOperation) => {\n  let { key, type, target } = operation\n  if (type === 'iterate') {\n    key = ITERATION_KEY\n  }\n  const reactionLen = ReactionStack.length\n  if (reactionLen === 0) return\n  const current = ReactionStack[reactionLen - 1]\n  if (isUntracking()) return\n  if (current) {\n    DependencyCollected.value = true\n    addReactionsMapToReaction(current, addRawReactionsMap(target, key, current))\n  }\n}\n\nexport const bindComputedReactions = (reaction: Reaction) => {\n  if (isFn(reaction)) {\n    const current = ReactionStack[ReactionStack.length - 1]\n    if (current) {\n      const computes = current._computesSet\n      if (computes) {\n        computes.add(reaction)\n      } else {\n        current._computesSet = new ArraySet([reaction])\n      }\n    }\n  }\n}\n\nexport const runReactionsFromTargetKey = (operation: IOperation) => {\n  let { key, type, target, oldTarget } = operation\n  batchStart()\n  notifyObservers(operation)\n  if (type === 'clear') {\n    oldTarget.forEach((_: any, key: PropertyKey) => {\n      runReactions(target, key)\n    })\n  } else {\n    runReactions(target, key)\n  }\n  if (type === 'add' || type === 'delete' || type === 'clear') {\n    const newKey = Array.isArray(target) ? 'length' : ITERATION_KEY\n    runReactions(target, newKey)\n  }\n  batchEnd()\n}\n\nexport const hasRunningReaction = () => {\n  return ReactionStack.length > 0\n}\n\nexport const releaseBindingReactions = (reaction: Reaction) => {\n  reaction._reactionsSet?.forEach((reactionsMap) => {\n    reactionsMap.forEach((reactions) => {\n      reactions.delete(reaction)\n    })\n  })\n  PendingReactions.delete(reaction)\n  PendingScopeReactions.delete(reaction)\n  delete reaction._reactionsSet\n}\n\nexport const suspendComputedReactions = (current: Reaction) => {\n  current._computesSet?.forEach((reaction) => {\n    const reactions = getReactionsFromTargetKey(\n      reaction._context,\n      reaction._property\n    )\n    if (reactions.length === 0) {\n      disposeBindingReactions(reaction)\n      reaction._dirty = true\n    }\n  })\n}\n\nexport const disposeBindingReactions = (reaction: Reaction) => {\n  reaction._disposed = true\n  releaseBindingReactions(reaction)\n  suspendComputedReactions(reaction)\n}\n\nexport const batchStart = () => {\n  BatchCount.value++\n}\n\nexport const batchEnd = () => {\n  BatchCount.value--\n  if (BatchCount.value === 0) {\n    const prevUntrackCount = UntrackCount.value\n    UntrackCount.value = 0\n    executePendingReactions()\n    executeBatchEndpoints()\n    UntrackCount.value = prevUntrackCount\n  }\n}\n\nexport const batchScopeStart = () => {\n  BatchScope.value = true\n}\n\nexport const batchScopeEnd = () => {\n  const prevUntrackCount = UntrackCount.value\n  BatchScope.value = false\n  UntrackCount.value = 0\n  PendingScopeReactions.batchDelete((reaction) => {\n    if (isFn(reaction._scheduler)) {\n      reaction._scheduler(reaction)\n    } else {\n      reaction()\n    }\n  })\n  UntrackCount.value = prevUntrackCount\n}\n\nexport const untrackStart = () => {\n  UntrackCount.value++\n}\n\nexport const untrackEnd = () => {\n  UntrackCount.value--\n}\n\nexport const isBatching = () => BatchCount.value > 0\n\nexport const isScopeBatching = () => BatchScope.value\n\nexport const isUntracking = () => UntrackCount.value > 0\n\nexport const executePendingReactions = () => {\n  PendingReactions.batchDelete((reaction) => {\n    if (isFn(reaction._scheduler)) {\n      reaction._scheduler(reaction)\n    } else {\n      reaction()\n    }\n  })\n}\n\nexport const executeBatchEndpoints = () => {\n  BatchEndpoints.batchDelete((callback) => {\n    callback()\n  })\n}\n\nexport const hasDepsChange = (newDeps: any[], oldDeps: any[]) => {\n  if (newDeps === oldDeps) return false\n  if (newDeps.length !== oldDeps.length) return true\n  if (newDeps.some((value, index) => value !== oldDeps[index])) return true\n  return false\n}\n\nexport const disposeEffects = (reaction: Reaction) => {\n  if (reaction._effects) {\n    try {\n      batchStart()\n      reaction._effects.queue.forEach((item) => {\n        if (!item || !item.dispose) return\n        item.dispose()\n      })\n    } finally {\n      batchEnd()\n    }\n  }\n}\n"]}