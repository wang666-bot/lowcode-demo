{"version":3,"file":"tracker.js","sourceRoot":"","sources":["../src/tracker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAA;AAC7C,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAA;AAEjC,OAAO,EACL,QAAQ,EACR,UAAU,EACV,uBAAuB,EACvB,uBAAuB,GACxB,MAAM,YAAY,CAAA;AAEnB;IAEE,iBACE,SAAwC,EACxC,IAAwB;QAAxB,qBAAA,EAAA,wBAAwB;QAF1B,iBAUC;QAED,UAAK,GAAa,UAAC,OAAiB;YAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;gBAAE,OAAO,KAAI,CAAC,OAAO,CAAA;YACvC,IAAI,KAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC;gBAAE,OAAM;YACpC,IAAI,aAAa,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5C,uBAAuB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAA;gBACnC,IAAI;oBACF,UAAU,EAAE,CAAA;oBACZ,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,CAAA;oBAC9B,KAAI,CAAC,OAAO,GAAG,OAAO,EAAE,CAAA;iBACzB;wBAAS;oBACR,aAAa,CAAC,GAAG,EAAE,CAAA;oBACnB,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;oBACtB,QAAQ,EAAE,CAAA;oBACV,KAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAA;iBACzB;aACF;YACD,OAAO,KAAI,CAAC,OAAO,CAAA;QACrB,CAAC,CAAA;QAED,YAAO,GAAG;YACR,uBAAuB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAA;QACrC,CAAC,CAAA;QA7BC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAC,QAAQ;YAC/B,IAAI,KAAI,CAAC,KAAK,CAAC,SAAS,KAAK,CAAC;gBAAE,KAAI,CAAC,OAAO,EAAE,CAAA;YAC9C,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;QACzC,CAAC,CAAA;QACD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAA;QACvB,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAA;IAC1B,CAAC;IAwBH,cAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["import { ReactionStack } from './environment'\nimport { isFn } from './checkers'\nimport { Reaction } from './types'\nimport {\n  batchEnd,\n  batchStart,\n  disposeBindingReactions,\n  releaseBindingReactions,\n} from './reaction'\n\nexport class Tracker {\n  private results: any\n  constructor(\n    scheduler?: (reaction: Reaction) => void,\n    name = 'TrackerReaction'\n  ) {\n    this.track._scheduler = (callback) => {\n      if (this.track._boundary === 0) this.dispose()\n      if (isFn(callback)) scheduler(callback)\n    }\n    this.track._name = name\n    this.track._boundary = 0\n  }\n\n  track: Reaction = (tracker: Reaction) => {\n    if (!isFn(tracker)) return this.results\n    if (this.track._boundary > 0) return\n    if (ReactionStack.indexOf(this.track) === -1) {\n      releaseBindingReactions(this.track)\n      try {\n        batchStart()\n        ReactionStack.push(this.track)\n        this.results = tracker()\n      } finally {\n        ReactionStack.pop()\n        this.track._boundary++\n        batchEnd()\n        this.track._boundary = 0\n      }\n    }\n    return this.results\n  }\n\n  dispose = () => {\n    disposeBindingReactions(this.track)\n  }\n}\n"]}