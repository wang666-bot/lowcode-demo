{"version":3,"file":"patches.js","sourceRoot":"","sources":["../src/patches.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0CAA6C;AAG7C,IAAM,OAAO,GAAkB,EAAE,CAAA;AAEjC,IAAM,SAAS,GAAkC,EAAE,CAAA;AAE5C,IAAM,aAAa,GAAG,UAAC,MAAW;IACvC,OAAO,OAAO,CAAC,MAAM,CACnB,UAAC,GAAG,EAAE,KAAK;QACT,OAAO,KAAK,CAAC,GAAG,CAAC,CAAA;IACnB,CAAC,eACI,MAAM,EACZ,CAAA;AACH,CAAC,CAAA;AAPY,QAAA,aAAa,iBAOzB;AAEM,IAAM,eAAe,GAAG;IAAC,cAAsB;SAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;QAAtB,yBAAsB;;IACpD,IAAI,CAAC,OAAO,CAAC,UAAC,KAAK;QACjB,IAAI,IAAA,aAAI,EAAC,KAAK,CAAC,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACpB;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AANY,QAAA,eAAe,mBAM3B;AAEM,IAAM,iBAAiB,GAAG,UAAC,OAAe,EAAE,KAAkB;IACnE,IAAI,OAAO,IAAI,IAAA,aAAI,EAAC,KAAK,CAAC,EAAE;QAC1B,SAAS,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;QAC7C,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KAC/B;AACH,CAAC,CAAA;AALY,QAAA,iBAAiB,qBAK7B;AAEM,IAAM,eAAe,GAAG,UAAC,QAAmB;IACjD,IAAI,IAAA,cAAK,EAAC,QAAQ,CAAC,EAAE;QACnB,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,IAAI,IAAA,cAAK,EAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE;gBAC7B,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK;oBAC/B,IAAA,uBAAe,EAAC,KAAK,CAAC,CAAA;gBACxB,CAAC,CAAC,CAAA;aACH;QACH,CAAC,CAAC,CAAA;KACH;AACH,CAAC,CAAA;AAVY,QAAA,eAAe,mBAU3B","sourcesContent":["import { isFn, isArr } from '@formily/shared'\nimport { SchemaPatch } from './types'\n\nconst patches: SchemaPatch[] = []\n\nconst polyfills: Record<string, SchemaPatch[]> = {}\n\nexport const reducePatches = (schema: any) => {\n  return patches.reduce(\n    (buf, patch) => {\n      return patch(buf)\n    },\n    { ...schema }\n  )\n}\n\nexport const registerPatches = (...args: SchemaPatch[]) => {\n  args.forEach((patch) => {\n    if (isFn(patch)) {\n      patches.push(patch)\n    }\n  })\n}\n\nexport const registerPolyfills = (version: string, patch: SchemaPatch) => {\n  if (version && isFn(patch)) {\n    polyfills[version] = polyfills[version] || []\n    polyfills[version].push(patch)\n  }\n}\n\nexport const enablePolyfills = (versions?: string[]) => {\n  if (isArr(versions)) {\n    versions.forEach((version) => {\n      if (isArr(polyfills[version])) {\n        polyfills[version].forEach((patch) => {\n          registerPatches(patch)\n        })\n      }\n    })\n  }\n}\n"]}