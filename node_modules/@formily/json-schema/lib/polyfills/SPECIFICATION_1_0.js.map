{"version":3,"file":"SPECIFICATION_1_0.js","sourceRoot":"","sources":["../../src/polyfills/SPECIFICATION_1_0.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPolyfills } from '../patches'\nimport { toArr, isArr, isStr, lowerCase, isValid } from '@formily/shared'\nimport { ISchema } from '../types'\n\nconst VOID_COMPONENTS = [\n  'card',\n  'block',\n  'grid-col',\n  'grid-row',\n  'grid',\n  'layout',\n  'step',\n  'tab',\n  'text-box',\n]\n\nconst TYPE_DEFAULT_COMPONENTS = {}\n\nconst transformCondition = (condition: string) => {\n  if (isStr(condition)) {\n    return condition.replace(/\\$value/, '$self.value')\n  }\n}\n\nconst transformXLinkage = (linkages: any[]) => {\n  if (isArr(linkages)) {\n    return linkages.reduce((buf, item) => {\n      if (!item) return buf\n      if (item.type === 'value:visible') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            state: {\n              visible: true,\n            },\n          },\n          otherwise: {\n            state: {\n              visible: false,\n            },\n          },\n        })\n      } else if (item.type === 'value:schema') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            schema: SpecificationV1Polyfill({ version: '1.0', ...item.schema }),\n          },\n          otherwise: {\n            schema: SpecificationV1Polyfill({\n              version: '1.0',\n              ...item.otherwise,\n            }),\n          },\n        })\n      } else if (item.type === 'value:state') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            state: item.state,\n          },\n          otherwise: {\n            state: item.otherwise,\n          },\n        })\n      }\n    }, [])\n  }\n  return []\n}\n\nconst SpecificationV1Polyfill = (schema: ISchema) => {\n  if (isValid(schema['editable'])) {\n    schema['x-editable'] = schema['x-editable'] || schema['editable']\n    delete schema['editable']\n  }\n  if (isValid(schema['visible'])) {\n    schema['x-visible'] = schema['x-visible'] || schema['visible']\n    delete schema['visible']\n  }\n  if (isValid(schema['display'])) {\n    schema['x-display'] =\n      schema['x-display'] || (schema['display'] ? 'visible' : 'hidden')\n    delete schema['display']\n  }\n  if (isValid(schema['x-props'])) {\n    schema['x-decorator-props'] =\n      schema['x-decorator-props'] || schema['x-props']\n    delete schema['display']\n  }\n  if (schema['x-linkages']) {\n    schema['x-reactions'] = toArr(schema['x-reactions']).concat(\n      transformXLinkage(schema['x-linkages'])\n    )\n    delete schema['x-linkages']\n  }\n  if (schema['x-component']) {\n    if (\n      VOID_COMPONENTS.some(\n        (component) => lowerCase(component) === lowerCase(schema['x-component'])\n      )\n    ) {\n      schema['type'] = 'void'\n    }\n  } else {\n    if (TYPE_DEFAULT_COMPONENTS[schema['type']]) {\n      schema['x-component'] = TYPE_DEFAULT_COMPONENTS[schema['type']]\n    }\n  }\n  if (\n    !schema['x-decorator'] &&\n    schema['type'] !== 'void' &&\n    schema['type'] !== 'object'\n  ) {\n    schema['x-decorator'] = schema['x-decorator'] || 'FormItem'\n  }\n  if (schema['x-rules']) {\n    schema['x-validator'] = []\n      .concat(schema['x-validator'] || [])\n      .concat(schema['x-rules'])\n  }\n  return schema\n}\n\nregisterPolyfills('1.0', SpecificationV1Polyfill)\n\nexport const registerVoidComponents = (components: string[]) => {\n  VOID_COMPONENTS.push(...components)\n}\n\nexport const registerTypeDefaultComponents = (maps: Record<string, string>) => {\n  Object.assign(TYPE_DEFAULT_COMPONENTS, maps)\n}\n"]}