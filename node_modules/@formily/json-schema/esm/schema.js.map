{"version":3,"file":"schema.js","sourceRoot":"","sources":["../src/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ISchema,\n  SchemaEnum,\n  SchemaProperties,\n  SchemaReaction,\n  SchemaTypes,\n  SchemaKey,\n  ISchemaTransformerOptions,\n} from './types'\nimport { IFieldFactoryProps } from '@formily/core'\nimport { map, each, isFn, instOf, FormPath, isStr } from '@formily/shared'\nimport { compile, silent, shallowCompile, registerCompiler } from './compiler'\nimport { transformFieldProps } from './transformer'\nimport {\n  reducePatches,\n  registerPatches,\n  registerPolyfills,\n  enablePolyfills,\n} from './patches'\nimport {\n  registerVoidComponents,\n  registerTypeDefaultComponents,\n} from './polyfills'\nimport { SchemaNestedMap } from './shared'\n\nexport class Schema<\n  Decorator = any,\n  Component = any,\n  DecoratorProps = any,\n  ComponentProps = any,\n  Pattern = any,\n  Display = any,\n  Validator = any,\n  Message = any,\n  ReactionField = any\n> implements ISchema\n{\n  parent?: Schema\n  root?: Schema\n  name?: SchemaKey\n  title?: Message\n  description?: Message\n  default?: any\n  readOnly?: boolean\n  writeOnly?: boolean\n  type?: SchemaTypes\n  enum?: SchemaEnum<Message>\n  const?: any\n  multipleOf?: number\n  maximum?: number\n  exclusiveMaximum?: number\n  minimum?: number\n  exclusiveMinimum?: number\n  maxLength?: number\n  minLength?: number\n  pattern?: string | RegExp\n  maxItems?: number\n  minItems?: number\n  uniqueItems?: boolean\n  maxProperties?: number\n  minProperties?: number\n  required?: string[] | boolean | string\n  format?: string\n  /** nested json schema spec **/\n  definitions?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  properties?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  items?:\n    | Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >\n    | Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >[]\n  additionalItems?: Schema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  >\n  patternProperties?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  additionalProperties?: Schema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  >;\n\n  //顺序描述\n  ['x-index']?: number;\n  //交互模式\n  ['x-pattern']?: Pattern;\n  //展示状态\n  ['x-display']?: Display;\n  //校验器\n  ['x-validator']?: Validator;\n  //装饰器\n  ['x-decorator']?: Decorator;\n  //装饰器属性\n  ['x-decorator-props']?: DecoratorProps;\n  //组件\n  ['x-component']?: Component;\n  //组件属性\n  ['x-component-props']?: ComponentProps;\n\n  ['x-reactions']?: SchemaReaction<ReactionField>[];\n\n  ['x-content']?: any;\n\n  ['x-data']?: any;\n\n  ['x-visible']?: boolean;\n\n  ['x-hidden']?: boolean;\n\n  ['x-disabled']?: boolean;\n\n  ['x-editable']?: boolean;\n\n  ['x-read-only']?: boolean;\n\n  ['x-read-pretty']?: boolean;\n\n  ['x-compile-omitted']?: string[];\n\n  [key: `x-${string | number}` | symbol]: any\n\n  _isJSONSchemaObject = true\n\n  version = '2.0'\n\n  constructor(\n    json: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >,\n    parent?: Schema\n  ) {\n    if (parent) {\n      this.parent = parent\n      this.root = parent.root\n    } else {\n      this.root = this\n    }\n    return this.fromJSON(json)\n  }\n\n  addProperty = (\n    key: SchemaKey,\n    schema: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    this.properties = this.properties || {}\n    this.properties[key] = new Schema(schema, this)\n    this.properties[key].name = key\n    return this.properties[key]\n  }\n\n  removeProperty = (key: SchemaKey) => {\n    const schema = this.properties[key]\n    delete this.properties[key]\n    return schema\n  }\n\n  setProperties = (\n    properties: SchemaProperties<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    for (const key in properties) {\n      this.addProperty(key, properties[key])\n    }\n    return this\n  }\n\n  addPatternProperty = (\n    key: SchemaKey,\n    schema: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!schema) return\n    this.patternProperties = this.patternProperties || {}\n    this.patternProperties[key] = new Schema(schema, this)\n    this.patternProperties[key].name = key\n    return this.patternProperties[key]\n  }\n\n  removePatternProperty = (key: SchemaKey) => {\n    const schema = this.patternProperties[key]\n    delete this.patternProperties[key]\n    return schema\n  }\n\n  setPatternProperties = (\n    properties: SchemaProperties<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!properties) return this\n    for (const key in properties) {\n      this.addPatternProperty(key, properties[key])\n    }\n    return this\n  }\n\n  setAdditionalProperties = (\n    properties: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!properties) return\n    this.additionalProperties = new Schema(properties)\n    return this.additionalProperties\n  }\n\n  setItems = (\n    schema:\n      | ISchema<\n          Decorator,\n          Component,\n          DecoratorProps,\n          ComponentProps,\n          Pattern,\n          Display,\n          Validator,\n          Message\n        >\n      | ISchema<\n          Decorator,\n          Component,\n          DecoratorProps,\n          ComponentProps,\n          Pattern,\n          Display,\n          Validator,\n          Message\n        >[]\n  ) => {\n    if (!schema) return\n    if (Array.isArray(schema)) {\n      this.items = schema.map((item) => new Schema(item, this))\n    } else {\n      this.items = new Schema(schema, this)\n    }\n    return this.items\n  }\n\n  setAdditionalItems = (\n    items: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!items) return\n    this.additionalItems = new Schema(items, this)\n    return this.additionalItems\n  }\n\n  findDefinitions = (ref: string) => {\n    if (!ref || !this.root || !isStr(ref)) return\n    if (ref.indexOf('#/') !== 0) return\n    return FormPath.getIn(this.root, ref.substring(2).split('/'))\n  }\n\n  mapProperties = <T>(\n    callback?: (\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => T\n  ): T[] => {\n    return Schema.getOrderProperties(this).map(({ schema, key }, index) => {\n      return callback(schema, key, index)\n    })\n  }\n\n  mapPatternProperties = <T>(\n    callback?: (\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => T\n  ): T[] => {\n    return Schema.getOrderProperties(this, 'patternProperties').map(\n      ({ schema, key }, index) => {\n        return callback(schema, key, index)\n      }\n    )\n  }\n\n  reduceProperties = <P, R>(\n    callback?: (\n      buffer: P,\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => R,\n    predicate?: P\n  ): R => {\n    let results: any = predicate\n    Schema.getOrderProperties(this, 'properties').forEach(\n      ({ schema, key }, index) => {\n        results = callback(results, schema, key, index)\n      }\n    )\n    return results\n  }\n\n  reducePatternProperties = <P, R>(\n    callback?: (\n      buffer: P,\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => R,\n    predicate?: P\n  ): R => {\n    let results: any = predicate\n    Schema.getOrderProperties(this, 'patternProperties').forEach(\n      ({ schema, key }, index) => {\n        results = callback(results, schema, key, index)\n      }\n    )\n    return results\n  }\n\n  compile = (scope?: any) => {\n    const schema = new Schema({}, this.parent)\n    each(this, (value, key) => {\n      if (isFn(value) && !key.includes('x-')) return\n      if (key === 'parent' || key === 'root') return\n      if (!SchemaNestedMap[key]) {\n        schema[key] = value ? compile(value, scope) : value\n      } else {\n        schema[key] = value ? shallowCompile(value, scope) : value\n      }\n    })\n    return schema\n  }\n\n  fromJSON = (\n    json: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!json) return this\n    if (Schema.isSchemaInstance(json)) return json\n    each(reducePatches(json), (value, key) => {\n      if (isFn(value) && !key.includes('x-')) return\n      if (key === 'properties') {\n        this.setProperties(value)\n      } else if (key === 'patternProperties') {\n        this.setPatternProperties(value)\n      } else if (key === 'additionalProperties') {\n        this.setAdditionalProperties(value)\n      } else if (key === 'items') {\n        this.setItems(value)\n      } else if (key === 'additionalItems') {\n        this.setAdditionalItems(value)\n      } else if (key === '$ref') {\n        this.fromJSON(this.findDefinitions(value))\n      } else {\n        this[key] = value\n      }\n    })\n    return this\n  }\n\n  toJSON = (\n    recursion = true\n  ): ISchema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  > => {\n    const results = {}\n    each(this, (value: any, key) => {\n      if (\n        (isFn(value) && !key.includes('x-')) ||\n        key === 'parent' ||\n        key === 'root'\n      )\n        return\n      if (key === 'properties' || key === 'patternProperties') {\n        if (!recursion) return\n        results[key] = map(value, (item) => item?.toJSON?.())\n      } else if (key === 'additionalProperties' || key === 'additionalItems') {\n        if (!recursion) return\n        results[key] = value?.toJSON?.()\n      } else if (key === 'items') {\n        if (!recursion) return\n        if (Array.isArray(value)) {\n          results[key] = value.map((item) => item?.toJSON?.())\n        } else {\n          results[key] = value?.toJSON?.()\n        }\n      } else {\n        results[key] = value\n      }\n    })\n    return results\n  }\n\n  toFieldProps = (\n    options?: ISchemaTransformerOptions\n  ): IFieldFactoryProps<any, any> => {\n    return transformFieldProps(this, options)\n  }\n\n  static getOrderProperties = (\n    schema: ISchema = {},\n    propertiesName: keyof ISchema = 'properties'\n  ) => {\n    const orderProperties = []\n    const unorderProperties = []\n    for (const key in schema[propertiesName]) {\n      const item = schema[propertiesName][key]\n      const index = item['x-index']\n      if (!isNaN(index)) {\n        orderProperties[index] = { schema: item, key }\n      } else {\n        unorderProperties.push({ schema: item, key })\n      }\n    }\n    return orderProperties.concat(unorderProperties).filter((item) => !!item)\n  }\n\n  static compile = (expression: any, scope?: any) => {\n    return compile(expression, scope)\n  }\n\n  static shallowCompile = (expression: any, scope?: any) => {\n    return shallowCompile(expression, scope)\n  }\n\n  static isSchemaInstance = (value: any): value is Schema => {\n    return instOf(value, Schema)\n  }\n\n  static registerCompiler = registerCompiler\n\n  static registerPatches = registerPatches\n\n  static registerVoidComponents = registerVoidComponents\n\n  static registerTypeDefaultComponents = registerTypeDefaultComponents\n\n  static registerPolyfills = registerPolyfills\n\n  static enablePolyfills = enablePolyfills\n\n  static silent = silent\n}\n"]}