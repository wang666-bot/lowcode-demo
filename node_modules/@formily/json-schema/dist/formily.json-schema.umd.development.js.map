{"version":3,"file":"formily.json-schema.umd.development.js","sources":["../src/shared.ts","../src/compiler.ts","../src/transformer.ts","../src/patches.ts","../src/polyfills/SPECIFICATION_1_0.ts","../src/schema.ts"],"sourcesContent":["import { isFn, each, isPlainObj, isArr, toArr, FormPath } from '@formily/shared'\nimport { isObservable, untracked } from '@formily/reactive'\nimport { Schema } from './schema'\nimport { ISchema } from './types'\n\nconst REVA_ACTIONS_KEY = Symbol.for('__REVA_ACTIONS')\n\nexport const SchemaNestedMap = {\n  parent: true,\n  root: true,\n  properties: true,\n  patternProperties: true,\n  additionalProperties: true,\n  items: true,\n  additionalItems: true,\n  'x-linkages': true,\n  'x-reactions': true,\n}\n\nexport const SchemaStateMap = {\n  title: 'title',\n  description: 'description',\n  default: 'initialValue',\n  enum: 'dataSource',\n  readOnly: 'readOnly',\n  writeOnly: 'editable',\n  'x-content': 'content',\n  'x-data': 'data',\n  'x-value': 'value',\n  'x-editable': 'editable',\n  'x-disabled': 'disabled',\n  'x-read-pretty': 'readPretty',\n  'x-read-only': 'readOnly',\n  'x-visible': 'visible',\n  'x-hidden': 'hidden',\n  'x-display': 'display',\n  'x-pattern': 'pattern',\n  'x-validator': 'validator',\n  'x-decorator': 'decoratorType',\n  'x-component': 'componentType',\n  'x-decorator-props': 'decoratorProps',\n  'x-component-props': 'componentProps',\n}\n\nexport const SchemaValidatorMap = {\n  required: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  maxLength: true,\n  minLength: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  pattern: true,\n  const: true,\n  multipleOf: true,\n  maxProperties: true,\n  minProperties: true,\n  uniqueItems: true,\n}\n\nexport const SchemaNormalKeys = Object.keys(SchemaStateMap)\n\nexport const SchemaValidatorKeys = Object.keys(SchemaValidatorMap)\n\nexport const hasOwnProperty = Object.prototype.hasOwnProperty\n\nexport const traverse = (\n  target: any,\n  visitor: (value: any, path: Array<string | number>) => void\n) => {\n  const seenObjects = []\n  const root = target\n  const traverse = (target: any, path = []) => {\n    if (isPlainObj(target)) {\n      const seenIndex = seenObjects.indexOf(target)\n      if (seenIndex > -1) {\n        return\n      }\n      const addIndex = seenObjects.length\n      seenObjects.push(target)\n      if (isNoNeedCompileObject(target) && root !== target) {\n        visitor(target, path)\n        return\n      }\n      each(target, (value, key) => {\n        traverse(value, path.concat(key))\n      })\n      seenObjects.splice(addIndex, 1)\n    } else {\n      visitor(target, path)\n    }\n  }\n  traverse(target)\n}\n\nexport const traverseSchema = (\n  schema: ISchema,\n  visitor: (value: any, path: any[], omitCompile?: boolean) => void\n) => {\n  if (schema['x-validator'] !== undefined) {\n    visitor(\n      schema['x-validator'],\n      ['x-validator'],\n      schema['x-compile-omitted']?.includes('x-validator')\n    )\n  }\n  const seenObjects = []\n  const root = schema\n  const traverse = (target: any, path = []) => {\n    if (\n      path[0] === 'x-compile-omitted' ||\n      path[0] === 'x-validator' ||\n      path[0] === 'version' ||\n      path[0] === '_isJSONSchemaObject'\n    )\n      return\n    if (String(path[0]).indexOf('x-') == -1 && isFn(target)) return\n    if (SchemaNestedMap[path[0]]) return\n    if (schema['x-compile-omitted']?.indexOf(path[0]) > -1) {\n      visitor(target, path, true)\n      return\n    }\n    if (isPlainObj(target)) {\n      if (path[0] === 'default' || path[0] === 'x-value') {\n        visitor(target, path)\n        return\n      }\n      const seenIndex = seenObjects.indexOf(target)\n      if (seenIndex > -1) {\n        return\n      }\n      const addIndex = seenObjects.length\n      seenObjects.push(target)\n      if (isNoNeedCompileObject(target) && root !== target) {\n        visitor(target, path)\n        return\n      }\n      each(target, (value, key) => {\n        traverse(value, path.concat(key))\n      })\n      seenObjects.splice(addIndex, 1)\n    } else {\n      visitor(target, path)\n    }\n  }\n  traverse(schema)\n}\n\nexport const isNoNeedCompileObject = (source: any) => {\n  if ('$$typeof' in source && '_owner' in source) {\n    return true\n  }\n  if (source['_isAMomentObject']) {\n    return true\n  }\n  if (Schema.isSchemaInstance(source)) {\n    return true\n  }\n  if (source[REVA_ACTIONS_KEY]) {\n    return true\n  }\n  if (isFn(source['toJS'])) {\n    return true\n  }\n  if (isFn(source['toJSON'])) {\n    return true\n  }\n  if (isObservable(source)) {\n    return true\n  }\n  return false\n}\n\nexport const createDataSource = (source: any[]) => {\n  return toArr(source).map((item) => {\n    if (typeof item === 'object') {\n      return item\n    } else {\n      return {\n        label: item,\n        value: item,\n      }\n    }\n  })\n}\n\nexport const patchStateFormSchema = (\n  targetState: any,\n  pattern: any[],\n  compiled: any\n) => {\n  untracked(() => {\n    const path = FormPath.parse(pattern)\n    const segments = path.segments\n    const key = segments[0]\n    const isEnum = key === 'enum' && isArr(compiled)\n    const schemaMapKey = SchemaStateMap[key]\n    if (schemaMapKey) {\n      FormPath.setIn(\n        targetState,\n        [schemaMapKey].concat(segments.slice(1)),\n        isEnum ? createDataSource(compiled) : compiled\n      )\n    } else {\n      const isValidatorKey = SchemaValidatorMap[key]\n      if (isValidatorKey) {\n        targetState['setValidatorRule']?.(key, compiled)\n      }\n    }\n  })\n}\n","import {\n  isArr,\n  isFn,\n  isPlainObj,\n  isStr,\n  reduce,\n  FormPath,\n} from '@formily/shared'\nimport { IGeneralFieldState } from '@formily/core'\nimport { untracked, hasCollected } from '@formily/reactive'\nimport {\n  traverse,\n  traverseSchema,\n  isNoNeedCompileObject,\n  hasOwnProperty,\n  patchStateFormSchema,\n} from './shared'\nimport { ISchema } from './types'\n\nconst ExpRE = /^\\s*\\{\\{([\\s\\S]*)\\}\\}\\s*$/\nconst Registry = {\n  silent: false,\n  compile(expression: string, scope = {}) {\n    if (Registry.silent) {\n      try {\n        return new Function('$root', `with($root) { return (${expression}); }`)(\n          scope\n        )\n      } catch {}\n    } else {\n      return new Function('$root', `with($root) { return (${expression}); }`)(\n        scope\n      )\n    }\n  },\n}\n\nexport const silent = (value = true) => {\n  Registry.silent = !!value\n}\n\nexport const registerCompiler = (\n  compiler: (expression: string, scope: any) => any\n) => {\n  if (isFn(compiler)) {\n    Registry.compile = compiler\n  }\n}\n\nexport const shallowCompile = <Source = any, Scope = any>(\n  source: Source,\n  scope?: Scope\n) => {\n  if (isStr(source)) {\n    const matched = source.match(ExpRE)\n    if (!matched) return source\n    return Registry.compile(matched[1], scope)\n  }\n  return source\n}\n\nexport const compile = <Source = any, Scope = any>(\n  source: Source,\n  scope?: Scope\n): any => {\n  const seenObjects = []\n  const compile = (source: any) => {\n    if (isStr(source)) {\n      return shallowCompile(source, scope)\n    } else if (isArr(source)) {\n      return source.map((value: any) => compile(value))\n    } else if (isPlainObj(source)) {\n      if (isNoNeedCompileObject(source)) return source\n      const seenIndex = seenObjects.indexOf(source)\n      if (seenIndex > -1) {\n        return source\n      }\n      const addIndex = seenObjects.length\n      seenObjects.push(source)\n      const results = reduce(\n        source,\n        (buf, value, key) => {\n          buf[key] = compile(value)\n          return buf\n        },\n        {}\n      )\n      seenObjects.splice(addIndex, 1)\n      return results\n    }\n    return source\n  }\n  return compile(source)\n}\n\nexport const patchCompile = (\n  targetState: IGeneralFieldState,\n  sourceState: any,\n  scope: any\n) => {\n  traverse(sourceState, (value, pattern) => {\n    const compiled = compile(value, scope)\n    if (compiled === undefined) return\n    const path = FormPath.parse(pattern)\n    const key = path.segments[0]\n    if (hasOwnProperty.call(targetState, key)) {\n      untracked(() => FormPath.setIn(targetState, path, compiled))\n    }\n  })\n}\n\nexport const patchSchemaCompile = (\n  targetState: IGeneralFieldState,\n  sourceSchema: ISchema,\n  scope: any,\n  demand = false\n) => {\n  traverseSchema(sourceSchema, (value, path, omitCompile) => {\n    let compiled = value\n    let collected = hasCollected(() => {\n      if (!omitCompile) {\n        compiled = compile(value, scope)\n      }\n    })\n    if (compiled === undefined) return\n    if (demand) {\n      if (collected || !targetState.initialized) {\n        patchStateFormSchema(targetState, path, compiled)\n      }\n    } else {\n      patchStateFormSchema(targetState, path, compiled)\n    }\n  })\n}\n","import { untracked, autorun, observable } from '@formily/reactive'\nimport {\n  isArr,\n  isStr,\n  toArr,\n  each,\n  isFn,\n  isPlainObj,\n  reduce,\n  lazyMerge,\n} from '@formily/shared'\nimport { Schema } from './schema'\nimport {\n  ISchema,\n  ISchemaTransformerOptions,\n  IFieldStateSetterOptions,\n  SchemaReaction,\n} from './types'\nimport {\n  onFieldInit,\n  onFieldMount,\n  onFieldUnmount,\n  onFieldValueChange,\n  onFieldInputValueChange,\n  onFieldInitialValueChange,\n  onFieldValidateStart,\n  onFieldValidateEnd,\n  onFieldValidateFailed,\n  onFieldValidateSuccess,\n  IFieldFactoryProps,\n  Field,\n} from '@formily/core'\nimport { patchCompile, patchSchemaCompile, shallowCompile } from './compiler'\n\nconst FieldEffects = {\n  onFieldInit,\n  onFieldMount,\n  onFieldUnmount,\n  onFieldValueChange,\n  onFieldInputValueChange,\n  onFieldInitialValueChange,\n  onFieldValidateStart,\n  onFieldValidateEnd,\n  onFieldValidateFailed,\n  onFieldValidateSuccess,\n}\n\nconst DefaultFieldEffects = ['onFieldInit', 'onFieldValueChange']\n\nconst getDependencyValue = (\n  field: Field,\n  pattern: string,\n  property?: string\n) => {\n  const [target, path] = String(pattern).split(/\\s*#\\s*/)\n  return field.query(target).getIn(path || property || 'value')\n}\n\nconst getDependencies = (\n  field: Field,\n  dependencies:\n    | Array<string | { name?: string; source?: string; property?: string }>\n    | object\n) => {\n  if (isArr(dependencies)) {\n    const results = []\n    dependencies.forEach((pattern) => {\n      if (isStr(pattern)) {\n        results.push(getDependencyValue(field, pattern))\n      } else if (isPlainObj(pattern)) {\n        if (pattern.name && pattern.source) {\n          results[pattern.name] = getDependencyValue(\n            field,\n            pattern.source,\n            pattern.property\n          )\n        }\n      }\n    })\n    return results\n  } else if (isPlainObj(dependencies)) {\n    return reduce(\n      dependencies,\n      (buf, pattern, key) => {\n        buf[key] = getDependencyValue(field, pattern)\n        return buf\n      },\n      {}\n    )\n  }\n  return []\n}\n\nconst setSchemaFieldState = (\n  options: IFieldStateSetterOptions,\n  demand = false\n) => {\n  const { request, target, runner, field, scope } = options || {}\n  if (!request) return\n  if (target) {\n    if (request.state) {\n      field.form.setFieldState(target, (state) =>\n        patchCompile(\n          state,\n          request.state,\n          lazyMerge(scope, {\n            $target: state,\n          })\n        )\n      )\n    }\n    if (request.schema) {\n      field.form.setFieldState(target, (state) =>\n        patchSchemaCompile(\n          state,\n          request.schema,\n          lazyMerge(scope, {\n            $target: state,\n          }),\n          demand\n        )\n      )\n    }\n    if (isStr(runner) && runner) {\n      field.form.setFieldState(target, (state) => {\n        shallowCompile(\n          `{{function(){${runner}}}}`,\n          lazyMerge(scope, {\n            $target: state,\n          })\n        )()\n      })\n    }\n  } else {\n    if (request.state) {\n      field.setState((state) => patchCompile(state, request.state, scope))\n    }\n    if (request.schema) {\n      field.setState((state) =>\n        patchSchemaCompile(state, request.schema, scope, demand)\n      )\n    }\n    if (isStr(runner) && runner) {\n      shallowCompile(`{{function(){${runner}}}}`, scope)()\n    }\n  }\n}\n\nconst getBaseScope = (\n  field: Field,\n  options: ISchemaTransformerOptions = {}\n) => {\n  const $observable = (target: any, deps?: any[]) =>\n    autorun.memo(() => observable(target), deps)\n  const $props = (props: any) => field.setComponentProps(props)\n  const $effect = autorun.effect\n  const $memo = autorun.memo\n  const $self = field\n  const $form = field.form\n  const $values = field.form.values\n  return lazyMerge(\n    {\n      get $lookup() {\n        return options?.scope?.$record ?? $values\n      },\n      get $records() {\n        return field.records\n      },\n      get $record() {\n        const record = field.record\n        if (typeof record === 'object') {\n          return lazyMerge(record, {\n            get $lookup() {\n              return options?.scope?.$record ?? $values\n            },\n            get $index() {\n              return field.index\n            },\n          })\n        }\n        return record\n      },\n      get $index() {\n        return field.index\n      },\n    },\n    options.scope,\n    {\n      $form,\n      $self,\n      $observable,\n      $effect,\n      $memo,\n      $props,\n      $values,\n    }\n  )\n}\n\nconst getBaseReactions =\n  (schema: ISchema, options: ISchemaTransformerOptions) => (field: Field) => {\n    setSchemaFieldState(\n      {\n        field,\n        request: { schema },\n        scope: getBaseScope(field, options),\n      },\n      true\n    )\n  }\n\nconst getUserReactions = (\n  schema: ISchema,\n  options: ISchemaTransformerOptions\n) => {\n  const reactions: SchemaReaction[] = toArr(schema['x-reactions'])\n  return reactions.map((unCompiled) => {\n    return (field: Field) => {\n      const baseScope = getBaseScope(field, options)\n      const reaction = shallowCompile(unCompiled, baseScope)\n      if (!reaction) return\n      if (isFn(reaction)) {\n        return reaction(field, baseScope)\n      }\n      const { when, fulfill, otherwise, target, effects } = reaction\n      const run = () => {\n        const $deps = getDependencies(field, reaction.dependencies)\n        const $dependencies = $deps\n        const scope = lazyMerge(baseScope, {\n          $target: null,\n          $deps,\n          $dependencies,\n        })\n        const compiledWhen = shallowCompile(when, scope)\n        const condition = when ? compiledWhen : true\n        const request = condition ? fulfill : otherwise\n        const runner = request?.run\n        setSchemaFieldState({\n          field,\n          target,\n          request,\n          runner,\n          scope,\n        })\n      }\n\n      if (target) {\n        reaction.effects = effects?.length ? effects : DefaultFieldEffects\n      }\n      if (reaction.effects) {\n        autorun.memo(() => {\n          untracked(() => {\n            each(reaction.effects, (type) => {\n              if (FieldEffects[type]) {\n                FieldEffects[type](field.address, run)\n              }\n            })\n          })\n        }, [])\n      } else {\n        run()\n      }\n    }\n  })\n}\n\nexport const transformFieldProps = (\n  schema: Schema,\n  options: ISchemaTransformerOptions\n): IFieldFactoryProps<any, any> => {\n  return {\n    name: schema.name,\n    reactions: [getBaseReactions(schema, options)].concat(\n      getUserReactions(schema, options)\n    ),\n  }\n}\n","import { isFn, isArr } from '@formily/shared'\nimport { SchemaPatch } from './types'\n\nconst patches: SchemaPatch[] = []\n\nconst polyfills: Record<string, SchemaPatch[]> = {}\n\nexport const reducePatches = (schema: any) => {\n  return patches.reduce(\n    (buf, patch) => {\n      return patch(buf)\n    },\n    { ...schema }\n  )\n}\n\nexport const registerPatches = (...args: SchemaPatch[]) => {\n  args.forEach((patch) => {\n    if (isFn(patch)) {\n      patches.push(patch)\n    }\n  })\n}\n\nexport const registerPolyfills = (version: string, patch: SchemaPatch) => {\n  if (version && isFn(patch)) {\n    polyfills[version] = polyfills[version] || []\n    polyfills[version].push(patch)\n  }\n}\n\nexport const enablePolyfills = (versions?: string[]) => {\n  if (isArr(versions)) {\n    versions.forEach((version) => {\n      if (isArr(polyfills[version])) {\n        polyfills[version].forEach((patch) => {\n          registerPatches(patch)\n        })\n      }\n    })\n  }\n}\n","import { registerPolyfills } from '../patches'\nimport { toArr, isArr, isStr, lowerCase, isValid } from '@formily/shared'\nimport { ISchema } from '../types'\n\nconst VOID_COMPONENTS = [\n  'card',\n  'block',\n  'grid-col',\n  'grid-row',\n  'grid',\n  'layout',\n  'step',\n  'tab',\n  'text-box',\n]\n\nconst TYPE_DEFAULT_COMPONENTS = {}\n\nconst transformCondition = (condition: string) => {\n  if (isStr(condition)) {\n    return condition.replace(/\\$value/, '$self.value')\n  }\n}\n\nconst transformXLinkage = (linkages: any[]) => {\n  if (isArr(linkages)) {\n    return linkages.reduce((buf, item) => {\n      if (!item) return buf\n      if (item.type === 'value:visible') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            state: {\n              visible: true,\n            },\n          },\n          otherwise: {\n            state: {\n              visible: false,\n            },\n          },\n        })\n      } else if (item.type === 'value:schema') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            schema: SpecificationV1Polyfill({ version: '1.0', ...item.schema }),\n          },\n          otherwise: {\n            schema: SpecificationV1Polyfill({\n              version: '1.0',\n              ...item.otherwise,\n            }),\n          },\n        })\n      } else if (item.type === 'value:state') {\n        return buf.concat({\n          target: item.target,\n          when: transformCondition(item.condition),\n          fulfill: {\n            state: item.state,\n          },\n          otherwise: {\n            state: item.otherwise,\n          },\n        })\n      }\n    }, [])\n  }\n  return []\n}\n\nconst SpecificationV1Polyfill = (schema: ISchema) => {\n  if (isValid(schema['editable'])) {\n    schema['x-editable'] = schema['x-editable'] || schema['editable']\n    delete schema['editable']\n  }\n  if (isValid(schema['visible'])) {\n    schema['x-visible'] = schema['x-visible'] || schema['visible']\n    delete schema['visible']\n  }\n  if (isValid(schema['display'])) {\n    schema['x-display'] =\n      schema['x-display'] || (schema['display'] ? 'visible' : 'hidden')\n    delete schema['display']\n  }\n  if (isValid(schema['x-props'])) {\n    schema['x-decorator-props'] =\n      schema['x-decorator-props'] || schema['x-props']\n    delete schema['display']\n  }\n  if (schema['x-linkages']) {\n    schema['x-reactions'] = toArr(schema['x-reactions']).concat(\n      transformXLinkage(schema['x-linkages'])\n    )\n    delete schema['x-linkages']\n  }\n  if (schema['x-component']) {\n    if (\n      VOID_COMPONENTS.some(\n        (component) => lowerCase(component) === lowerCase(schema['x-component'])\n      )\n    ) {\n      schema['type'] = 'void'\n    }\n  } else {\n    if (TYPE_DEFAULT_COMPONENTS[schema['type']]) {\n      schema['x-component'] = TYPE_DEFAULT_COMPONENTS[schema['type']]\n    }\n  }\n  if (\n    !schema['x-decorator'] &&\n    schema['type'] !== 'void' &&\n    schema['type'] !== 'object'\n  ) {\n    schema['x-decorator'] = schema['x-decorator'] || 'FormItem'\n  }\n  if (schema['x-rules']) {\n    schema['x-validator'] = []\n      .concat(schema['x-validator'] || [])\n      .concat(schema['x-rules'])\n  }\n  return schema\n}\n\nregisterPolyfills('1.0', SpecificationV1Polyfill)\n\nexport const registerVoidComponents = (components: string[]) => {\n  VOID_COMPONENTS.push(...components)\n}\n\nexport const registerTypeDefaultComponents = (maps: Record<string, string>) => {\n  Object.assign(TYPE_DEFAULT_COMPONENTS, maps)\n}\n","import {\n  ISchema,\n  SchemaEnum,\n  SchemaProperties,\n  SchemaReaction,\n  SchemaTypes,\n  SchemaKey,\n  ISchemaTransformerOptions,\n} from './types'\nimport { IFieldFactoryProps } from '@formily/core'\nimport { map, each, isFn, instOf, FormPath, isStr } from '@formily/shared'\nimport { compile, silent, shallowCompile, registerCompiler } from './compiler'\nimport { transformFieldProps } from './transformer'\nimport {\n  reducePatches,\n  registerPatches,\n  registerPolyfills,\n  enablePolyfills,\n} from './patches'\nimport {\n  registerVoidComponents,\n  registerTypeDefaultComponents,\n} from './polyfills'\nimport { SchemaNestedMap } from './shared'\n\nexport class Schema<\n  Decorator = any,\n  Component = any,\n  DecoratorProps = any,\n  ComponentProps = any,\n  Pattern = any,\n  Display = any,\n  Validator = any,\n  Message = any,\n  ReactionField = any\n> implements ISchema\n{\n  parent?: Schema\n  root?: Schema\n  name?: SchemaKey\n  title?: Message\n  description?: Message\n  default?: any\n  readOnly?: boolean\n  writeOnly?: boolean\n  type?: SchemaTypes\n  enum?: SchemaEnum<Message>\n  const?: any\n  multipleOf?: number\n  maximum?: number\n  exclusiveMaximum?: number\n  minimum?: number\n  exclusiveMinimum?: number\n  maxLength?: number\n  minLength?: number\n  pattern?: string | RegExp\n  maxItems?: number\n  minItems?: number\n  uniqueItems?: boolean\n  maxProperties?: number\n  minProperties?: number\n  required?: string[] | boolean | string\n  format?: string\n  /** nested json schema spec **/\n  definitions?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  properties?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  items?:\n    | Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >\n    | Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >[]\n  additionalItems?: Schema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  >\n  patternProperties?: Record<\n    string,\n    Schema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  >\n  additionalProperties?: Schema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  >;\n\n  //顺序描述\n  ['x-index']?: number;\n  //交互模式\n  ['x-pattern']?: Pattern;\n  //展示状态\n  ['x-display']?: Display;\n  //校验器\n  ['x-validator']?: Validator;\n  //装饰器\n  ['x-decorator']?: Decorator;\n  //装饰器属性\n  ['x-decorator-props']?: DecoratorProps;\n  //组件\n  ['x-component']?: Component;\n  //组件属性\n  ['x-component-props']?: ComponentProps;\n\n  ['x-reactions']?: SchemaReaction<ReactionField>[];\n\n  ['x-content']?: any;\n\n  ['x-data']?: any;\n\n  ['x-visible']?: boolean;\n\n  ['x-hidden']?: boolean;\n\n  ['x-disabled']?: boolean;\n\n  ['x-editable']?: boolean;\n\n  ['x-read-only']?: boolean;\n\n  ['x-read-pretty']?: boolean;\n\n  ['x-compile-omitted']?: string[];\n\n  [key: `x-${string | number}` | symbol]: any\n\n  _isJSONSchemaObject = true\n\n  version = '2.0'\n\n  constructor(\n    json: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >,\n    parent?: Schema\n  ) {\n    if (parent) {\n      this.parent = parent\n      this.root = parent.root\n    } else {\n      this.root = this\n    }\n    return this.fromJSON(json)\n  }\n\n  addProperty = (\n    key: SchemaKey,\n    schema: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    this.properties = this.properties || {}\n    this.properties[key] = new Schema(schema, this)\n    this.properties[key].name = key\n    return this.properties[key]\n  }\n\n  removeProperty = (key: SchemaKey) => {\n    const schema = this.properties[key]\n    delete this.properties[key]\n    return schema\n  }\n\n  setProperties = (\n    properties: SchemaProperties<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    for (const key in properties) {\n      this.addProperty(key, properties[key])\n    }\n    return this\n  }\n\n  addPatternProperty = (\n    key: SchemaKey,\n    schema: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!schema) return\n    this.patternProperties = this.patternProperties || {}\n    this.patternProperties[key] = new Schema(schema, this)\n    this.patternProperties[key].name = key\n    return this.patternProperties[key]\n  }\n\n  removePatternProperty = (key: SchemaKey) => {\n    const schema = this.patternProperties[key]\n    delete this.patternProperties[key]\n    return schema\n  }\n\n  setPatternProperties = (\n    properties: SchemaProperties<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!properties) return this\n    for (const key in properties) {\n      this.addPatternProperty(key, properties[key])\n    }\n    return this\n  }\n\n  setAdditionalProperties = (\n    properties: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!properties) return\n    this.additionalProperties = new Schema(properties)\n    return this.additionalProperties\n  }\n\n  setItems = (\n    schema:\n      | ISchema<\n          Decorator,\n          Component,\n          DecoratorProps,\n          ComponentProps,\n          Pattern,\n          Display,\n          Validator,\n          Message\n        >\n      | ISchema<\n          Decorator,\n          Component,\n          DecoratorProps,\n          ComponentProps,\n          Pattern,\n          Display,\n          Validator,\n          Message\n        >[]\n  ) => {\n    if (!schema) return\n    if (Array.isArray(schema)) {\n      this.items = schema.map((item) => new Schema(item, this))\n    } else {\n      this.items = new Schema(schema, this)\n    }\n    return this.items\n  }\n\n  setAdditionalItems = (\n    items: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!items) return\n    this.additionalItems = new Schema(items, this)\n    return this.additionalItems\n  }\n\n  findDefinitions = (ref: string) => {\n    if (!ref || !this.root || !isStr(ref)) return\n    if (ref.indexOf('#/') !== 0) return\n    return FormPath.getIn(this.root, ref.substring(2).split('/'))\n  }\n\n  mapProperties = <T>(\n    callback?: (\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => T\n  ): T[] => {\n    return Schema.getOrderProperties(this).map(({ schema, key }, index) => {\n      return callback(schema, key, index)\n    })\n  }\n\n  mapPatternProperties = <T>(\n    callback?: (\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => T\n  ): T[] => {\n    return Schema.getOrderProperties(this, 'patternProperties').map(\n      ({ schema, key }, index) => {\n        return callback(schema, key, index)\n      }\n    )\n  }\n\n  reduceProperties = <P, R>(\n    callback?: (\n      buffer: P,\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => R,\n    predicate?: P\n  ): R => {\n    let results: any = predicate\n    Schema.getOrderProperties(this, 'properties').forEach(\n      ({ schema, key }, index) => {\n        results = callback(results, schema, key, index)\n      }\n    )\n    return results\n  }\n\n  reducePatternProperties = <P, R>(\n    callback?: (\n      buffer: P,\n      schema: Schema<\n        Decorator,\n        Component,\n        DecoratorProps,\n        ComponentProps,\n        Pattern,\n        Display,\n        Validator,\n        Message\n      >,\n      key: SchemaKey,\n      index: number\n    ) => R,\n    predicate?: P\n  ): R => {\n    let results: any = predicate\n    Schema.getOrderProperties(this, 'patternProperties').forEach(\n      ({ schema, key }, index) => {\n        results = callback(results, schema, key, index)\n      }\n    )\n    return results\n  }\n\n  compile = (scope?: any) => {\n    const schema = new Schema({}, this.parent)\n    each(this, (value, key) => {\n      if (isFn(value) && !key.includes('x-')) return\n      if (key === 'parent' || key === 'root') return\n      if (!SchemaNestedMap[key]) {\n        schema[key] = value ? compile(value, scope) : value\n      } else {\n        schema[key] = value ? shallowCompile(value, scope) : value\n      }\n    })\n    return schema\n  }\n\n  fromJSON = (\n    json: ISchema<\n      Decorator,\n      Component,\n      DecoratorProps,\n      ComponentProps,\n      Pattern,\n      Display,\n      Validator,\n      Message\n    >\n  ) => {\n    if (!json) return this\n    if (Schema.isSchemaInstance(json)) return json\n    each(reducePatches(json), (value, key) => {\n      if (isFn(value) && !key.includes('x-')) return\n      if (key === 'properties') {\n        this.setProperties(value)\n      } else if (key === 'patternProperties') {\n        this.setPatternProperties(value)\n      } else if (key === 'additionalProperties') {\n        this.setAdditionalProperties(value)\n      } else if (key === 'items') {\n        this.setItems(value)\n      } else if (key === 'additionalItems') {\n        this.setAdditionalItems(value)\n      } else if (key === '$ref') {\n        this.fromJSON(this.findDefinitions(value))\n      } else {\n        this[key] = value\n      }\n    })\n    return this\n  }\n\n  toJSON = (\n    recursion = true\n  ): ISchema<\n    Decorator,\n    Component,\n    DecoratorProps,\n    ComponentProps,\n    Pattern,\n    Display,\n    Validator,\n    Message\n  > => {\n    const results = {}\n    each(this, (value: any, key) => {\n      if (\n        (isFn(value) && !key.includes('x-')) ||\n        key === 'parent' ||\n        key === 'root'\n      )\n        return\n      if (key === 'properties' || key === 'patternProperties') {\n        if (!recursion) return\n        results[key] = map(value, (item) => item?.toJSON?.())\n      } else if (key === 'additionalProperties' || key === 'additionalItems') {\n        if (!recursion) return\n        results[key] = value?.toJSON?.()\n      } else if (key === 'items') {\n        if (!recursion) return\n        if (Array.isArray(value)) {\n          results[key] = value.map((item) => item?.toJSON?.())\n        } else {\n          results[key] = value?.toJSON?.()\n        }\n      } else {\n        results[key] = value\n      }\n    })\n    return results\n  }\n\n  toFieldProps = (\n    options?: ISchemaTransformerOptions\n  ): IFieldFactoryProps<any, any> => {\n    return transformFieldProps(this, options)\n  }\n\n  static getOrderProperties = (\n    schema: ISchema = {},\n    propertiesName: keyof ISchema = 'properties'\n  ) => {\n    const orderProperties = []\n    const unorderProperties = []\n    for (const key in schema[propertiesName]) {\n      const item = schema[propertiesName][key]\n      const index = item['x-index']\n      if (!isNaN(index)) {\n        orderProperties[index] = { schema: item, key }\n      } else {\n        unorderProperties.push({ schema: item, key })\n      }\n    }\n    return orderProperties.concat(unorderProperties).filter((item) => !!item)\n  }\n\n  static compile = (expression: any, scope?: any) => {\n    return compile(expression, scope)\n  }\n\n  static shallowCompile = (expression: any, scope?: any) => {\n    return shallowCompile(expression, scope)\n  }\n\n  static isSchemaInstance = (value: any): value is Schema => {\n    return instOf(value, Schema)\n  }\n\n  static registerCompiler = registerCompiler\n\n  static registerPatches = registerPatches\n\n  static registerVoidComponents = registerVoidComponents\n\n  static registerTypeDefaultComponents = registerTypeDefaultComponents\n\n  static registerPolyfills = registerPolyfills\n\n  static enablePolyfills = enablePolyfills\n\n  static silent = silent\n}\n"],"names":[],"mappings":"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"}