{"version":3,"file":"Graph.js","sourceRoot":"","sources":["../../src/models/Graph.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAA;AACjD,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAA;AAGhD,OAAO,EACL,WAAW,EACX,YAAY,EACZ,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,oBAAoB,CAAA;AAE3B;IAGE,eAAY,IAAU;QAAtB,iBAKC;QAED,aAAQ,GAAG;YACT,IAAM,KAAK,GAAG,EAAE,CAAA;YAChB,KAAK,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA;YAChC,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAU,EAAE,UAAU;gBAC5C,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;YACtC,CAAC,CAAC,CAAA;YACF,OAAO,KAAK,CAAA;QACd,CAAC,CAAA;QAED,aAAQ,GAAG,UAAC,KAAiB;YAC3B,IAAM,IAAI,GAAG,KAAI,CAAC,IAAI,CAAA;YACtB,IAAM,WAAW,GAAG,UAAC,UAAkB,EAAE,KAAU;gBACjD,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;gBAC1C,IAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBAC1D,IAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,EAAE,CAAA;gBACjC,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;oBACvB,OAAO,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAA;iBACjD;qBAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;oBACnC,OAAO,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAA;iBACtD;qBAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;oBACpC,OAAO,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAA;iBACvD;qBAAM;oBACL,OAAO,KAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAA;iBACrD;YACH,CAAC,CAAA;YACD,IAAI,CAAC,KAAK,EAAE,UAAC,KAAK,EAAE,OAAO;gBACzB,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;oBACtB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;iBACrB;qBAAM;oBACL,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;oBAClC,IAAI,KAAK,EAAE;wBACT,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;qBACtB;yBAAM;wBACL,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;qBAC5C;iBACF;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;QA3CC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,MAAM,CAAC,IAAI,EAAE;YACX,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAA;IACJ,CAAC;IAwCH,YAAC;AAAD,CAAC,AAhDD,IAgDC","sourcesContent":["import { define, batch } from '@formily/reactive'\nimport { each, FormPath } from '@formily/shared'\nimport { IFormGraph } from '../types'\nimport { Form } from './Form'\nimport {\n  isFormState,\n  isFieldState,\n  isArrayFieldState,\n  isObjectFieldState,\n} from '../shared/checkers'\n\nexport class Graph {\n  form: Form\n\n  constructor(form: Form) {\n    this.form = form\n    define(this, {\n      setGraph: batch,\n    })\n  }\n\n  getGraph = (): IFormGraph => {\n    const graph = {}\n    graph[''] = this.form.getState()\n    each(this.form.fields, (field: any, identifier) => {\n      graph[identifier] = field.getState()\n    })\n    return graph\n  }\n\n  setGraph = (graph: IFormGraph) => {\n    const form = this.form\n    const createField = (identifier: string, state: any) => {\n      const address = FormPath.parse(identifier)\n      const name = address.segments[address.segments.length - 1]\n      const basePath = address.parent()\n      if (isFieldState(state)) {\n        return this.form.createField({ name, basePath })\n      } else if (isArrayFieldState(state)) {\n        return this.form.createArrayField({ name, basePath })\n      } else if (isObjectFieldState(state)) {\n        return this.form.createObjectField({ name, basePath })\n      } else {\n        return this.form.createVoidField({ name, basePath })\n      }\n    }\n    each(graph, (state, address) => {\n      if (isFormState(state)) {\n        form.setState(state)\n      } else {\n        const field = form.fields[address]\n        if (field) {\n          field.setState(state)\n        } else {\n          createField(address, state).setState(state)\n        }\n      }\n    })\n  }\n}\n"]}