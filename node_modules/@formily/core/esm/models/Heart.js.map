{"version":3,"file":"Heart.js","sourceRoot":"","sources":["../../src/models/Heart.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAEvC;IAAyD,yBAAY;IAOnE,eAAY,EAAkD;YAAlD,qBAAgD,EAAE,KAAA,EAAhD,UAAU,gBAAA,EAAE,OAAO,aAAA;QAAjC,YACE,iBAAO,SAGR;QAVD,gBAAU,GAAyB,EAAE,CAAA;QAErC,qBAAe,GAAmC,IAAI,GAAG,EAAE,CAAA;QAU3D,qBAAe,GAAG,UAAC,UAAuB;YACxC,OAAO,UAAU,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI;gBACjC,IAAI,IAAI,YAAY,SAAS,EAAE;oBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;iBACxB;qBAAM;oBACL,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;wBACf,OAAO,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;qBAClC;yBAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;wBACnC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAA;wBACnB,OAAO,GAAG,CAAA;qBACX;oBACD,OAAO,GAAG,CAAA;iBACX;YACH,CAAC,EAAE,EAAE,CAAC,CAAA;QACR,CAAC,CAAA;QAED,mBAAa,GAAG,UAAC,EAAO,EAAE,UAA4B;YAA5B,2BAAA,EAAA,eAA4B;YACpD,IAAM,SAAS,GAAG,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;YAClD,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;aACxC;QACH,CAAC,CAAA;QAED,mBAAa,GAAG,UAAC,EAAO;YACtB,OAAO,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACrC,CAAC,CAAA;QAED,sBAAgB,GAAG,UAAC,EAAO;YACzB,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACjC,CAAC,CAAA;QAED,mBAAa,GAAG,UAAC,UAA4B;YAA5B,2BAAA,EAAA,eAA4B;YAC3C,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;QACpD,CAAC,CAAA;QAED,aAAO,GAAG,UAAO,IAAS,EAAE,OAAW,EAAE,OAAW;YAClD,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;gBACf,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;oBAChC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,IAAI,KAAI,CAAC,OAAO,CAAC,CAAA;gBAC1D,CAAC,CAAC,CAAA;gBACF,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,UAAU;oBACtC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;wBAC3B,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,IAAI,KAAI,CAAC,OAAO,CAAC,CAAA;oBAC1D,CAAC,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;gBACF,KAAI,CAAC,MAAM,CAAC;oBACV,IAAI,MAAA;oBACJ,OAAO,SAAA;iBACR,CAAC,CAAA;aACH;QACH,CAAC,CAAA;QAED,WAAK,GAAG;YACN,KAAI,CAAC,UAAU,GAAG,EAAE,CAAA;YACpB,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;YAC5B,KAAI,CAAC,WAAW,EAAE,CAAA;QACpB,CAAC,CAAA;QA5DC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,eAAe,CAAC,UAAU,IAAI,EAAE,CAAC,CAAA;QACxD,KAAI,CAAC,OAAO,GAAG,OAAO,CAAA;;IACxB,CAAC;IA2DH,YAAC;AAAD,CAAC,AAtED,CAAyD,YAAY,GAsEpE","sourcesContent":["import { isStr, isArr, Subscribable } from '@formily/shared'\nimport { LifeCycle } from './LifeCycle'\nimport { IHeartProps } from '../types'\nexport class Heart<Payload = any, Context = any> extends Subscribable {\n  lifecycles: LifeCycle<Payload>[] = []\n\n  outerLifecycles: Map<any, LifeCycle<Payload>[]> = new Map()\n\n  context: Context\n\n  constructor({ lifecycles, context }: IHeartProps<Context> = {}) {\n    super()\n    this.lifecycles = this.buildLifeCycles(lifecycles || [])\n    this.context = context\n  }\n\n  buildLifeCycles = (lifecycles: LifeCycle[]) => {\n    return lifecycles.reduce((buf, item) => {\n      if (item instanceof LifeCycle) {\n        return buf.concat(item)\n      } else {\n        if (isArr(item)) {\n          return this.buildLifeCycles(item)\n        } else if (typeof item === 'object') {\n          this.context = item\n          return buf\n        }\n        return buf\n      }\n    }, [])\n  }\n\n  addLifeCycles = (id: any, lifecycles: LifeCycle[] = []) => {\n    const observers = this.buildLifeCycles(lifecycles)\n    if (observers.length) {\n      this.outerLifecycles.set(id, observers)\n    }\n  }\n\n  hasLifeCycles = (id: any) => {\n    return this.outerLifecycles.has(id)\n  }\n\n  removeLifeCycles = (id: any) => {\n    this.outerLifecycles.delete(id)\n  }\n\n  setLifeCycles = (lifecycles: LifeCycle[] = []) => {\n    this.lifecycles = this.buildLifeCycles(lifecycles)\n  }\n\n  publish = <P, C>(type: any, payload?: P, context?: C) => {\n    if (isStr(type)) {\n      this.lifecycles.forEach((lifecycle) => {\n        lifecycle.notify(type, payload, context || this.context)\n      })\n      this.outerLifecycles.forEach((lifecycles) => {\n        lifecycles.forEach((lifecycle) => {\n          lifecycle.notify(type, payload, context || this.context)\n        })\n      })\n      this.notify({\n        type,\n        payload,\n      })\n    }\n  }\n\n  clear = () => {\n    this.lifecycles = []\n    this.outerLifecycles.clear()\n    this.unsubscribe()\n  }\n}\n"]}