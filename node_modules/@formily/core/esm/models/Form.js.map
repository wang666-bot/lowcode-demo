{"version":3,"file":"Form.js","sourceRoot":"","sources":["../../src/models/Form.ts"],"names":[],"mappings":"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","sourcesContent":["import { define, observable, batch, action, observe } from '@formily/reactive'\nimport {\n  FormPath,\n  FormPathPattern,\n  isValid,\n  uid,\n  globalThisPolyfill,\n  merge,\n  isPlainObj,\n  isArr,\n  isObj,\n} from '@formily/shared'\nimport { Heart } from './Heart'\nimport { Field } from './Field'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  HeartSubscriber,\n  FormPatternTypes,\n  IFormRequests,\n  IFormFeedback,\n  ISearchFeedback,\n  IFormGraph,\n  IFormProps,\n  IFieldResetOptions,\n  IFormFields,\n  IFieldFactoryProps,\n  IVoidFieldFactoryProps,\n  IFormState,\n  IModelGetter,\n  IModelSetter,\n  IFieldStateGetter,\n  IFieldStateSetter,\n  FormDisplayTypes,\n  IFormMergeStrategy,\n} from '../types'\nimport {\n  createStateGetter,\n  createStateSetter,\n  createBatchStateSetter,\n  createBatchStateGetter,\n  triggerFormInitialValuesChange,\n  triggerFormValuesChange,\n  batchValidate,\n  batchReset,\n  batchSubmit,\n  setValidating,\n  setSubmitting,\n  setLoading,\n  getValidFormValues,\n} from '../shared/internals'\nimport { isVoidField } from '../shared/checkers'\nimport { runEffects } from '../shared/effective'\nimport { ArrayField } from './ArrayField'\nimport { ObjectField } from './ObjectField'\nimport { VoidField } from './VoidField'\nimport { Query } from './Query'\nimport { Graph } from './Graph'\n\nconst DEV_TOOLS_HOOK = '__FORMILY_DEV_TOOLS_HOOK__'\n\nexport class Form<ValueType extends object = any> {\n  displayName = 'Form'\n  id: string\n  initialized: boolean\n  validating: boolean\n  submitting: boolean\n  loading: boolean\n  modified: boolean\n  pattern: FormPatternTypes\n  display: FormDisplayTypes\n  values: ValueType\n  initialValues: ValueType\n  mounted: boolean\n  unmounted: boolean\n  props: IFormProps<ValueType>\n  heart: Heart\n  graph: Graph\n  fields: IFormFields = {}\n  requests: IFormRequests = {}\n  indexes: Record<string, string> = {}\n  disposers: (() => void)[] = []\n\n  constructor(props: IFormProps<ValueType>) {\n    this.initialize(props)\n    this.makeObservable()\n    this.makeReactive()\n    this.makeValues()\n    this.onInit()\n  }\n\n  protected initialize(props: IFormProps<ValueType>) {\n    this.id = uid()\n    this.props = { ...props }\n    this.initialized = false\n    this.submitting = false\n    this.validating = false\n    this.loading = false\n    this.modified = false\n    this.mounted = false\n    this.unmounted = false\n    this.display = this.props.display || 'visible'\n    this.pattern = this.props.pattern || 'editable'\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.hidden = this.props.hidden\n    this.graph = new Graph(this)\n    this.heart = new Heart({\n      lifecycles: this.lifecycles,\n      context: this,\n    })\n  }\n\n  protected makeValues() {\n    this.values = getValidFormValues(this.props.values)\n    this.initialValues = getValidFormValues(this.props.initialValues)\n  }\n\n  protected makeObservable() {\n    define(this, {\n      fields: observable.shallow,\n      indexes: observable.shallow,\n      initialized: observable.ref,\n      validating: observable.ref,\n      submitting: observable.ref,\n      loading: observable.ref,\n      modified: observable.ref,\n      pattern: observable.ref,\n      display: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      values: observable,\n      initialValues: observable,\n      valid: observable.computed,\n      invalid: observable.computed,\n      errors: observable.computed,\n      warnings: observable.computed,\n      successes: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      editable: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      disabled: observable.computed,\n      setValues: action,\n      setValuesIn: action,\n      setInitialValues: action,\n      setInitialValuesIn: action,\n      setPattern: action,\n      setDisplay: action,\n      setState: action,\n      deleteInitialValuesIn: action,\n      deleteValuesIn: action,\n      setSubmitting: action,\n      setValidating: action,\n      reset: action,\n      submit: action,\n      validate: action,\n      onMount: batch,\n      onUnmount: batch,\n      onInit: batch,\n    })\n  }\n\n  protected makeReactive() {\n    this.disposers.push(\n      observe(\n        this,\n        (change) => {\n          triggerFormInitialValuesChange(this, change)\n          triggerFormValuesChange(this, change)\n        },\n        true\n      )\n    )\n  }\n\n  get valid() {\n    return !this.invalid\n  }\n\n  get invalid() {\n    return this.errors.length > 0\n  }\n\n  get errors() {\n    return this.queryFeedbacks({\n      type: 'error',\n    })\n  }\n\n  get warnings() {\n    return this.queryFeedbacks({\n      type: 'warning',\n    })\n  }\n\n  get successes() {\n    return this.queryFeedbacks({\n      type: 'success',\n    })\n  }\n\n  get lifecycles() {\n    return runEffects(this, this.props.effects)\n  }\n\n  get hidden() {\n    return this.display === 'hidden'\n  }\n\n  get visible() {\n    return this.display === 'visible'\n  }\n\n  set hidden(hidden: boolean) {\n    if (!isValid(hidden)) return\n    if (hidden) {\n      this.display = 'hidden'\n    } else {\n      this.display = 'visible'\n    }\n  }\n\n  set visible(visible: boolean) {\n    if (!isValid(visible)) return\n    if (visible) {\n      this.display = 'visible'\n    } else {\n      this.display = 'none'\n    }\n  }\n\n  get editable() {\n    return this.pattern === 'editable'\n  }\n\n  set editable(editable) {\n    if (!isValid(editable)) return\n    if (editable) {\n      this.pattern = 'editable'\n    } else {\n      this.pattern = 'readPretty'\n    }\n  }\n\n  get readOnly() {\n    return this.pattern === 'readOnly'\n  }\n\n  set readOnly(readOnly) {\n    if (!isValid(readOnly)) return\n    if (readOnly) {\n      this.pattern = 'readOnly'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get disabled() {\n    return this.pattern === 'disabled'\n  }\n\n  set disabled(disabled) {\n    if (!isValid(disabled)) return\n    if (disabled) {\n      this.pattern = 'disabled'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get readPretty() {\n    return this.pattern === 'readPretty'\n  }\n\n  set readPretty(readPretty) {\n    if (!isValid(readPretty)) return\n    if (readPretty) {\n      this.pattern = 'readPretty'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  /** 创建字段 **/\n\n  createField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): Field<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new Field(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createArrayField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): ArrayField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ArrayField(\n          address,\n          {\n            ...props,\n            value: isArr(props.value) ? props.value : [],\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createObjectField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): ObjectField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ObjectField(\n          address,\n          {\n            ...props,\n            value: isObj(props.value) ? props.value : {},\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createVoidField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IVoidFieldFactoryProps<Decorator, Component>\n  ): VoidField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new VoidField(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  /** 状态操作模型 **/\n\n  setValues = (values: any, strategy: IFormMergeStrategy = 'merge') => {\n    if (!isPlainObj(values)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      merge(this.values, values, {\n        // never reach\n        arrayMerge: (target, source) => source,\n        assign: true,\n      })\n    } else if (strategy === 'shallowMerge') {\n      Object.assign(this.values, values)\n    } else {\n      this.values = values as any\n    }\n  }\n\n  setInitialValues = (\n    initialValues: any,\n    strategy: IFormMergeStrategy = 'merge'\n  ) => {\n    if (!isPlainObj(initialValues)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      merge(this.initialValues, initialValues, {\n        // never reach\n        arrayMerge: (target, source) => source,\n        assign: true,\n      })\n    } else if (strategy === 'shallowMerge') {\n      Object.assign(this.initialValues, initialValues)\n    } else {\n      this.initialValues = initialValues as any\n    }\n  }\n\n  setValuesIn = (pattern: FormPathPattern, value: any) => {\n    FormPath.setIn(this.values, pattern, value)\n  }\n\n  deleteValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.values, pattern)\n  }\n\n  existValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.values, pattern)\n  }\n\n  getValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.values, pattern)\n  }\n\n  setInitialValuesIn = (pattern: FormPathPattern, initialValue: any) => {\n    FormPath.setIn(this.initialValues, pattern, initialValue)\n  }\n\n  deleteInitialValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.initialValues, pattern)\n  }\n\n  existInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.initialValues, pattern)\n  }\n\n  getInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.initialValues, pattern)\n  }\n\n  setLoading = (loading: boolean) => {\n    setLoading(this, loading)\n  }\n\n  setSubmitting = (submitting: boolean) => {\n    setSubmitting(this, submitting)\n  }\n\n  setValidating = (validating: boolean) => {\n    setValidating(this, validating)\n  }\n\n  setDisplay = (display: FormDisplayTypes) => {\n    this.display = display\n  }\n\n  setPattern = (pattern: FormPatternTypes) => {\n    this.pattern = pattern\n  }\n\n  addEffects = (id: any, effects: IFormProps['effects']) => {\n    if (!this.heart.hasLifeCycles(id)) {\n      this.heart.addLifeCycles(id, runEffects(this, effects))\n    }\n  }\n\n  removeEffects = (id: any) => {\n    this.heart.removeLifeCycles(id)\n  }\n\n  setEffects = (effects: IFormProps['effects']) => {\n    this.heart.setLifeCycles(runEffects(this, effects))\n  }\n\n  clearErrors = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'error',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearWarnings = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'warning',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearSuccesses = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'success',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  query = (pattern: FormPathPattern): Query => {\n    return new Query({\n      pattern,\n      base: '',\n      form: this,\n    })\n  }\n\n  queryFeedbacks = (search: ISearchFeedback): IFormFeedback[] => {\n    return this.query(search.address || search.path || '*').reduce(\n      (messages, field) => {\n        if (isVoidField(field)) return messages\n        return messages.concat(\n          field\n            .queryFeedbacks(search)\n            .map((feedback) => ({\n              ...feedback,\n              address: field.address.toString(),\n              path: field.path.toString(),\n            }))\n            .filter((feedback) => feedback.messages.length > 0)\n        )\n      },\n      []\n    )\n  }\n\n  notify = (type: string, payload?: any) => {\n    this.heart.publish(type, payload ?? this)\n  }\n\n  subscribe = (subscriber?: HeartSubscriber) => {\n    return this.heart.subscribe(subscriber)\n  }\n\n  unsubscribe = (id: number) => {\n    this.heart.unsubscribe(id)\n  }\n\n  /**事件钩子**/\n\n  onInit = () => {\n    this.initialized = true\n    this.notify(LifeCycleTypes.ON_FORM_INIT)\n  }\n\n  onMount = () => {\n    this.mounted = true\n    this.notify(LifeCycleTypes.ON_FORM_MOUNT)\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].inject(this.id, this)\n    }\n  }\n\n  onUnmount = () => {\n    this.notify(LifeCycleTypes.ON_FORM_UNMOUNT)\n    this.query('*').forEach((field) => field.destroy(false))\n    this.disposers.forEach((dispose) => dispose())\n    this.unmounted = true\n    this.indexes = {}\n    this.heart.clear()\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].unmount(this.id)\n    }\n  }\n\n  setState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFormState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getFormState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFieldState: IFieldStateSetter = createBatchStateSetter(this)\n\n  getFieldState: IFieldStateGetter = createBatchStateGetter(this)\n\n  getFormGraph = () => {\n    return this.graph.getGraph()\n  }\n\n  setFormGraph = (graph: IFormGraph) => {\n    this.graph.setGraph(graph)\n  }\n\n  clearFormGraph = (pattern: FormPathPattern = '*', forceClear = true) => {\n    this.query(pattern).forEach((field) => {\n      field.destroy(forceClear)\n    })\n  }\n\n  validate = (pattern: FormPathPattern = '*') => {\n    return batchValidate(this, pattern)\n  }\n\n  submit = <T>(\n    onSubmit?: (values: ValueType) => Promise<T> | void\n  ): Promise<T> => {\n    return batchSubmit(this, onSubmit)\n  }\n\n  reset = (pattern: FormPathPattern = '*', options?: IFieldResetOptions) => {\n    return batchReset(this, pattern, options)\n  }\n}\n"]}