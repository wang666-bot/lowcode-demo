{"version":3,"file":"effective.js","sourceRoot":"","sources":["../../src/shared/effective.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAA;AAC/C,OAAO,EAAE,SAAS,EAAQ,MAAM,WAAW,CAAA;AAE3C,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAA;AAEzC,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAG9B,IAAY,EACZ,QAAY;IAEZ,OAAO;QAAC,cAAkC;aAAlC,UAAkC,EAAlC,qBAAkC,EAAlC,IAAkC;YAAlC,yBAAkC;;QACxC,IAAI,WAAW,CAAC,WAAW,EAAE;YAC3B,WAAW,CAAC,UAAU,CAAC,IAAI,CACzB,IAAI,SAAS,CAAC,IAAI,EAAE,UAAC,OAAO,EAAE,GAAG;gBAC/B,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAClB,QAAQ,8BAAC,OAAO,EAAE,GAAG,UAAK,WAAW,CAAC,OAAO,kDAAK,IAAI,WAAC;iBACxD;YACH,CAAC,CAAC,CACH,CAAA;SACF;aAAM;YACL,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAA;SACF;IACH,CAAC,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAU,YAAgB;IAC3D,IAAI,KAAa,CAAA;IACjB,OAAO;QACL,OAAO,EAAP,UAAQ,KAAS;YACf,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC3B,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAA;gBAClC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAA;aACnE;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAA;aACF;QACH,CAAC;QACD,OAAO,EAAP;YACE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;gBAC5B,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAA;aACF;YACD,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACnC,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AAED,IAAM,iBAAiB,GAAG,mBAAmB,EAAQ,CAAA;AAErD,MAAM,CAAC,IAAM,aAAa,GAAG,iBAAiB,CAAC,OAAO,CAAA;AAEtD,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,OAAiB;IACjB,cAAuC;SAAvC,UAAuC,EAAvC,qBAAuC,EAAvC,IAAuC;QAAvC,6BAAuC;;IAEvC,WAAW,CAAC,UAAU,GAAG,EAAE,CAAA;IAC3B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAA;IACxB,WAAW,CAAC,WAAW,GAAG,IAAI,CAAA;IAC9B,WAAW,CAAC,SAAS,GAAG,KAAK,CAAA;IAC7B,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;QACnB,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;KACnC;IACD,IAAI,CAAC,OAAO,CAAC,UAAC,OAAO;QACnB,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;YACjB,OAAO,CAAC,OAAO,CAAC,CAAA;SACjB;IACH,CAAC,CAAC,CAAA;IACF,WAAW,CAAC,OAAO,GAAG,EAAE,CAAA;IACxB,WAAW,CAAC,WAAW,GAAG,KAAK,CAAA;IAC/B,WAAW,CAAC,SAAS,GAAG,IAAI,CAAA;IAC5B,OAAO,WAAW,CAAC,UAAU,CAAA;AAC/B,CAAC,CAAA","sourcesContent":["import { isFn, isValid } from '@formily/shared'\nimport { LifeCycle, Form } from '../models'\nimport { AnyFunction } from '../types'\nimport { isForm } from './checkers'\nimport { GlobalState } from './constants'\n\nexport const createEffectHook = <\n  F extends (payload: any, ...ctxs: any[]) => AnyFunction\n>(\n  type: string,\n  callback?: F\n) => {\n  return (...args: Parameters<ReturnType<F>>) => {\n    if (GlobalState.effectStart) {\n      GlobalState.lifecycles.push(\n        new LifeCycle(type, (payload, ctx) => {\n          if (isFn(callback)) {\n            callback(payload, ctx, ...GlobalState.context)(...args)\n          }\n        })\n      )\n    } else {\n      throw new Error(\n        'Effect hooks cannot be used in asynchronous function body'\n      )\n    }\n  }\n}\n\nexport const createEffectContext = <T = any>(defaultValue?: T) => {\n  let index: number\n  return {\n    provide(value?: T) {\n      if (GlobalState.effectStart) {\n        index = GlobalState.context.length\n        GlobalState.context[index] = isValid(value) ? value : defaultValue\n      } else {\n        throw new Error(\n          'Provide method cannot be used in asynchronous function body'\n        )\n      }\n    },\n    consume(): T {\n      if (!GlobalState.effectStart) {\n        throw new Error(\n          'Consume method cannot be used in asynchronous function body'\n        )\n      }\n      return GlobalState.context[index]\n    },\n  }\n}\n\nconst FormEffectContext = createEffectContext<Form>()\n\nexport const useEffectForm = FormEffectContext.consume\n\nexport const runEffects = <Context>(\n  context?: Context,\n  ...args: ((context: Context) => void)[]\n): LifeCycle[] => {\n  GlobalState.lifecycles = []\n  GlobalState.context = []\n  GlobalState.effectStart = true\n  GlobalState.effectEnd = false\n  if (isForm(context)) {\n    FormEffectContext.provide(context)\n  }\n  args.forEach((effects) => {\n    if (isFn(effects)) {\n      effects(context)\n    }\n  })\n  GlobalState.context = []\n  GlobalState.effectStart = false\n  GlobalState.effectEnd = true\n  return GlobalState.lifecycles\n}\n"]}