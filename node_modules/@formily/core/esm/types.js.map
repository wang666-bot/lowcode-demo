{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAoCA,MAAM,CAAN,IAAY,cA8DX;AA9DD,WAAY,cAAc;IACxB;;QAEI;IAEJ,6CAA2B,CAAA;IAC3B,+CAA6B,CAAA;IAC7B,mDAAiC,CAAA;IAEjC,4DAA0C,CAAA;IAC1C,8DAA4C,CAAA;IAC5C,6EAA2D,CAAA;IAE3D,iDAA+B,CAAA;IAC/B,+CAA6B,CAAA;IAC7B,4DAA0C,CAAA;IAC1C,yDAAuC,CAAA;IACvC,wDAAsC,CAAA;IACtC,6EAA2D,CAAA;IAC3D,iFAA+D,CAAA;IAC/D,+EAA6D,CAAA;IAC7D,yEAAuD,CAAA;IACvD,gEAA8C,CAAA;IAC9C,8DAA4C,CAAA;IAC5C,gEAA8C,CAAA;IAC9C,yDAAuC,CAAA;IACvC,oEAAkD,CAAA;IAClD,kEAAgD,CAAA;IAChD,4DAA0C,CAAA;IAE1C,4DAA0C,CAAA;IAC1C,mDAAiC,CAAA;IAEjC;;QAEI;IAEJ,+CAA6B,CAAA;IAC7B,yEAAuD,CAAA;IACvD,8DAA4C,CAAA;IAC5C,6EAA2D,CAAA;IAE3D,mDAAiC,CAAA;IACjC,8DAA4C,CAAA;IAC5C,2DAAyC,CAAA;IACzC,0DAAwC,CAAA;IACxC,+EAA6D,CAAA;IAC7D,mFAAiE,CAAA;IACjE,iFAA+D,CAAA;IAC/D,2EAAyD,CAAA;IACzD,kEAAgD,CAAA;IAChD,gEAA8C,CAAA;IAC9C,kEAAgD,CAAA;IAChD,2DAAyC,CAAA;IACzC,sEAAoD,CAAA;IACpD,oEAAkD,CAAA;IAClD,8DAA4C,CAAA;IAE5C,qDAAmC,CAAA;IACnC,iDAA+B,CAAA;IAC/B,iDAA+B,CAAA;IAC/B,qDAAmC,CAAA;AACrC,CAAC,EA9DW,cAAc,KAAd,cAAc,QA8DzB","sourcesContent":["import {\n  IValidatorRules,\n  Validator,\n  ValidatorTriggerType,\n} from '@formily/validator'\nimport { FormPath } from '@formily/shared'\nimport {\n  Form,\n  Field,\n  LifeCycle,\n  ArrayField,\n  VoidField,\n  ObjectField,\n  Query,\n} from './models'\n\nexport type NonFunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends (...args: any) => any ? never : K\n}[keyof T]\n\nexport type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>\n\nexport type AnyFunction = (...args: any[]) => any\n\nexport type JSXComponent = any\n\nexport type LifeCycleHandler<T> = (payload: T, context: any) => void\n\nexport type LifeCyclePayload<T> = (\n  params: {\n    type: string\n    payload: T\n  },\n  context: any\n) => void\n\nexport enum LifeCycleTypes {\n  /**\n   * Form LifeCycle\n   **/\n\n  ON_FORM_INIT = 'onFormInit',\n  ON_FORM_MOUNT = 'onFormMount',\n  ON_FORM_UNMOUNT = 'onFormUnmount',\n\n  ON_FORM_INPUT_CHANGE = 'onFormInputChange',\n  ON_FORM_VALUES_CHANGE = 'onFormValuesChange',\n  ON_FORM_INITIAL_VALUES_CHANGE = 'onFormInitialValuesChange',\n\n  ON_FORM_SUBMIT = 'onFormSubmit',\n  ON_FORM_RESET = 'onFormReset',\n  ON_FORM_SUBMIT_START = 'onFormSubmitStart',\n  ON_FORM_SUBMITTING = 'onFormSubmitting',\n  ON_FORM_SUBMIT_END = 'onFormSubmitEnd',\n  ON_FORM_SUBMIT_VALIDATE_START = 'onFormSubmitValidateStart',\n  ON_FORM_SUBMIT_VALIDATE_SUCCESS = 'onFormSubmitValidateSuccess',\n  ON_FORM_SUBMIT_VALIDATE_FAILED = 'onFormSubmitValidateFailed',\n  ON_FORM_SUBMIT_VALIDATE_END = 'onFormSubmitValidateEnd',\n  ON_FORM_SUBMIT_SUCCESS = 'onFormSubmitSuccess',\n  ON_FORM_SUBMIT_FAILED = 'onFormSubmitFailed',\n  ON_FORM_VALIDATE_START = 'onFormValidateStart',\n  ON_FORM_VALIDATING = 'onFormValidating',\n  ON_FORM_VALIDATE_SUCCESS = 'onFormValidateSuccess',\n  ON_FORM_VALIDATE_FAILED = 'onFormValidateFailed',\n  ON_FORM_VALIDATE_END = 'onFormValidateEnd',\n\n  ON_FORM_GRAPH_CHANGE = 'onFormGraphChange',\n  ON_FORM_LOADING = 'onFormLoading',\n\n  /**\n   * Field LifeCycle\n   **/\n\n  ON_FIELD_INIT = 'onFieldInit',\n  ON_FIELD_INPUT_VALUE_CHANGE = 'onFieldInputValueChange',\n  ON_FIELD_VALUE_CHANGE = 'onFieldValueChange',\n  ON_FIELD_INITIAL_VALUE_CHANGE = 'onFieldInitialValueChange',\n\n  ON_FIELD_SUBMIT = 'onFieldSubmit',\n  ON_FIELD_SUBMIT_START = 'onFieldSubmitStart',\n  ON_FIELD_SUBMITTING = 'onFieldSubmitting',\n  ON_FIELD_SUBMIT_END = 'onFieldSubmitEnd',\n  ON_FIELD_SUBMIT_VALIDATE_START = 'onFieldSubmitValidateStart',\n  ON_FIELD_SUBMIT_VALIDATE_SUCCESS = 'onFieldSubmitValidateSuccess',\n  ON_FIELD_SUBMIT_VALIDATE_FAILED = 'onFieldSubmitValidateFailed',\n  ON_FIELD_SUBMIT_VALIDATE_END = 'onFieldSubmitValidateEnd',\n  ON_FIELD_SUBMIT_SUCCESS = 'onFieldSubmitSuccess',\n  ON_FIELD_SUBMIT_FAILED = 'onFieldSubmitFailed',\n  ON_FIELD_VALIDATE_START = 'onFieldValidateStart',\n  ON_FIELD_VALIDATING = 'onFieldValidating',\n  ON_FIELD_VALIDATE_SUCCESS = 'onFieldValidateSuccess',\n  ON_FIELD_VALIDATE_FAILED = 'onFieldValidateFailed',\n  ON_FIELD_VALIDATE_END = 'onFieldValidateEnd',\n\n  ON_FIELD_LOADING = 'onFieldLoading',\n  ON_FIELD_RESET = 'onFieldReset',\n  ON_FIELD_MOUNT = 'onFieldMount',\n  ON_FIELD_UNMOUNT = 'onFieldUnmount',\n}\n\nexport type HeartSubscriber = ({\n  type,\n  payload,\n}: {\n  type: string\n  payload: any\n}) => void\n\nexport interface INodePatch<T> {\n  type: 'remove' | 'update'\n  address: string\n  oldAddress?: string\n  payload?: T\n}\n\nexport interface IHeartProps<Context> {\n  lifecycles?: LifeCycle[]\n  context?: Context\n}\n\nexport interface IFieldFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  messages?: FeedbackMessage\n}\n\nexport type IFormFeedback = IFieldFeedback & {\n  path?: string\n  address?: string\n}\n\nexport interface ISearchFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  address?: FormPathPattern\n  path?: FormPathPattern\n  messages?: FeedbackMessage\n}\n\nexport type FeedbackMessage = any[]\n\nexport type IFieldUpdate = {\n  pattern: FormPath\n  callbacks: ((...args: any[]) => any)[]\n}\n\nexport interface IFormRequests {\n  validate?: number\n  submit?: number\n  loading?: number\n  updates?: IFieldUpdate[]\n  updateIndexes?: Record<string, number>\n}\n\nexport type IFormFields = Record<string, GeneralField>\n\nexport type FieldFeedbackTypes = 'error' | 'success' | 'warning'\n\nexport type FieldFeedbackTriggerTypes = ValidatorTriggerType\n\nexport type FieldFeedbackCodeTypes =\n  | 'ValidateError'\n  | 'ValidateSuccess'\n  | 'ValidateWarning'\n  | 'EffectError'\n  | 'EffectSuccess'\n  | 'EffectWarning'\n  | (string & {})\n\nexport type FormPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\nexport type FormDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FormPathPattern =\n  | string\n  | number\n  | Array<string | number>\n  | FormPath\n  | RegExp\n  | (((address: Array<string | number>) => boolean) & {\n      path: FormPath\n    })\n\ntype OmitState<P> = Omit<\n  P,\n  | 'selfDisplay'\n  | 'selfPattern'\n  | 'originValues'\n  | 'originInitialValues'\n  | 'id'\n  | 'address'\n  | 'path'\n  | 'lifecycles'\n  | 'disposers'\n  | 'requests'\n  | 'fields'\n  | 'graph'\n  | 'heart'\n  | 'indexes'\n  | 'props'\n  | 'displayName'\n  | 'setState'\n  | 'getState'\n  | 'getFormGraph'\n  | 'setFormGraph'\n  | 'setFormState'\n  | 'getFormState'\n>\n\nexport type IFieldState = Partial<\n  Pick<\n    Field,\n    NonFunctionPropertyNames<OmitState<Field<any, any, string, string>>>\n  >\n>\n\nexport type IVoidFieldState = Partial<\n  Pick<\n    VoidField,\n    NonFunctionPropertyNames<OmitState<VoidField<any, any, string>>>\n  >\n>\n\nexport type IFormState<T extends Record<any, any> = any> = Pick<\n  Form<T>,\n  NonFunctionPropertyNames<OmitState<Form<{ [key: string]: any }>>>\n>\n\nexport type IFormGraph = Record<string, IGeneralFieldState | IFormState>\n\nexport interface IFormProps<T extends object = any> {\n  values?: Partial<T>\n  initialValues?: Partial<T>\n  pattern?: FormPatternTypes\n  display?: FormDisplayTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  effects?: (form: Form<T>) => void\n  validateFirst?: boolean\n  designable?: boolean\n}\n\nexport type IFormMergeStrategy =\n  | 'overwrite'\n  | 'merge'\n  | 'deepMerge'\n  | 'shallowMerge'\n\nexport interface IFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any,\n  ValueType = any\n> extends IFieldProps<Decorator, Component, TextType, ValueType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IVoidFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any\n> extends IVoidFieldProps<Decorator, Component, TextType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IFieldRequests {\n  validate?: number\n  submit?: number\n  loading?: number\n  batch?: () => void\n}\n\nexport interface IFieldCaches {\n  value?: any\n  initialValue?: any\n  inputting?: boolean\n}\n\nexport type FieldDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FieldPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\n\nexport type FieldValidatorContext = IValidatorRules & {\n  field?: Field\n  form?: Form\n  value?: any\n}\n\nexport type FieldValidator = Validator<FieldValidatorContext>\n\nexport type FieldDataSource = {\n  label?: any\n  value?: any\n  title?: any\n  key?: any\n  text?: any\n  children?: FieldDataSource\n  [key: string]: any\n}[]\n\nexport type FieldComponent<\n  Component extends JSXComponent,\n  ComponentProps = any\n> = [Component] | [Component, ComponentProps] | boolean | any[]\n\nexport type FieldDecorator<\n  Decorator extends JSXComponent,\n  ComponentProps = any\n> = [Decorator] | [Decorator, ComponentProps] | boolean | any[]\n\nexport type FieldReaction = (field: Field) => void\nexport interface IFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any,\n  ValueType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  value?: ValueType\n  initialValue?: ValueType\n  required?: boolean\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  dataSource?: FieldDataSource\n  validateFirst?: boolean\n  validator?: FieldValidator\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IVoidFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IFieldResetOptions {\n  forceClear?: boolean\n  validate?: boolean\n}\n\nexport type IGeneralFieldState = IFieldState & IVoidFieldState\n\nexport type GeneralField = Field | VoidField | ArrayField | ObjectField\n\nexport type DataField = Field | ArrayField | ObjectField\nexport interface ISpliceArrayStateProps {\n  startIndex?: number\n  deleteCount?: number\n  insertCount?: number\n}\n\nexport interface IExchangeArrayStateProps {\n  fromIndex?: number\n  toIndex?: number\n}\n\nexport interface IQueryProps {\n  pattern: FormPathPattern\n  base: FormPathPattern\n  form: Form\n}\n\nexport interface IModelSetter<P = any> {\n  (setter: (state: P) => void): void\n  (setter: Partial<P>): void\n  (): void\n}\n\nexport interface IModelGetter<P = any> {\n  <Getter extends (state: P) => any>(getter: Getter): ReturnType<Getter>\n  (): P\n}\n\nexport type FieldMatchPattern = FormPathPattern | Query | GeneralField\n\nexport interface IFieldStateSetter {\n  (pattern: FieldMatchPattern, setter: (state: IFieldState) => void): void\n  (pattern: FieldMatchPattern, setter: Partial<IFieldState>): void\n}\n\nexport interface IFieldStateGetter {\n  <Getter extends (state: IGeneralFieldState) => any>(\n    pattern: FieldMatchPattern,\n    getter: Getter\n  ): ReturnType<Getter>\n  (pattern: FieldMatchPattern): IGeneralFieldState\n}\n\nexport interface IFieldActions {\n  [key: string]: (...args: any[]) => any\n}\n"]}