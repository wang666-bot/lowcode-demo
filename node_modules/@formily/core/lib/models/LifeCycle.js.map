{"version":3,"file":"LifeCycle.js","sourceRoot":"","sources":["../../src/models/LifeCycle.ts"],"names":[],"mappings":";;;AAAA,0CAAmD;AAQnD;IAGE;QAAY,gBAAmC;aAAnC,UAAmC,EAAnC,qBAAmC,EAAnC,IAAmC;YAAnC,2BAAmC;;QAA/C,iBAEC;QACD,kBAAa,GAAG,UAAC,MAAa;YAC5B,OAAO,UAAU,OAA2C,EAAE,GAAQ;gBAA/D,iBAqBN;gBApBC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAClD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;oBACxB,IAAI,IAAA,aAAI,EAAC,IAAI,CAAC,EAAE;wBACd,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAA;qBAC9B;yBAAM,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,IAAI,IAAA,aAAI,EAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE;wBACjD,IAAI,IAAI,KAAK,OAAO,CAAC,IAAI,EAAE;4BACzB,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;yBACnD;wBACD,KAAK,EAAE,CAAA;qBACR;yBAAM;wBACL,IAAA,aAAI,EAAW,IAAI,EAAE,UAAC,OAAO,EAAE,IAAI;4BACjC,IAAI,IAAA,aAAI,EAAC,OAAO,CAAC,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;gCAChC,IAAI,IAAI,KAAK,OAAO,CAAC,IAAI,EAAE;oCACzB,OAAO,CAAC,IAAI,CAAC,KAAI,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;oCACxC,OAAO,KAAK,CAAA;iCACb;6BACF;wBACH,CAAC,CAAC,CAAA;qBACH;iBACF;YACH,CAAC,CAAA;QACH,CAAC,CAAA;QAED,WAAM,GAAG,UAAU,IAAS,EAAE,OAAiB,EAAE,GAAS;YACxD,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;gBACf,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,EAAE,GAAG,CAAC,CAAA;aAChD;QACH,CAAC,CAAA;QA/BC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAC5C,CAAC;IA+BH,gBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,8BAAS","sourcesContent":["import { isFn, isStr, each } from '@formily/shared'\nimport { LifeCycleHandler, LifeCyclePayload } from '../types'\n\ntype LifeCycleParams<Payload> = Array<\n  | string\n  | LifeCycleHandler<Payload>\n  | { [key: string]: LifeCycleHandler<Payload> }\n>\nexport class LifeCycle<Payload = any> {\n  private listener: LifeCyclePayload<Payload>\n\n  constructor(...params: LifeCycleParams<Payload>) {\n    this.listener = this.buildListener(params)\n  }\n  buildListener = (params: any[]) => {\n    return function (payload: { type: string; payload: Payload }, ctx: any) {\n      for (let index = 0; index < params.length; index++) {\n        let item = params[index]\n        if (isFn(item)) {\n          item.call(this, payload, ctx)\n        } else if (isStr(item) && isFn(params[index + 1])) {\n          if (item === payload.type) {\n            params[index + 1].call(this, payload.payload, ctx)\n          }\n          index++\n        } else {\n          each<any, any>(item, (handler, type) => {\n            if (isFn(handler) && isStr(type)) {\n              if (type === payload.type) {\n                handler.call(this, payload.payload, ctx)\n                return false\n              }\n            }\n          })\n        }\n      }\n    }\n  }\n\n  notify = <Payload>(type: any, payload?: Payload, ctx?: any) => {\n    if (isStr(type)) {\n      this.listener.call(ctx, { type, payload }, ctx)\n    }\n  }\n}\n"]}