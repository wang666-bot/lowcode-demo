{"version":3,"file":"parser.js","sourceRoot":"","sources":["../src/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArr, isBool, isFn, isStr } from '@formily/shared'\nimport {\n  ValidatorDescription,\n  ValidatorFunction,\n  ValidatorParsedFunction,\n  Validator,\n  IValidatorRules,\n  isValidateResult,\n  IValidatorOptions,\n} from './types'\nimport { getValidateRules, getValidateLocale } from './registry'\nimport { render } from './template'\n\nconst getRuleMessage = (rule: IValidatorRules, type: string) => {\n  if (rule.format) {\n    return rule.message || getValidateLocale(rule.format)\n  }\n  return rule.message || getValidateLocale(type)\n}\n\nexport const parseValidatorDescription = (\n  description: ValidatorDescription\n): IValidatorRules => {\n  if (!description) return {}\n  let rules: IValidatorRules = {}\n  if (isStr(description)) {\n    rules.format = description\n  } else if (isFn(description)) {\n    rules.validator = description\n  } else {\n    rules = Object.assign(rules, description)\n  }\n  return rules\n}\n\nexport const parseValidatorDescriptions = <Context = any>(\n  validator: Validator<Context>\n): IValidatorRules[] => {\n  if (!validator) return []\n  const array = isArr(validator) ? validator : [validator]\n  return array.map((description) => {\n    return parseValidatorDescription(description)\n  })\n}\n\nexport const parseValidatorRules = (\n  rules: IValidatorRules = {}\n): ValidatorParsedFunction[] => {\n  const getRulesKeys = (): string[] => {\n    const keys = []\n    if ('required' in rules) {\n      keys.push('required')\n    }\n    for (let key in rules) {\n      if (key === 'required' || key === 'validator') continue\n      keys.push(key)\n    }\n    if ('validator' in rules) {\n      keys.push('validator')\n    }\n    return keys\n  }\n  const getContext = (context: any, value: any) => {\n    return {\n      ...rules,\n      ...context,\n      value,\n    }\n  }\n  const createValidate =\n    (callback: ValidatorFunction, message: string) =>\n    async (value: any, context: any) => {\n      const context_ = getContext(context, value)\n      try {\n        const results = await callback(\n          value,\n          { ...rules, message },\n          context_,\n          (message: string, scope: any) => {\n            return render(\n              {\n                type: 'error',\n                message,\n              },\n              Object.assign(context_, scope)\n            )?.message\n          }\n        )\n        if (isBool(results)) {\n          if (!results) {\n            return render(\n              {\n                type: 'error',\n                message,\n              },\n              context_\n            )\n          }\n          return {\n            type: 'error',\n            message: undefined,\n          }\n        } else if (results) {\n          if (isValidateResult(results)) {\n            return render(results, context_)\n          }\n          return render(\n            {\n              type: 'error',\n              message: results,\n            },\n            context_\n          )\n        }\n\n        return {\n          type: 'error',\n          message: undefined,\n        }\n      } catch (e) {\n        return {\n          type: 'error',\n          message: e?.message || e,\n        }\n      }\n    }\n  return getRulesKeys().reduce((buf, key) => {\n    const callback = getValidateRules(key)\n    if (callback) {\n      const validator = createValidate(callback, getRuleMessage(rules, key))\n      return buf.concat(validator)\n    }\n    return buf\n  }, [])\n}\n\nexport const parseValidator = <Context = any>(\n  validator: Validator<Context>,\n  options: IValidatorOptions = {}\n) => {\n  if (!validator) return []\n  const array = isArr(validator) ? validator : [validator]\n  return array.reduce<ValidatorParsedFunction<Context>[]>(\n    (buf, description) => {\n      const rules = parseValidatorDescription(description)\n      const triggerType = rules.triggerType ?? 'onInput'\n      if (options?.triggerType && options.triggerType !== triggerType)\n        return buf\n      return rules ? buf.concat(parseValidatorRules(rules)) : buf\n    },\n    []\n  )\n}\n"]}