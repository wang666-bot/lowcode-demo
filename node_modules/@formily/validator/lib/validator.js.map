{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAyC;AAEzC,uCAImB;AACnB,oDAA8B;AAC9B,sDAA+B;AAC/B,kDAA2B;AAE3B,IAAA,gCAAqB,EAAC,eAAK,CAAC,CAAA;AAE5B,IAAA,iCAAsB,EAAC,gBAAO,CAAC,CAAA;AAE/B,IAAA,kCAAuB,EAAC,iBAAO,CAAC,CAAA;AAEzB,IAAM,QAAQ,GAAG,UACtB,KAAU,EACV,SAA6B,EAC7B,OAAoC;;;;;gBAE9B,SAAS,GAAG,IAAA,uBAAc,EAAC,SAAS,EAAE,OAAO,CAAC,CAAA;gBAC9C,OAAO,GAAqB;oBAChC,KAAK,EAAE,EAAE;oBACT,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,EAAE;iBACZ,CAAA;gBACQ,CAAC,GAAG,CAAC;;;qBAAE,CAAA,CAAC,GAAG,SAAS,CAAC,MAAM,CAAA;gBACnB,qBAAM,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,EAAA;;gBAApD,MAAM,GAAG,SAA2C;gBAClD,IAAI,GAAc,MAAM,KAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAW;gBAChC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;gBACnC,IAAI,OAAO,EAAE;oBACX,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;oBAC3B,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa;wBAAE,wBAAK;iBAClC;;;gBAPmC,CAAC,EAAE,CAAA;;oBASzC,sBAAO,OAAO,EAAA;;;KACf,CAAA;AArBY,QAAA,QAAQ,YAqBpB","sourcesContent":["import { parseValidator } from './parser'\nimport { IValidateResults, Validator, IValidatorOptions } from './types'\nimport {\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateRules,\n} from './registry'\nimport locales from './locale'\nimport formats from './formats'\nimport rules from './rules'\n\nregisterValidateRules(rules)\n\nregisterValidateLocale(locales)\n\nregisterValidateFormats(formats)\n\nexport const validate = async <Context = any>(\n  value: any,\n  validator: Validator<Context>,\n  options?: IValidatorOptions<Context>\n): Promise<IValidateResults> => {\n  const validates = parseValidator(validator, options)\n  const results: IValidateResults = {\n    error: [],\n    success: [],\n    warning: [],\n  }\n  for (let i = 0; i < validates.length; i++) {\n    const result = await validates[i](value, options?.context)\n    const { type, message } = result\n    results[type] = results[type] || []\n    if (message) {\n      results[type].push(message)\n      if (options?.validateFirst) break\n    }\n  }\n  return results\n}\n"]}