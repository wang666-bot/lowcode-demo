{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA2BO,IAAM,gBAAgB,GAAG,UAAC,GAAQ;IACvC,OAAA,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;AAAjC,CAAiC,CAAA;AADtB,QAAA,gBAAgB,oBACM","sourcesContent":["export type ValidatorFormats =\n  | 'url'\n  | 'email'\n  | 'ipv6'\n  | 'ipv4'\n  | 'number'\n  | 'integer'\n  | 'idcard'\n  | 'qq'\n  | 'phone'\n  | 'money'\n  | 'zh'\n  | 'date'\n  | 'zip'\n  | (string & {})\n\nexport interface IValidateResult {\n  type: 'error' | 'warning' | 'success' | (string & {})\n  message: string\n}\n\nexport interface IValidateResults {\n  error?: string[]\n  warning?: string[]\n  success?: string[]\n}\n\nexport const isValidateResult = (obj: any): obj is IValidateResult =>\n  !!obj['type'] && !!obj['message']\n\nexport type ValidatorFunctionResponse =\n  | null\n  | string\n  | boolean\n  | IValidateResult\n\nexport type ValidatorFunction<Context = any> = (\n  value: any,\n  rule: IValidatorRules<Context>,\n  ctx: Context,\n  render: (message: string, scope?: any) => string\n) => ValidatorFunctionResponse | Promise<ValidatorFunctionResponse> | null\n\nexport type ValidatorParsedFunction<Context = any> = (\n  value: any,\n  ctx: Context\n) => IValidateResult | Promise<IValidateResult> | null\n\nexport type ValidatorTriggerType =\n  | 'onInput'\n  | 'onFocus'\n  | 'onBlur'\n  | (string & {})\n\nexport interface IValidatorRules<Context = any> {\n  triggerType?: ValidatorTriggerType\n  format?: ValidatorFormats\n  validator?: ValidatorFunction<Context>\n  required?: boolean\n  pattern?: RegExp | string\n  max?: number\n  maximum?: number\n  maxItems?: number\n  minItems?: number\n  maxLength?: number\n  minLength?: number\n  exclusiveMaximum?: number\n  exclusiveMinimum?: number\n  minimum?: number\n  min?: number\n  len?: number\n  whitespace?: boolean\n  enum?: any[]\n  const?: any\n  multipleOf?: number\n  uniqueItems?: boolean\n  maxProperties?: number\n  minProperties?: number\n  message?: string\n  [key: string]: any\n}\n\nexport interface IRegistryLocaleMessages {\n  [key: string]: string | IRegistryLocaleMessages\n}\n\nexport interface IRegistryLocales {\n  [language: string]: IRegistryLocaleMessages\n}\n\nexport interface IRegistryRules<Context = any> {\n  [key: string]: ValidatorFunction<Context>\n}\n\nexport interface IRegistryFormats {\n  [key: string]: string | RegExp\n}\n\nexport type ValidatorDescription<Context = any> =\n  | ValidatorFormats\n  | ValidatorFunction<Context>\n  | IValidatorRules<Context>\n\nexport type MultiValidator<Context = any> = ValidatorDescription<Context>[]\n\nexport type Validator<Context = any> =\n  | ValidatorDescription<Context>\n  | MultiValidator<Context>\n\nexport interface IValidatorOptions<Context = any> {\n  validateFirst?: boolean\n  triggerType?: ValidatorTriggerType\n  context?: Context\n}\n"]}