{"version":3,"file":"registry.js","sourceRoot":"","sources":["../src/registry.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FormPath,\n  each,\n  lowerCase,\n  globalThisPolyfill,\n  merge as deepmerge,\n  isFn,\n  isStr,\n} from '@formily/shared'\nimport {\n  ValidatorFunctionResponse,\n  ValidatorFunction,\n  IRegistryFormats,\n  IRegistryLocaleMessages,\n  IRegistryLocales,\n  IRegistryRules,\n} from './types'\n\nconst getIn = FormPath.getIn\n\nconst self: any = globalThisPolyfill\n\nconst defaultLanguage = 'en'\n\nconst getBrowserlanguage = () => {\n  /* istanbul ignore next */\n  if (!self.navigator) {\n    return defaultLanguage\n  }\n  return (\n    self.navigator.browserlanguage || self.navigator.language || defaultLanguage\n  )\n}\n\nconst registry = {\n  locales: {\n    messages: {},\n    language: getBrowserlanguage(),\n  },\n  formats: {},\n  rules: {},\n  template: null,\n}\n\nconst getISOCode = (language: string) => {\n  let isoCode = registry.locales.language\n  if (registry.locales.messages[language]) {\n    return language\n  }\n  const lang = lowerCase(language)\n  each(\n    registry.locales.messages,\n    (messages: IRegistryLocaleMessages, key: string) => {\n      const target = lowerCase(key)\n      if (target.indexOf(lang) > -1 || lang.indexOf(target) > -1) {\n        isoCode = key\n        return false\n      }\n    }\n  )\n  return isoCode\n}\n\nexport const getValidateLocaleIOSCode = getISOCode\n\nexport const setValidateLanguage = (lang: string) => {\n  registry.locales.language = lang || defaultLanguage\n}\n\nexport const getValidateLanguage = () => registry.locales.language\n\nexport const getLocaleByPath = (\n  path: string,\n  lang: string = registry.locales.language\n) => getIn(registry.locales.messages, `${getISOCode(lang)}.${path}`)\n\nexport const getValidateLocale = (path: string) => {\n  const message = getLocaleByPath(path)\n  return (\n    message ||\n    getLocaleByPath('pattern') ||\n    getLocaleByPath('pattern', defaultLanguage)\n  )\n}\n\nexport const getValidateMessageTemplateEngine = () => registry.template\n\nexport const getValidateFormats = (key?: string) =>\n  key ? registry.formats[key] : registry.formats\n\nexport const getValidateRules = <T>(\n  key?: T\n): T extends string\n  ? ValidatorFunction\n  : { [key: string]: ValidatorFunction } =>\n  key ? registry.rules[key as any] : registry.rules\n\nexport const registerValidateLocale = (locale: IRegistryLocales) => {\n  registry.locales.messages = deepmerge(registry.locales.messages, locale)\n}\n\nexport const registerValidateRules = (rules: IRegistryRules) => {\n  each(rules, (rule, key) => {\n    if (isFn(rule)) {\n      registry.rules[key] = rule\n    }\n  })\n}\n\nexport const registerValidateFormats = (formats: IRegistryFormats) => {\n  each(formats, (pattern, key) => {\n    if (isStr(pattern) || pattern instanceof RegExp) {\n      registry.formats[key] = new RegExp(pattern)\n    }\n  })\n}\n\nexport const registerValidateMessageTemplateEngine = (\n  template: (message: ValidatorFunctionResponse, context: any) => any\n) => {\n  registry.template = template\n}\n"]}