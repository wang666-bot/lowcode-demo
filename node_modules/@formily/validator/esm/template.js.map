{"version":3,"file":"template.js","sourceRoot":"","sources":["../src/template.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAA;AAEvD,OAAO,EAAE,gCAAgC,EAAE,MAAM,YAAY,CAAA;AAE7D,MAAM,CAAC,IAAM,MAAM,GAAG,UACpB,MAAuB,EACvB,KAAsB;IAEd,IAAA,OAAO,GAAK,MAAM,QAAX,CAAW;IAC1B,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;QAClB,IAAM,QAAQ,GAAG,gCAAgC,EAAE,CAAA;QACnD,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;YAClB,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;SAC1C;QACD,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CACrC,yBAAyB,EACzB,UAAC,CAAC,EAAE,EAAE;YACJ,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;QAClC,CAAC,CACF,CAAA;KACF;IACD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA","sourcesContent":["import { isFn, isStr, FormPath } from '@formily/shared'\nimport { IValidateResult, IValidatorRules } from './types'\nimport { getValidateMessageTemplateEngine } from './registry'\n\nexport const render = (\n  result: IValidateResult,\n  rules: IValidatorRules\n): IValidateResult => {\n  const { message } = result\n  if (isStr(message)) {\n    const template = getValidateMessageTemplateEngine()\n    if (isFn(template)) {\n      result.message = template(message, rules)\n    }\n    result.message = result.message.replace(\n      /\\{\\{\\s*([\\w.]+)\\s*\\}\\}/g,\n      (_, $0) => {\n        return FormPath.getIn(rules, $0)\n      }\n    )\n  }\n  return result\n}\n"]}