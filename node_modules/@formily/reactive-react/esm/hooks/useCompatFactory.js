var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React from 'react';
import { GarbageCollector } from '../shared';
import { useCompatEffect } from './useCompatEffect';
var ObjectToBeRetainedByReact = /** @class */ (function () {
    function ObjectToBeRetainedByReact() {
    }
    return ObjectToBeRetainedByReact;
}());
function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
}
export var useCompatFactory = function (factory) {
    var instRef = React.useRef(null);
    var gcRef = React.useRef();
    var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];
    if (!instRef.current) {
        instRef.current = factory();
    }
    //StrictMode/ConcurrentMode会导致组件无法正确触发UnMount，所以只能自己做垃圾回收
    if (!gcRef.current) {
        gcRef.current = new GarbageCollector(function () {
            if (instRef.current) {
                instRef.current.dispose();
            }
        });
        gcRef.current.open(objectRetainedByReact);
    }
    useCompatEffect(function () {
        gcRef.current.close();
        return function () {
            if (instRef.current) {
                instRef.current.dispose();
                instRef.current = null;
            }
        };
    }, []);
    return instRef.current;
};
//# sourceMappingURL=useCompatFactory.js.map