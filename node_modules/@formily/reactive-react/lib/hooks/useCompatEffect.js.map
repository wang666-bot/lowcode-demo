{"version":3,"file":"useCompatEffect.js","sourceRoot":"","sources":["../../src/hooks/useCompatEffect.ts"],"names":[],"mappings":";;;AAAA,+BAAyE;AACzE,oCAAqC;AAErC,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAA;AAE3B,IAAM,WAAW,GAAG,UAAC,MAAW,EAAE,MAAW;IAC3C,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;IAC1B,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;IAC1B,IAAI,IAAI,KAAK,IAAI;QAAE,OAAO,KAAK,CAAA;IAC/B,IAAI,IAAI,EAAE;QACR,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,KAAK,CAAA;QACjD,OAAO,MAAM,CAAC,KAAK,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,KAAK,MAAM,CAAC,KAAK,CAAC,EAArB,CAAqB,CAAC,CAAA;KAC3D;IACD,OAAO,MAAM,KAAK,MAAM,CAAA;AAC1B,CAAC,CAAA;AAEM,IAAM,eAAe,GAAG,UAC7B,MAAsB,EACtB,IAAqB;IAErB,IAAM,OAAO,GAAG,IAAA,cAAM,EAAiB,IAAI,CAAC,CAAA;IAC5C,IAAM,UAAU,GAAG,IAAA,cAAM,EAAC,KAAK,CAAC,CAAA;IAChC,IAAA,iBAAS,EAAC;QACR,UAAU,CAAC,OAAO,GAAG,IAAI,CAAA;QACzB,IAAM,OAAO,GAAG,MAAM,EAAE,CAAA;QACxB,OAAO;YACL,UAAU,CAAC,OAAO,GAAG,KAAK,CAAA;YAC1B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBACvC,IAAI,OAAO;oBAAE,OAAO,EAAE,CAAA;gBACtB,OAAM;aACP;YACD,IAAA,kBAAS,EAAC;gBACR,IAAI,UAAU,CAAC,OAAO;oBAAE,OAAM;gBAC9B,IAAI,OAAO;oBAAE,OAAO,EAAE,CAAA;YACxB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;IACH,CAAC,EAAE,IAAI,CAAC,CAAA;IACR,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;AACxB,CAAC,CAAA;AAtBY,QAAA,eAAe,mBAsB3B","sourcesContent":["import { useEffect, useRef, EffectCallback, DependencyList } from 'react'\nimport { immediate } from '../shared'\n\nconst isArr = Array.isArray\n\nconst isEqualDeps = (target: any, source: any) => {\n  const arrA = isArr(target)\n  const arrB = isArr(source)\n  if (arrA !== arrB) return false\n  if (arrA) {\n    if (target.length !== source.length) return false\n    return target.every((val, index) => val === source[index])\n  }\n  return target === source\n}\n\nexport const useCompatEffect = (\n  effect: EffectCallback,\n  deps?: DependencyList\n) => {\n  const depsRef = useRef<DependencyList>(null)\n  const mountedRef = useRef(false)\n  useEffect(() => {\n    mountedRef.current = true\n    const dispose = effect()\n    return () => {\n      mountedRef.current = false\n      if (!isEqualDeps(depsRef.current, deps)) {\n        if (dispose) dispose()\n        return\n      }\n      immediate(() => {\n        if (mountedRef.current) return\n        if (dispose) dispose()\n      })\n    }\n  }, deps)\n  depsRef.current = deps\n}\n"]}