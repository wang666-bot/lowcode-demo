{"version":3,"file":"useObserver.js","sourceRoot":"","sources":["../../src/hooks/useObserver.ts"],"names":[],"mappings":";;;AAAA,8CAA2C;AAE3C,mDAAiD;AACjD,uDAAqD;AAE9C,IAAM,WAAW,GAAG,UACzB,IAAO,EACP,OAA0B;IAE1B,IAAM,WAAW,GAAG,IAAA,+BAAc,GAAE,CAAA;IACpC,IAAM,OAAO,GAAG,IAAA,mCAAgB,EAC9B;QACE,OAAA,IAAI,kBAAO,CAAC;YACV,IAAI,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA,KAAK,UAAU,EAAE;gBAC5C,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;aAC/B;iBAAM;gBACL,WAAW,EAAE,CAAA;aACd;QACH,CAAC,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC;IANxB,CAMwB,CAC3B,CAAA;IACD,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AAC5B,CAAC,CAAA;AAhBY,QAAA,WAAW,eAgBvB","sourcesContent":["import { Tracker } from '@formily/reactive'\nimport { IObserverOptions } from '../types'\nimport { useForceUpdate } from './useForceUpdate'\nimport { useCompatFactory } from './useCompatFactory'\n\nexport const useObserver = <T extends () => any>(\n  view: T,\n  options?: IObserverOptions\n): ReturnType<T> => {\n  const forceUpdate = useForceUpdate()\n  const tracker = useCompatFactory(\n    () =>\n      new Tracker(() => {\n        if (typeof options?.scheduler === 'function') {\n          options.scheduler(forceUpdate)\n        } else {\n          forceUpdate()\n        }\n      }, options?.displayName)\n  )\n  return tracker.track(view)\n}\n"]}