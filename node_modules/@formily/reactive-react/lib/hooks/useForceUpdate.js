"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useForceUpdate = void 0;
var react_1 = require("react");
var useLayoutEffect_1 = require("./useLayoutEffect");
var useDidUpdate_1 = require("./useDidUpdate");
var EMPTY_ARRAY = [];
var RENDER_COUNT = { value: 0 };
var RENDER_QUEUE = new Set();
function useForceUpdate() {
    var _a = __read((0, react_1.useState)([]), 2), setState = _a[1];
    var firstRenderedRef = (0, react_1.useRef)(false);
    var needUpdateRef = (0, react_1.useRef)(false);
    (0, useLayoutEffect_1.useLayoutEffect)(function () {
        firstRenderedRef.current = true;
        if (needUpdateRef.current) {
            setState([]);
            needUpdateRef.current = false;
        }
        return function () {
            firstRenderedRef.current = false;
        };
    }, EMPTY_ARRAY);
    var update = (0, react_1.useCallback)(function () {
        setState([]);
    }, EMPTY_ARRAY);
    var scheduler = (0, react_1.useCallback)(function () {
        if (!firstRenderedRef.current) {
            // 针对StrictMode无法快速回收内存，只能考虑拦截第一次渲染函数的setState，
            // 因为第一次渲染函数的setState会触发第二次渲染函数执行，从而清理掉第二次渲染函数内部的依赖
            needUpdateRef.current = true;
            return;
        }
        if (RENDER_COUNT.value === 0) {
            update();
        }
        else {
            RENDER_QUEUE.add(update);
        }
    }, EMPTY_ARRAY);
    RENDER_COUNT.value++;
    (0, useDidUpdate_1.useDidUpdate)(function () {
        if (RENDER_COUNT.value > 0) {
            RENDER_COUNT.value--;
        }
        if (RENDER_COUNT.value === 0) {
            RENDER_QUEUE.forEach(function (update) {
                RENDER_QUEUE.delete(update);
                update();
            });
        }
    });
    return scheduler;
}
exports.useForceUpdate = useForceUpdate;
//# sourceMappingURL=useForceUpdate.js.map