{"version":3,"file":"observer.js","sourceRoot":"","sources":["../src/observer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAyD;AACzD,oFAA0D;AAC1D,mDAAiD;AAGjD,SAAgB,QAAQ,CAItB,SAAqB,EACrB,OAAiB;IAUjB,IAAM,WAAW,cACf,UAAU,EAAE,KAAK,IACd,OAAO,CACX,CAAA;IAED,IAAM,gBAAgB,GAAG,WAAW,CAAC,UAAU;QAC7C,CAAC,CAAC,IAAA,kBAAU,EAAC,UAAC,KAAU,EAAE,GAAQ;YAC9B,OAAO,IAAA,yBAAW,EAAC,cAAM,OAAA,SAAS,uBAAM,KAAK,KAAE,GAAG,KAAA,IAAG,EAA5B,CAA4B,EAAE,WAAW,CAAC,CAAA;QACrE,CAAC,CAAC;QACJ,CAAC,CAAC,UAAC,KAAU;YACT,OAAO,IAAA,yBAAW,EAAC,cAAM,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB,EAAE,WAAW,CAAC,CAAA;QACzD,CAAC,CAAA;IAEL,IAAM,aAAa,GAAG,IAAA,YAAI,EAAC,gBAAgB,CAAC,CAAA;IAE5C,IAAA,iCAAoB,EAAC,aAAa,EAAE,SAAS,CAAC,CAAA;IAE9C,IAAI,WAAW,CAAC,WAAW,EAAE;QAC3B,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAA;KACpD;IAED,OAAO,aAAa,CAAA;AACtB,CAAC;AArCD,4BAqCC;AAEY,QAAA,QAAQ,GAAG,QAAQ,CAAC,UAAC,KAAqB;IACrD,IAAM,QAAQ,GACZ,OAAO,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAA;IAC1E,OAAO,eAAK,CAAC,aAAa,CAAC,gBAAQ,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AACpD,CAAC,CAAC,CAAA","sourcesContent":["import React, { forwardRef, memo, Fragment } from 'react'\nimport hoistNonReactStatics from 'hoist-non-react-statics'\nimport { useObserver } from './hooks/useObserver'\nimport { IObserverOptions, IObserverProps, ReactFC } from './types'\n\nexport function observer<\n  P,\n  Options extends IObserverOptions = IObserverOptions\n>(\n  component: ReactFC<P>,\n  options?: Options\n): React.MemoExoticComponent<\n  ReactFC<\n    Options extends { forwardRef: true }\n      ? P & {\n          ref?: 'ref' extends keyof P ? P['ref'] : React.RefAttributes<any>\n        }\n      : React.PropsWithoutRef<P>\n  >\n> {\n  const realOptions = {\n    forwardRef: false,\n    ...options,\n  }\n\n  const wrappedComponent = realOptions.forwardRef\n    ? forwardRef((props: any, ref: any) => {\n        return useObserver(() => component({ ...props, ref }), realOptions)\n      })\n    : (props: any) => {\n        return useObserver(() => component(props), realOptions)\n      }\n\n  const memoComponent = memo(wrappedComponent)\n\n  hoistNonReactStatics(memoComponent, component)\n\n  if (realOptions.displayName) {\n    memoComponent.displayName = realOptions.displayName\n  }\n\n  return memoComponent\n}\n\nexport const Observer = observer((props: IObserverProps) => {\n  const children =\n    typeof props.children === 'function' ? props.children() : props.children\n  return React.createElement(Fragment, {}, children)\n})\n"]}