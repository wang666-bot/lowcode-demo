(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@formily/json-schema'), require('react-is')) :
    typeof define === 'function' && define.amd ? define('formily.react', ['exports', '@formily/json-schema', 'react-is'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.Formily = global.Formily || {}, global.Formily.React = {}), global.Formily.JSONSchema));
})(this, (function (exports, jsonSchema) { 'use strict';

    (function() {
        const env = {"NODE_ENV":"development"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    var useAttach = function (target) {
        Formily.ReactiveReact.unstable_useCompatEffect(function () {
            target.onMount();
            return function () { return target.onUnmount(); };
        }, [target]);
        return target;
    };

    var createContextCleaner = function () {
        var contexts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            contexts[_i] = arguments[_i];
        }
        return function (_a) {
            var children = _a.children;
            return contexts.reduce(function (buf, ctx) {
                return React.createElement(ctx.Provider, { value: undefined }, buf);
            }, children);
        };
    };
    var FormContext = React.createContext(null);
    var FieldContext = React.createContext(null);
    var SchemaMarkupContext = React.createContext(null);
    var SchemaContext = React.createContext(null);
    var SchemaExpressionScopeContext = React.createContext(null);
    var SchemaComponentsContext = React.createContext(null);
    var SchemaOptionsContext = React.createContext(null);
    var ContextCleaner = createContextCleaner(FieldContext, SchemaMarkupContext, SchemaContext, SchemaExpressionScopeContext, SchemaComponentsContext, SchemaOptionsContext);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    var useForm = function () {
        return React.useContext(FormContext);
    };

    var useField = function () {
        return React.useContext(FieldContext);
    };

    var useParentForm = function () {
        var field = useField();
        var form = useForm();
        var findObjectParent = function (field) {
            if (!field)
                return form;
            if (Formily.Core.isObjectField(field))
                return field;
            return findObjectParent(field === null || field === void 0 ? void 0 : field.parent);
        };
        return findObjectParent(field);
    };

    var useFieldSchema = function () {
        return React.useContext(SchemaContext);
    };

    var useFormEffects = function (effects) {
        var form = useForm();
        Formily.ReactiveReact.unstable_useCompatFactory(function () {
            var id = Formily.Shared.uid();
            form.addEffects(id, effects);
            return {
                dispose: function () {
                    form.removeEffects(id);
                },
            };
        });
    };

    var useExpressionScope = function () { return React.useContext(SchemaExpressionScopeContext); };

    const _global_ReactIs = ReactIs;

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[_global_ReactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[_global_ReactIs.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (_global_ReactIs.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above


      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }

    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    function mapProps() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return function (target) {
            return Formily.ReactiveReact.observer(function (props) {
                var field = useField();
                var results = args.reduce(function (props, mapper) {
                    if (Formily.Shared.isFn(mapper)) {
                        props = Object.assign(props, mapper(props, field));
                    }
                    else {
                        Formily.Shared.each(mapper, function (to, extract) {
                            var extractValue = Formily.Shared.FormPath.getIn(field, extract);
                            var targetValue = Formily.Shared.isStr(to) ? to : extract;
                            var originalValue = Formily.Shared.FormPath.getIn(props, targetValue);
                            if (extract === 'value') {
                                if (to !== extract) {
                                    delete props.value;
                                }
                            }
                            if (Formily.Shared.isValid(originalValue) && !Formily.Shared.isValid(extractValue))
                                return;
                            Formily.Shared.FormPath.setIn(props, targetValue, extractValue);
                        });
                    }
                    return props;
                }, __assign({}, props));
                return React.createElement(target, results);
            }, {
                forwardRef: true,
            });
        };
    }
    function mapReadPretty(component, readPrettyProps) {
        return function (target) {
            return Formily.ReactiveReact.observer(function (props) {
                var field = useField();
                if (!Formily.Core.isVoidField(field) && (field === null || field === void 0 ? void 0 : field.pattern) === 'readPretty') {
                    return React.createElement(component, __assign(__assign({}, readPrettyProps), props));
                }
                return React.createElement(target, props);
            }, {
                forwardRef: true,
            });
        };
    }
    function connect(target) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var Target = args.reduce(function (target, mapper) {
            return mapper(target);
        }, target);
        var Destination = React.forwardRef(function (props, ref) {
            return React.createElement(Target, __assign(__assign({}, props), { ref: ref }));
        });
        if (target)
            hoistNonReactStatics_cjs(Destination, target);
        return Destination;
    }
    const _global_Formily_ReactiveReact_observer = Formily.ReactiveReact.observer;
    const _global_Formily_ReactiveReact_Observer = Formily.ReactiveReact.Observer;

    var FormProvider = function (props) {
        var form = useAttach(props.form);
        return (React.createElement(ContextCleaner, null,
            React.createElement(FormContext.Provider, { value: form }, props.children)));
    };
    FormProvider.displayName = 'FormProvider';

    var FormConsumer = Formily.ReactiveReact.observer(function (props) {
        var children = Formily.Shared.isFn(props.children) ? props.children(useForm()) : null;
        return React.createElement(React.Fragment, null, children);
    });
    FormConsumer.displayName = 'FormConsumer';

    var mergeChildren = function (children, content) {
        if (!children && !content)
            return;
        if (Formily.Shared.isFn(children))
            return;
        return (React.createElement(React.Fragment, null,
            children,
            content));
    };
    var isValidComponent = function (target) {
        return target && (typeof target === 'object' || typeof target === 'function');
    };
    var renderChildren = function (children, field, form) { return (Formily.Shared.isFn(children) ? children(field, form) : children); };
    var ReactiveInternal = function (props) {
        var _a;
        var components = React.useContext(SchemaComponentsContext);
        if (!props.field) {
            return React.createElement(React.Fragment, null, renderChildren(props.children));
        }
        var field = props.field;
        var content = mergeChildren(renderChildren(props.children, field, field.form), (_a = field.content) !== null && _a !== void 0 ? _a : field.componentProps.children);
        if (field.display !== 'visible')
            return null;
        var getComponent = function (target) {
            var _a;
            return isValidComponent(target)
                ? target
                : (_a = Formily.Shared.FormPath.getIn(components, target)) !== null && _a !== void 0 ? _a : target;
        };
        var renderDecorator = function (children) {
            if (!field.decoratorType) {
                return React.createElement(React.Fragment, null, children);
            }
            return React.createElement(getComponent(field.decoratorType), Formily.Reactive.toJS(field.decoratorProps), children);
        };
        var renderComponent = function () {
            var _a, _b, _c;
            if (!field.componentType)
                return content;
            var value = !Formily.Core.isVoidField(field) ? field.value : undefined;
            var onChange = !Formily.Core.isVoidField(field)
                ? function () {
                    var _a, _b;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    field.onInput.apply(field, __spreadArray([], __read(args), false));
                    (_b = (_a = field.componentProps) === null || _a === void 0 ? void 0 : _a.onChange) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a], __read(args), false));
                }
                : (_a = field.componentProps) === null || _a === void 0 ? void 0 : _a.onChange;
            var onFocus = !Formily.Core.isVoidField(field)
                ? function () {
                    var _a, _b;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    field.onFocus.apply(field, __spreadArray([], __read(args), false));
                    (_b = (_a = field.componentProps) === null || _a === void 0 ? void 0 : _a.onFocus) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a], __read(args), false));
                }
                : (_b = field.componentProps) === null || _b === void 0 ? void 0 : _b.onFocus;
            var onBlur = !Formily.Core.isVoidField(field)
                ? function () {
                    var _a, _b;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    field.onBlur.apply(field, __spreadArray([], __read(args), false));
                    (_b = (_a = field.componentProps) === null || _a === void 0 ? void 0 : _a.onBlur) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a], __read(args), false));
                }
                : (_c = field.componentProps) === null || _c === void 0 ? void 0 : _c.onBlur;
            var disabled = !Formily.Core.isVoidField(field)
                ? field.pattern === 'disabled' || field.pattern === 'readPretty'
                : undefined;
            var readOnly = !Formily.Core.isVoidField(field)
                ? field.pattern === 'readOnly'
                : undefined;
            return React.createElement(getComponent(field.componentType), __assign(__assign({ disabled: disabled, readOnly: readOnly }, Formily.Reactive.toJS(field.componentProps)), { value: value, onChange: onChange, onFocus: onFocus, onBlur: onBlur }), content);
        };
        return renderDecorator(renderComponent());
    };
    ReactiveInternal.displayName = 'ReactiveField';
    var ReactiveField = Formily.ReactiveReact.observer(ReactiveInternal, {
        forwardRef: true,
    });

    var ArrayField = function (props) {
        var form = useForm();
        var parent = useField();
        var field = useAttach(form.createArrayField(__assign({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
        return (React.createElement(FieldContext.Provider, { value: field },
            React.createElement(ReactiveField, { field: field }, props.children)));
    };
    ArrayField.displayName = 'ArrayField';

    var ObjectField = function (props) {
        var form = useForm();
        var parent = useField();
        var field = useAttach(form.createObjectField(__assign({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
        return (React.createElement(FieldContext.Provider, { value: field },
            React.createElement(ReactiveField, { field: field }, props.children)));
    };
    ObjectField.displayName = 'ObjectField';

    var VoidField = function (props) {
        var form = useForm();
        var parent = useField();
        var field = useAttach(form.createVoidField(__assign({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
        return (React.createElement(FieldContext.Provider, { value: field },
            React.createElement(ReactiveField, { field: field }, props.children)));
    };
    VoidField.displayName = 'VoidField';

    var Field = function (props) {
        var form = useForm();
        var parent = useField();
        var field = form.createField(__assign({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props));
        React.useEffect(function () {
            field === null || field === void 0 ? void 0 : field.onMount();
            return function () {
                field === null || field === void 0 ? void 0 : field.onUnmount();
            };
        }, [field]);
        return (React.createElement(FieldContext.Provider, { value: field },
            React.createElement(ReactiveField, { field: field }, props.children)));
    };
    Field.displayName = 'Field';

    var useFieldProps = function (schema) {
        var scope = useExpressionScope();
        return schema.toFieldProps({
            scope: scope,
        });
    };
    var useBasePath = function (props) {
        var parent = useField();
        if (props.onlyRenderProperties) {
            return props.basePath || (parent === null || parent === void 0 ? void 0 : parent.address.concat(props.name));
        }
        return props.basePath || (parent === null || parent === void 0 ? void 0 : parent.address);
    };
    var RecursionField = function (props) {
        var basePath = useBasePath(props);
        var fieldSchema = React.useMemo(function () { return new Formily.JSONSchema.Schema(props.schema); }, [props.schema]);
        var fieldProps = useFieldProps(fieldSchema);
        var renderProperties = function (field) {
            if (props.onlyRenderSelf)
                return;
            var properties = Formily.JSONSchema.Schema.getOrderProperties(fieldSchema);
            if (!properties.length)
                return;
            return (React.createElement(React.Fragment, null, properties.map(function (_a, index) {
                var item = _a.schema, name = _a.key;
                var base = (field === null || field === void 0 ? void 0 : field.address) || basePath;
                var schema = item;
                if (Formily.Shared.isFn(props.mapProperties)) {
                    var mapped = props.mapProperties(item, name);
                    if (mapped) {
                        schema = mapped;
                    }
                }
                if (Formily.Shared.isFn(props.filterProperties)) {
                    if (props.filterProperties(schema, name) === false) {
                        return null;
                    }
                }
                if (Formily.Shared.isBool(props.propsRecursion) && props.propsRecursion) {
                    return (React.createElement(RecursionField, { propsRecursion: true, filterProperties: props.filterProperties, mapProperties: props.mapProperties, schema: schema, key: "".concat(index, "-").concat(name), name: name, basePath: base }));
                }
                return (React.createElement(RecursionField, { schema: schema, key: "".concat(index, "-").concat(name), name: name, basePath: base }));
            })));
        };
        var render = function () {
            if (!Formily.Shared.isValid(props.name))
                return renderProperties();
            if (fieldSchema.type === 'object') {
                if (props.onlyRenderProperties)
                    return renderProperties();
                return (React.createElement(ObjectField, __assign({}, fieldProps, { name: props.name, basePath: basePath }), renderProperties));
            }
            else if (fieldSchema.type === 'array') {
                return (React.createElement(ArrayField, __assign({}, fieldProps, { name: props.name, basePath: basePath })));
            }
            else if (fieldSchema.type === 'void') {
                if (props.onlyRenderProperties)
                    return renderProperties();
                return (React.createElement(VoidField, __assign({}, fieldProps, { name: props.name, basePath: basePath }), renderProperties));
            }
            return React.createElement(Field, __assign({}, fieldProps, { name: props.name, basePath: basePath }));
        };
        if (!fieldSchema)
            return React.createElement(React.Fragment, null);
        return (React.createElement(SchemaContext.Provider, { value: fieldSchema }, render()));
    };

    var ExpressionScope = function (props) {
        var scope = React.useContext(SchemaExpressionScopeContext);
        return (React.createElement(SchemaExpressionScopeContext.Provider, { value: Formily.Shared.lazyMerge(scope, props.value) }, props.children));
    };

    var RecordsScope = function (props) {
        return (React.createElement(ExpressionScope, { value: {
                get $records() {
                    var _a, _b;
                    return (_b = (_a = props.getRecords) === null || _a === void 0 ? void 0 : _a.call(props)) !== null && _b !== void 0 ? _b : [];
                },
            } }, props.children));
    };

    var RecordScope = function (props) {
        var scope = useExpressionScope();
        return (React.createElement(ExpressionScope, { value: {
                get $lookup() {
                    return scope === null || scope === void 0 ? void 0 : scope.$record;
                },
                get $record() {
                    var _a;
                    var record = (_a = props.getRecord) === null || _a === void 0 ? void 0 : _a.call(props);
                    if (typeof record === 'object') {
                        return Formily.Shared.lazyMerge(record, {
                            get $lookup() {
                                return scope === null || scope === void 0 ? void 0 : scope.$record;
                            },
                            get $index() {
                                var _a;
                                return (_a = props.getIndex) === null || _a === void 0 ? void 0 : _a.call(props);
                            },
                        });
                    }
                    return record;
                },
                get $index() {
                    var _a;
                    return (_a = props.getIndex) === null || _a === void 0 ? void 0 : _a.call(props);
                },
            } }, props.children));
    };

    var _a, _b, _c;


    var env$1 = {
        portalDOM: (_b = (_a = Formily.Shared.globalThisPolyfill === null || Formily.Shared.globalThisPolyfill === void 0 ? void 0 : Formily.Shared.globalThisPolyfill.document) === null || _a === void 0 ? void 0 : _a.createElement) === null || _b === void 0 ? void 0 : _b.call(_a, 'div'),
        createPortal: (_c = Formily.Shared.globalThisPolyfill === null || Formily.Shared.globalThisPolyfill === void 0 ? void 0 : Formily.Shared.globalThisPolyfill['ReactDOM']) === null || _c === void 0 ? void 0 : _c.createPortal,
    };
    /* istanbul ignore next */
    var loadCreatePortal = function () {
        var _a, _b;
        if (!env$1.createPortal) {
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                (_a = env$1.createPortal) !== null && _a !== void 0 ? _a : (env$1.createPortal = (_b = require('react-dom')) === null || _b === void 0 ? void 0 : _b.createPortal);
            }
            catch (_c) { }
        }
        if (!env$1.createPortal) {
            try {
                // @ts-ignore
                Promise.resolve(ReactDOM)
                    .then(function (module) { var _a; return ((_a = env$1.createPortal) !== null && _a !== void 0 ? _a : (env$1.createPortal = module === null || module === void 0 ? void 0 : module.createPortal)); })
                    .catch();
            }
            catch (_d) { }
        }
    };
    var render = function (element) {
        var _a;
        if (((_a = Formily.Shared.globalThisPolyfill.navigator) === null || _a === void 0 ? void 0 : _a.product) === 'ReactNative')
            return null;
        if (env$1.portalDOM && env$1.createPortal) {
            return env$1.createPortal(element, env$1.portalDOM);
        }
        else {
            return React.createElement('template', {}, element);
        }
    };
    loadCreatePortal();

    var env = {
        nonameId: 0,
    };
    var getRandomName = function () {
        return "NO_NAME_FIELD_$".concat(env.nonameId++);
    };
    function createSchemaField(options) {
        if (options === void 0) { options = {}; }
        function SchemaField(props) {
            var schema = Formily.JSONSchema.Schema.isSchemaInstance(props.schema)
                ? props.schema
                : new Formily.JSONSchema.Schema(__assign({ type: 'object' }, props.schema));
            var renderMarkup = function () {
                env.nonameId = 0;
                if (props.schema)
                    return null;
                return render(React.createElement(SchemaMarkupContext.Provider, { value: schema }, props.children));
            };
            var renderChildren = function () {
                return React.createElement(RecursionField, __assign({}, props, { schema: schema }));
            };
            return (React.createElement(SchemaOptionsContext.Provider, { value: options },
                React.createElement(SchemaComponentsContext.Provider, { value: Formily.Shared.lazyMerge(options.components, props.components) },
                    React.createElement(ExpressionScope, { value: Formily.Shared.lazyMerge(options.scope, props.scope) },
                        renderMarkup(),
                        renderChildren()))));
        }
        SchemaField.displayName = 'SchemaField';
        function MarkupRender(props) {
            var parent = React.useContext(SchemaMarkupContext);
            if (!parent)
                return React.createElement(React.Fragment, null);
            var renderChildren = function () {
                return React.createElement(React.Fragment, null, props.children);
            };
            var appendArraySchema = function (schema) {
                var items = parent.items;
                if (items && items.name !== props.name) {
                    return parent.addProperty(props.name, schema);
                }
                else {
                    return parent.setItems(schema);
                }
            };
            if (parent.type === 'object' || parent.type === 'void') {
                var schema = parent.addProperty(props.name, props);
                return (React.createElement(SchemaMarkupContext.Provider, { value: schema }, renderChildren()));
            }
            else if (parent.type === 'array') {
                var schema = appendArraySchema(props);
                return (React.createElement(SchemaMarkupContext.Provider, { value: Array.isArray(schema) ? schema[0] : schema }, props.children));
            }
            else {
                return renderChildren();
            }
        }
        function MarkupField(props) {
            return React.createElement(MarkupRender, __assign({}, props, { name: props.name || getRandomName() }));
        }
        MarkupField.displayName = 'MarkupField';
        function StringField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "string" }));
        }
        StringField.displayName = 'StringField';
        function ObjectField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "object" }));
        }
        ObjectField.displayName = 'ObjectField';
        function ArrayField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "array" }));
        }
        ArrayField.displayName = 'ArrayField';
        function BooleanField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "boolean" }));
        }
        BooleanField.displayName = 'BooleanField';
        function NumberField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "number" }));
        }
        NumberField.displayName = 'NumberField';
        function DateField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "date" }));
        }
        DateField.displayName = 'DateField';
        function DateTimeField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "datetime" }));
        }
        DateTimeField.displayName = 'DateTimeField';
        function VoidField(props) {
            return React.createElement(MarkupField, __assign({}, props, { type: "void" }));
        }
        VoidField.displayName = 'VoidField';
        SchemaField.Markup = MarkupField;
        SchemaField.String = StringField;
        SchemaField.Object = ObjectField;
        SchemaField.Array = ArrayField;
        SchemaField.Boolean = BooleanField;
        SchemaField.Date = DateField;
        SchemaField.DateTime = DateTimeField;
        SchemaField.Void = VoidField;
        SchemaField.Number = NumberField;
        return SchemaField;
    }

    exports.ArrayField = ArrayField;
    exports.ContextCleaner = ContextCleaner;
    exports.ExpressionScope = ExpressionScope;
    exports.Field = Field;
    exports.FieldContext = FieldContext;
    exports.FormConsumer = FormConsumer;
    exports.FormContext = FormContext;
    exports.FormProvider = FormProvider;
    exports.ObjectField = ObjectField;
    exports.Observer = _global_Formily_ReactiveReact_Observer;
    exports.RecordScope = RecordScope;
    exports.RecordsScope = RecordsScope;
    exports.RecursionField = RecursionField;
    exports.SchemaComponentsContext = SchemaComponentsContext;
    exports.SchemaContext = SchemaContext;
    exports.SchemaExpressionScopeContext = SchemaExpressionScopeContext;
    exports.SchemaMarkupContext = SchemaMarkupContext;
    exports.SchemaOptionsContext = SchemaOptionsContext;
    exports.VoidField = VoidField;
    exports.connect = connect;
    exports.createSchemaField = createSchemaField;
    exports.mapProps = mapProps;
    exports.mapReadPretty = mapReadPretty;
    exports.observer = _global_Formily_ReactiveReact_observer;
    exports.useExpressionScope = useExpressionScope;
    exports.useField = useField;
    exports.useFieldSchema = useFieldSchema;
    exports.useForm = useForm;
    exports.useFormEffects = useFormEffects;
    exports.useParentForm = useParentForm;
    Object.keys(jsonSchema).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () { return jsonSchema[k]; }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=formily.react.umd.development.js.map
