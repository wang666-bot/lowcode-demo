{"version":3,"file":"formily.react.umd.development.js","sources":["../src/hooks/useAttach.ts","../src/shared/context.ts","../src/hooks/useForm.ts","../src/hooks/useField.ts","../src/hooks/useParentForm.ts","../src/hooks/useFieldSchema.ts","../src/hooks/useFormEffects.ts","../src/hooks/useExpressionScope.ts","../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../src/shared/connect.ts","../src/components/FormProvider.tsx","../src/components/FormConsumer.tsx","../src/components/ReactiveField.tsx","../src/components/ArrayField.tsx","../src/components/ObjectField.tsx","../src/components/VoidField.tsx","../src/components/Field.tsx","../src/components/RecursionField.tsx","../src/components/ExpressionScope.tsx","../src/components/RecordsScope.tsx","../src/components/RecordScope.tsx","../src/shared/render.ts","../src/components/SchemaField.tsx"],"sourcesContent":["import { unstable_useCompatEffect } from '@formily/reactive-react'\ninterface IRecycleTarget {\n  onMount: () => void\n  onUnmount: () => void\n}\n\nexport const useAttach = <T extends IRecycleTarget>(target: T): T => {\n  unstable_useCompatEffect(() => {\n    target.onMount()\n    return () => target.onUnmount()\n  }, [target])\n  return target\n}\n","import React, { createContext } from 'react'\nimport { Form, GeneralField } from '@formily/core'\nimport { Schema } from '@formily/json-schema'\nimport {\n  ISchemaFieldReactFactoryOptions,\n  SchemaReactComponents,\n} from '../types'\n\nconst createContextCleaner = <T>(...contexts: React.Context<T>[]) => {\n  return ({ children }) => {\n    return contexts.reduce((buf, ctx) => {\n      return React.createElement(ctx.Provider, { value: undefined }, buf)\n    }, children)\n  }\n}\n\nexport const FormContext = createContext<Form>(null)\nexport const FieldContext = createContext<GeneralField>(null)\nexport const SchemaMarkupContext = createContext<Schema>(null)\nexport const SchemaContext = createContext<Schema>(null)\nexport const SchemaExpressionScopeContext = createContext<any>(null)\nexport const SchemaComponentsContext =\n  createContext<SchemaReactComponents>(null)\nexport const SchemaOptionsContext =\n  createContext<ISchemaFieldReactFactoryOptions>(null)\n\nexport const ContextCleaner = createContextCleaner(\n  FieldContext,\n  SchemaMarkupContext,\n  SchemaContext,\n  SchemaExpressionScopeContext,\n  SchemaComponentsContext,\n  SchemaOptionsContext\n)\n","import { useContext } from 'react'\nimport { Form } from '@formily/core'\nimport { FormContext } from '../shared'\n\nexport const useForm = <T extends object = any>(): Form<T> => {\n  return useContext(FormContext)\n}\n","import { useContext } from 'react'\nimport { GeneralField } from '@formily/core'\nimport { FieldContext } from '../shared'\n\nexport const useField = <T = GeneralField>(): T => {\n  return useContext(FieldContext) as any\n}\n","import { isObjectField, GeneralField, Form, ObjectField } from '@formily/core'\nimport { useField } from './useField'\nimport { useForm } from './useForm'\n\nexport const useParentForm = (): Form | ObjectField => {\n  const field = useField()\n  const form = useForm()\n  const findObjectParent = (field: GeneralField) => {\n    if (!field) return form\n    if (isObjectField(field)) return field\n    return findObjectParent(field?.parent)\n  }\n  return findObjectParent(field)\n}\n","import { useContext } from 'react'\nimport { SchemaContext } from '../shared'\nimport { Schema } from '@formily/json-schema'\n\nexport const useFieldSchema = (): Schema => {\n  return useContext(SchemaContext)\n}\n","import { unstable_useCompatFactory } from '@formily/reactive-react'\nimport { Form } from '@formily/core'\nimport { uid } from '@formily/shared'\nimport { useForm } from './useForm'\n\nexport const useFormEffects = (effects?: (form: Form) => void) => {\n  const form = useForm()\n  unstable_useCompatFactory(() => {\n    const id = uid()\n    form.addEffects(id, effects)\n    return {\n      dispose() {\n        form.removeEffects(id)\n      },\n    }\n  })\n}\n","import { useContext } from 'react'\nimport { SchemaExpressionScopeContext } from '../shared/context'\n\nexport const useExpressionScope = () => useContext(SchemaExpressionScopeContext)\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","import React from 'react'\nimport { isFn, isStr, FormPath, each, isValid } from '@formily/shared'\nimport { isVoidField } from '@formily/core'\nimport { observer, Observer } from '@formily/reactive-react'\nimport { JSXComponent, IComponentMapper, IStateMapper } from '../types'\nimport { useField } from '../hooks'\nimport hoistNonReactStatics from 'hoist-non-react-statics'\n\nexport function mapProps<T extends JSXComponent>(\n  ...args: IStateMapper<React.ComponentProps<T>>[]\n) {\n  return (target: T) => {\n    return observer(\n      (props: any) => {\n        const field = useField()\n        const results = args.reduce(\n          (props, mapper) => {\n            if (isFn(mapper)) {\n              props = Object.assign(props, mapper(props, field))\n            } else {\n              each(mapper, (to, extract) => {\n                const extractValue = FormPath.getIn(field, extract)\n                const targetValue = isStr(to) ? to : (extract as any)\n                const originalValue = FormPath.getIn(props, targetValue)\n                if (extract === 'value') {\n                  if (to !== extract) {\n                    delete props.value\n                  }\n                }\n                if (isValid(originalValue) && !isValid(extractValue)) return\n                FormPath.setIn(props, targetValue, extractValue)\n              })\n            }\n            return props\n          },\n          { ...props }\n        )\n        return React.createElement(target, results)\n      },\n      {\n        forwardRef: true,\n      }\n    )\n  }\n}\n\nexport function mapReadPretty<T extends JSXComponent, C extends JSXComponent>(\n  component: C,\n  readPrettyProps?: React.ComponentProps<C>\n) {\n  return (target: T) => {\n    return observer(\n      (props) => {\n        const field = useField()\n        if (!isVoidField(field) && field?.pattern === 'readPretty') {\n          return React.createElement(component, {\n            ...readPrettyProps,\n            ...props,\n          })\n        }\n        return React.createElement(target, props)\n      },\n      {\n        forwardRef: true,\n      }\n    )\n  }\n}\n\nexport function connect<T extends JSXComponent>(\n  target: T,\n  ...args: IComponentMapper<T>[]\n) {\n  const Target = args.reduce((target, mapper) => {\n    return mapper(target)\n  }, target)\n\n  const Destination = React.forwardRef(\n    (props: Partial<React.ComponentProps<T>>, ref) => {\n      return React.createElement(Target, { ...props, ref })\n    }\n  )\n\n  if (target) hoistNonReactStatics(Destination, target as any)\n\n  return Destination\n}\n\nexport { observer, Observer }\n","import React from 'react'\nimport { useAttach } from '../hooks/useAttach'\nimport { FormContext, ContextCleaner } from '../shared'\nimport { IProviderProps, ReactFC } from '../types'\n\nexport const FormProvider: ReactFC<IProviderProps> = (props) => {\n  const form = useAttach(props.form)\n  return (\n    <ContextCleaner>\n      <FormContext.Provider value={form}>{props.children}</FormContext.Provider>\n    </ContextCleaner>\n  )\n}\n\nFormProvider.displayName = 'FormProvider'\n","import React, { Fragment } from 'react'\nimport { isFn } from '@formily/shared'\nimport { observer } from '@formily/reactive-react'\nimport { useForm } from '../hooks'\nimport { IFormSpyProps, ReactFC } from '../types'\n\nexport const FormConsumer: ReactFC<IFormSpyProps> = observer((props) => {\n  const children = isFn(props.children) ? props.children(useForm()) : null\n  return <Fragment>{children}</Fragment>\n})\n\nFormConsumer.displayName = 'FormConsumer'\n","import React, { Fragment, useContext } from 'react'\nimport { toJS } from '@formily/reactive'\nimport { observer } from '@formily/reactive-react'\nimport { FormPath, isFn } from '@formily/shared'\nimport { isVoidField, GeneralField, Form } from '@formily/core'\nimport { SchemaComponentsContext } from '../shared'\nimport { RenderPropsChildren } from '../types'\ninterface IReactiveFieldProps {\n  field: GeneralField\n  children?: RenderPropsChildren<GeneralField>\n}\n\nconst mergeChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  content: React.ReactNode\n) => {\n  if (!children && !content) return\n  if (isFn(children)) return\n  return (\n    <Fragment>\n      {children}\n      {content}\n    </Fragment>\n  )\n}\n\nconst isValidComponent = (target: any) =>\n  target && (typeof target === 'object' || typeof target === 'function')\n\nconst renderChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  field?: GeneralField,\n  form?: Form\n) => (isFn(children) ? children(field, form) : children)\n\nconst ReactiveInternal: React.FC<IReactiveFieldProps> = (props) => {\n  const components = useContext(SchemaComponentsContext)\n  if (!props.field) {\n    return <Fragment>{renderChildren(props.children)}</Fragment>\n  }\n  const field = props.field\n  const content = mergeChildren(\n    renderChildren(props.children, field, field.form),\n    field.content ?? field.componentProps.children\n  )\n  if (field.display !== 'visible') return null\n\n  const getComponent = (target: any) => {\n    return isValidComponent(target)\n      ? target\n      : FormPath.getIn(components, target) ?? target\n  }\n\n  const renderDecorator = (children: React.ReactNode) => {\n    if (!field.decoratorType) {\n      return <Fragment>{children}</Fragment>\n    }\n\n    return React.createElement(\n      getComponent(field.decoratorType),\n      toJS(field.decoratorProps),\n      children\n    )\n  }\n\n  const renderComponent = () => {\n    if (!field.componentType) return content\n    const value = !isVoidField(field) ? field.value : undefined\n    const onChange = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onInput(...args)\n          field.componentProps?.onChange?.(...args)\n        }\n      : field.componentProps?.onChange\n    const onFocus = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onFocus(...args)\n          field.componentProps?.onFocus?.(...args)\n        }\n      : field.componentProps?.onFocus\n    const onBlur = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onBlur(...args)\n          field.componentProps?.onBlur?.(...args)\n        }\n      : field.componentProps?.onBlur\n    const disabled = !isVoidField(field)\n      ? field.pattern === 'disabled' || field.pattern === 'readPretty'\n      : undefined\n    const readOnly = !isVoidField(field)\n      ? field.pattern === 'readOnly'\n      : undefined\n    return React.createElement(\n      getComponent(field.componentType),\n      {\n        disabled,\n        readOnly,\n        ...toJS(field.componentProps),\n        value,\n        onChange,\n        onFocus,\n        onBlur,\n      },\n      content\n    )\n  }\n\n  return renderDecorator(renderComponent())\n}\n\nReactiveInternal.displayName = 'ReactiveField'\n\nexport const ReactiveField = observer(ReactiveInternal, {\n  forwardRef: true,\n})\n","import React from 'react'\nimport { ArrayField as ArrayFieldType } from '@formily/core'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\nimport { ReactiveField } from './ReactiveField'\n\nexport const ArrayField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C, ArrayFieldType>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createArrayField({\n      basePath: parent?.address,\n      ...props,\n    })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nArrayField.displayName = 'ArrayField'\n","import React from 'react'\nimport { ObjectField as ObjectFieldType } from '@formily/core'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\n\nexport const ObjectField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C, ObjectFieldType>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createObjectField({ basePath: parent?.address, ...props })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nObjectField.displayName = 'ObjectField'\n","import React from 'react'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IVoidFieldProps } from '../types'\n\nexport const VoidField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IVoidFieldProps<D, C>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createVoidField({ basePath: parent?.address, ...props })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nVoidField.displayName = 'VoidField'\n","import React, { useEffect } from 'react'\nimport { useField, useForm } from '../hooks'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\n\nexport const Field = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = form.createField({ basePath: parent?.address, ...props })\n  useEffect(() => {\n    field?.onMount()\n    return () => {\n      field?.onUnmount()\n    }\n  }, [field])\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nField.displayName = 'Field'\n","import React, { Fragment, useMemo } from 'react'\nimport { isBool, isFn, isValid } from '@formily/shared'\nimport { GeneralField } from '@formily/core'\nimport { Schema } from '@formily/json-schema'\nimport { SchemaContext } from '../shared'\nimport { IRecursionFieldProps, ReactFC } from '../types'\nimport { useField, useExpressionScope } from '../hooks'\nimport { ObjectField } from './ObjectField'\nimport { ArrayField } from './ArrayField'\nimport { Field } from './Field'\nimport { VoidField } from './VoidField'\n\nconst useFieldProps = (schema: Schema) => {\n  const scope = useExpressionScope()\n  return schema.toFieldProps({\n    scope,\n  }) as any\n}\n\nconst useBasePath = (props: IRecursionFieldProps) => {\n  const parent = useField()\n  if (props.onlyRenderProperties) {\n    return props.basePath || parent?.address.concat(props.name)\n  }\n  return props.basePath || parent?.address\n}\n\nexport const RecursionField: ReactFC<IRecursionFieldProps> = (props) => {\n  const basePath = useBasePath(props)\n  const fieldSchema = useMemo(() => new Schema(props.schema), [props.schema])\n  const fieldProps = useFieldProps(fieldSchema)\n  const renderProperties = (field?: GeneralField) => {\n    if (props.onlyRenderSelf) return\n    const properties = Schema.getOrderProperties(fieldSchema)\n    if (!properties.length) return\n    return (\n      <Fragment>\n        {properties.map(({ schema: item, key: name }, index) => {\n          const base = field?.address || basePath\n          let schema: Schema = item\n          if (isFn(props.mapProperties)) {\n            const mapped = props.mapProperties(item, name)\n            if (mapped) {\n              schema = mapped\n            }\n          }\n          if (isFn(props.filterProperties)) {\n            if (props.filterProperties(schema, name) === false) {\n              return null\n            }\n          }\n          if (isBool(props.propsRecursion) && props.propsRecursion) {\n            return (\n              <RecursionField\n                propsRecursion={true}\n                filterProperties={props.filterProperties}\n                mapProperties={props.mapProperties}\n                schema={schema}\n                key={`${index}-${name}`}\n                name={name}\n                basePath={base}\n              />\n            )\n          }\n          return (\n            <RecursionField\n              schema={schema}\n              key={`${index}-${name}`}\n              name={name}\n              basePath={base}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  const render = () => {\n    if (!isValid(props.name)) return renderProperties()\n    if (fieldSchema.type === 'object') {\n      if (props.onlyRenderProperties) return renderProperties()\n      return (\n        <ObjectField {...fieldProps} name={props.name} basePath={basePath}>\n          {renderProperties}\n        </ObjectField>\n      )\n    } else if (fieldSchema.type === 'array') {\n      return (\n        <ArrayField {...fieldProps} name={props.name} basePath={basePath} />\n      )\n    } else if (fieldSchema.type === 'void') {\n      if (props.onlyRenderProperties) return renderProperties()\n      return (\n        <VoidField {...fieldProps} name={props.name} basePath={basePath}>\n          {renderProperties}\n        </VoidField>\n      )\n    }\n    return <Field {...fieldProps} name={props.name} basePath={basePath} />\n  }\n\n  if (!fieldSchema) return <Fragment />\n\n  return (\n    <SchemaContext.Provider value={fieldSchema}>\n      {render()}\n    </SchemaContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { SchemaExpressionScopeContext } from '../shared'\nimport { IExpressionScopeProps, ReactFC } from '../types'\n\nexport const ExpressionScope: ReactFC<IExpressionScopeProps> = (props) => {\n  const scope = useContext(SchemaExpressionScopeContext)\n  return (\n    <SchemaExpressionScopeContext.Provider\n      value={lazyMerge(scope, props.value)}\n    >\n      {props.children}\n    </SchemaExpressionScopeContext.Provider>\n  )\n}\n","import React from 'react'\nimport { ExpressionScope } from './ExpressionScope'\nimport { ReactFC, IRecordsScopeProps } from '../types'\n\nexport const RecordsScope: ReactFC<IRecordsScopeProps> = (props) => {\n  return (\n    <ExpressionScope\n      value={{\n        get $records() {\n          return props.getRecords?.() ?? []\n        },\n      }}\n    >\n      {props.children}\n    </ExpressionScope>\n  )\n}\n","import React from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { ExpressionScope } from './ExpressionScope'\nimport { ReactFC, IRecordScopeProps } from '../types'\nimport { useExpressionScope } from '../hooks'\n\nexport const RecordScope: ReactFC<IRecordScopeProps> = (props) => {\n  const scope = useExpressionScope()\n  return (\n    <ExpressionScope\n      value={{\n        get $lookup() {\n          return scope?.$record\n        },\n        get $record() {\n          const record = props.getRecord?.()\n          if (typeof record === 'object') {\n            return lazyMerge(record, {\n              get $lookup() {\n                return scope?.$record\n              },\n              get $index() {\n                return props.getIndex?.()\n              },\n            })\n          }\n          return record\n        },\n        get $index() {\n          return props.getIndex?.()\n        },\n      }}\n    >\n      {props.children}\n    </ExpressionScope>\n  )\n}\n","import React, { ReactNode, ReactPortal } from 'react'\nimport { globalThisPolyfill } from '@formily/shared'\n\ninterface Env {\n  portalDOM?: HTMLDivElement\n  createPortal?: (children: ReactNode, container: Element) => ReactPortal\n}\n\nconst env: Env = {\n  portalDOM: globalThisPolyfill?.document?.createElement?.('div'),\n  createPortal: globalThisPolyfill?.['ReactDOM']?.createPortal,\n}\n\n/* istanbul ignore next */\nconst loadCreatePortal = () => {\n  if (!env.createPortal) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      env.createPortal ??= require('react-dom')?.createPortal\n    } catch {}\n  }\n  if (!env.createPortal) {\n    try {\n      // @ts-ignore\n      import('react-dom')\n        .then((module) => (env.createPortal ??= module?.createPortal))\n        .catch()\n    } catch {}\n  }\n}\n\nexport const render = (element: React.ReactElement) => {\n  if (globalThisPolyfill.navigator?.product === 'ReactNative') return null\n  if (env.portalDOM && env.createPortal) {\n    return env.createPortal(element, env.portalDOM)\n  } else {\n    return React.createElement('template', {}, element)\n  }\n}\n\nloadCreatePortal()\n","import React, { useContext, Fragment } from 'react'\nimport { ISchema, Schema } from '@formily/json-schema'\nimport { RecursionField } from './RecursionField'\nimport { render } from '../shared/render'\nimport {\n  SchemaMarkupContext,\n  SchemaOptionsContext,\n  SchemaComponentsContext,\n} from '../shared'\nimport {\n  ReactComponentPath,\n  JSXComponent,\n  ISchemaFieldReactFactoryOptions,\n  SchemaReactComponents,\n  ISchemaFieldProps,\n  ISchemaMarkupFieldProps,\n  ISchemaTypeFieldProps,\n} from '../types'\nimport { lazyMerge } from '@formily/shared'\nimport { ExpressionScope } from './ExpressionScope'\nconst env = {\n  nonameId: 0,\n}\n\nconst getRandomName = () => {\n  return `NO_NAME_FIELD_$${env.nonameId++}`\n}\n\nexport function createSchemaField<Components extends SchemaReactComponents>(\n  options: ISchemaFieldReactFactoryOptions<Components> = {}\n) {\n  function SchemaField<\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(props: ISchemaFieldProps<Decorator, Component>) {\n    const schema = Schema.isSchemaInstance(props.schema)\n      ? props.schema\n      : new Schema({\n          type: 'object',\n          ...props.schema,\n        })\n    const renderMarkup = () => {\n      env.nonameId = 0\n      if (props.schema) return null\n      return render(\n        <SchemaMarkupContext.Provider value={schema}>\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    }\n\n    const renderChildren = () => {\n      return <RecursionField {...props} schema={schema} />\n    }\n\n    return (\n      <SchemaOptionsContext.Provider value={options}>\n        <SchemaComponentsContext.Provider\n          value={lazyMerge(options.components, props.components)}\n        >\n          <ExpressionScope value={lazyMerge(options.scope, props.scope)}>\n            {renderMarkup()}\n            {renderChildren()}\n          </ExpressionScope>\n        </SchemaComponentsContext.Provider>\n      </SchemaOptionsContext.Provider>\n    )\n  }\n\n  SchemaField.displayName = 'SchemaField'\n\n  function MarkupRender(props: any) {\n    const parent = useContext(SchemaMarkupContext)\n    if (!parent) return <Fragment />\n    const renderChildren = () => {\n      return <React.Fragment>{props.children}</React.Fragment>\n    }\n    const appendArraySchema = (schema: ISchema) => {\n      const items = parent.items as Schema\n      if (items && items.name !== props.name) {\n        return parent.addProperty(props.name, schema)\n      } else {\n        return parent.setItems(schema)\n      }\n    }\n    if (parent.type === 'object' || parent.type === 'void') {\n      const schema = parent.addProperty(props.name, props)\n      return (\n        <SchemaMarkupContext.Provider value={schema}>\n          {renderChildren()}\n        </SchemaMarkupContext.Provider>\n      )\n    } else if (parent.type === 'array') {\n      const schema = appendArraySchema(props)\n      return (\n        <SchemaMarkupContext.Provider\n          value={Array.isArray(schema) ? schema[0] : schema}\n        >\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    } else {\n      return renderChildren()\n    }\n  }\n\n  function MarkupField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaMarkupFieldProps<Components, Component, Decorator>) {\n    return <MarkupRender {...props} name={props.name || getRandomName()} />\n  }\n\n  MarkupField.displayName = 'MarkupField'\n\n  function StringField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"string\" />\n  }\n\n  StringField.displayName = 'StringField'\n\n  function ObjectField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"object\" />\n  }\n\n  ObjectField.displayName = 'ObjectField'\n\n  function ArrayField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"array\" />\n  }\n\n  ArrayField.displayName = 'ArrayField'\n  function BooleanField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"boolean\" />\n  }\n\n  BooleanField.displayName = 'BooleanField'\n\n  function NumberField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"number\" />\n  }\n\n  NumberField.displayName = 'NumberField'\n\n  function DateField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"date\" />\n  }\n\n  DateField.displayName = 'DateField'\n\n  function DateTimeField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"datetime\" />\n  }\n\n  DateTimeField.displayName = 'DateTimeField'\n\n  function VoidField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"void\" />\n  }\n\n  VoidField.displayName = 'VoidField'\n\n  SchemaField.Markup = MarkupField\n  SchemaField.String = StringField\n  SchemaField.Object = ObjectField\n  SchemaField.Array = ArrayField\n  SchemaField.Boolean = BooleanField\n  SchemaField.Date = DateField\n  SchemaField.DateTime = DateTimeField\n  SchemaField.Void = VoidField\n  SchemaField.Number = NumberField\n\n  return SchemaField\n}\n"],"names":["reactIs","hoistNonReactStatics","env"],"mappings":";;;;;;;;;;;;;;;;;;IAMA,IAAA,SAAA,GAAA,UAAA,MAAA,EAAA;IACE,IAAA,OAAwB,CAAA,aAAA,CAAA,wBAAA,CAAA,YAAA;;;IAGxB,KAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IACA,IAAA,OAAA,MAAA,CAAA;IACF,CAAA;;ICJA,IAAA,oBAAA,GAAA,YAAA;;;;;IACE,IAAA,OAAA,UAAA,EAAA,EAAA;IAAU,QAAA,IAAA,QAAA,GAAA,EAAA,CAAA,QAAA,CAAA;IACR,QAAA,OAAA,QAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA,EAAA;IACE,YAAA,OAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,GAAA,CAAA,CAAA;;IAEJ,KAAA,CAAA;IACF,CAAA,CAAA;AAEA,QAAA,WAAA,GAA2B,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AACxC,QAAA,YAAA,GAA4B,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AACzC,QAAA,mBAAA,GAAmC,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AAChD,QAAA,aAAA,GAA6B,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AAC1C,QAAA,4BAAA,GAA4C,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AACzD,QAAA,uBAAA,GACE,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AACf,QAAA,oBAAA,GACE,KAAa,CAAA,aAAA,CAAA,IAAA,EAAA;AAEf,QAAA,cAAA,GAAA,oBAAA,CAAA,YAAA,EAAA,mBAAA,EAAA,aAAA,EAAA,4BAAA,EAAA,uBAAA,EAAA,oBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA,QAAA,OAAA,GAAA,YAAA;IACE,IAAA,OAAO,KAAU,CAAA,UAAA,CAAA,WAAA,CAAA,CAAA;IACnB;;ACFA,QAAA,QAAA,GAAA,YAAA;IACE,IAAA,OAAO,KAAU,CAAA,UAAA,CAAA,YAAA,CAAA,CAAA;IACnB;;ACFA,QAAA,aAAA,GAAA,YAAA;IACE,IAAA,IAAA,KAAA,GAAA,QAAA,EAAA,CAAA;IACA,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;;IAEE,QAAA,IAAA,CAAA,KAAA;IAAY,YAAA,OAAA,IAAA,CAAA;gBACR,OAAa,CAAA,IAAA,CAAA,aAAA,CAAA,KAAA,CAAA;IAAS,YAAA,OAAA,KAAA,CAAA;;IAE5B,KAAA,CAAA;IACA,IAAA,OAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;IACF;;ACTA,QAAA,cAAA,GAAA,YAAA;IACE,IAAA,OAAO,KAAU,CAAA,UAAA,CAAA,aAAA,CAAA,CAAA;IACnB;;ACDA,QAAA,cAAA,GAAA,UAAA,OAAA,EAAA;IACE,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;IACA,IAAA,OAAyB,CAAA,aAAA,CAAA,yBAAA,CAAA,YAAA;IACvB,QAAA,IAAA,EAAA,GAAW,OAAG,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA;IACd,QAAA,IAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA;;;IAGI,gBAAA,IAAA,CAAA,aAAA,CAAA,EAAA,CAAA,CAAA;;;IAGN,KAAA,CAAA,CAAA;IACF;;ACbA,QAAA,kBAAA,GAAA,YAAA,EAAA,OAAwC,KAAU,CAAA,UAAA,CAAA,4BAAA,CAAA,CAAA;;;;ICClD;IACA;IACA;IACA;IACA,IAAI,aAAa,GAAG;IACpB,EAAE,iBAAiB,EAAE,IAAI;IACzB,EAAE,WAAW,EAAE,IAAI;IACnB,EAAE,YAAY,EAAE,IAAI;IACpB,EAAE,YAAY,EAAE,IAAI;IACpB,EAAE,WAAW,EAAE,IAAI;IACnB,EAAE,eAAe,EAAE,IAAI;IACvB,EAAE,wBAAwB,EAAE,IAAI;IAChC,EAAE,wBAAwB,EAAE,IAAI;IAChC,EAAE,MAAM,EAAE,IAAI;IACd,EAAE,SAAS,EAAE,IAAI;IACjB,EAAE,IAAI,EAAE,IAAI;IACZ,CAAC,CAAC;IACF,IAAI,aAAa,GAAG;IACpB,EAAE,IAAI,EAAE,IAAI;IACZ,EAAE,MAAM,EAAE,IAAI;IACd,EAAE,SAAS,EAAE,IAAI;IACjB,EAAE,MAAM,EAAE,IAAI;IACd,EAAE,MAAM,EAAE,IAAI;IACd,EAAE,SAAS,EAAE,IAAI;IACjB,EAAE,KAAK,EAAE,IAAI;IACb,CAAC,CAAC;IACF,IAAI,mBAAmB,GAAG;IAC1B,EAAE,UAAU,EAAE,IAAI;IAClB,EAAE,MAAM,EAAE,IAAI;IACd,EAAE,YAAY,EAAE,IAAI;IACpB,EAAE,WAAW,EAAE,IAAI;IACnB,EAAE,SAAS,EAAE,IAAI;IACjB,CAAC,CAAC;IACF,IAAI,YAAY,GAAG;IACnB,EAAE,UAAU,EAAE,IAAI;IAClB,EAAE,OAAO,EAAE,IAAI;IACf,EAAE,YAAY,EAAE,IAAI;IACpB,EAAE,WAAW,EAAE,IAAI;IACnB,EAAE,SAAS,EAAE,IAAI;IACjB,EAAE,IAAI,EAAE,IAAI;IACZ,CAAC,CAAC;IACF,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,YAAY,CAACA,eAAO,CAAC,UAAU,CAAC,GAAG,mBAAmB,CAAC;IACvD,YAAY,CAACA,eAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;AAC1C;IACA,SAAS,UAAU,CAAC,SAAS,EAAE;IAC/B;IACA,EAAE,IAAIA,eAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;IACjC,IAAI,OAAO,YAAY,CAAC;IACxB,GAAG;AACH;AACA;IACA,EAAE,OAAO,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,aAAa,CAAC;IAC9D,CAAC;AACD;IACA,IAAI,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;IAC3C,IAAI,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;IACrD,IAAI,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC;IACzD,IAAI,wBAAwB,GAAG,MAAM,CAAC,wBAAwB,CAAC;IAC/D,IAAI,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;IAC3C,IAAI,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC;IACvC,SAAS,oBAAoB,CAAC,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE;IAC3E,EAAE,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;IAC3C;IACA,IAAI,IAAI,eAAe,EAAE;IACzB,MAAM,IAAI,kBAAkB,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC;AAC/D;IACA,MAAM,IAAI,kBAAkB,IAAI,kBAAkB,KAAK,eAAe,EAAE;IACxE,QAAQ,oBAAoB,CAAC,eAAe,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAC7E,OAAO;IACP,KAAK;AACL;IACA,IAAI,IAAI,IAAI,GAAG,mBAAmB,CAAC,eAAe,CAAC,CAAC;AACpD;IACA,IAAI,IAAI,qBAAqB,EAAE;IAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC;IACjE,KAAK;AACL;IACA,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;IACpD,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;AACpD;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IAC1C,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB;IACA,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,aAAa,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,aAAa,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;IACrJ,QAAQ,IAAI,UAAU,GAAG,wBAAwB,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AACxE;IACA,QAAQ,IAAI;IACZ;IACA,UAAU,cAAc,CAAC,eAAe,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;IAC3D,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE;IACtB,OAAO;IACP,KAAK;IACL,GAAG;AACH;IACA,EAAE,OAAO,eAAe,CAAC;IACzB,CAAC;AACD;IACA,IAAA,wBAAc,GAAG,oBAAoB;;IC9FrC,SAAA,QAAA,GAAA;;;;;IAGE,IAAA,OAAA,UAAA,MAAA,EAAA;mBACS,OAAQ,CAAA,aAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;IAEX,YAAA,IAAA,KAAA,GAAA,QAAA,EAAA,CAAA;;IAGI,gBAAA,IAAI,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA;IACN,oBAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACD,iBAAA;IAAM,qBAAA;IACL,oBAAA,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA,UAAA,EAAA,EAAA,OAAA,EAAA;+CACmB,OAAQ,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,EAAA,OAAA,CAAA,CAAA;IAC7B,wBAAA,IAAA,WAAA,GAAoB,OAAK,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,CAAA,GAAA,EAAA,GAAA,OAAA,CAAA;gDACH,OAAQ,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,EAAA,WAAA,CAAA,CAAA;;;;IAI3B,6BAAA;IACF,yBAAA;4BACG,IAAA,OAAA,CAAA,MAAA,CAAA,OAAO,oBAAoB,OAAO,CAAA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA;;4BACtC,OAAQ,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,EAAA,WAAA,EAAA,YAAA,CAAA,CAAA;IACV,qBAAA,CAAA,CAAA;IACD,iBAAA;IACD,gBAAA,OAAA,KAAA,CAAA;;;IAKN,SAAA,EAAA;IAEE,YAAA,UAAA,EAAA,IAAA;IACD,SAAA,CAAA,CAAA;IAEL,KAAA,CAAA;IACF,CAAA;IAEA,SAAA,aAAA,CAAA,SAAA,EAAA,eAAA,EAAA;IAIE,IAAA,OAAA,UAAA,MAAA,EAAA;mBACS,OAAQ,CAAA,aAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;IAEX,YAAA,IAAA,KAAA,GAAA,QAAA,EAAA,CAAA;IACA,YAAA,IAAA,CAAK,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,MAAA,YAAA,EAAA;;IAKf,aAAA;;IAEH,SAAA,EAAA;IAEE,YAAA,UAAA,EAAA,IAAA;IACD,SAAA,CAAA,CAAA;IAEL,KAAA,CAAA;IACF,CAAA;IAEA,SAAA,OAAA,CAAA,MAAA,EAAA;;;;;;IAKI,QAAA,OAAA,MAAA,CAAA,MAAA,CAAA,CAAA;;;;IAMA,KAAA,CAAA,CAAA;IAGF,IAAA,IAAA,MAAA;IAAY,QAAAC,wBAAA,CAAA,WAAA,EAAA,MAAA,CAAA,CAAA;IAEZ,IAAA,OAAA,WAAA,CAAA;IACF,CAAA;;;;ACjFA,QAAA,YAAA,GAAA,UAAA,KAAA,EAAA;;;IAIM,QAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAGN,EAAA;IAEA,YAAA,CAAA,WAAA,GAAA,cAAA;;ACRA,QAAA,YAAA,GAAoD,OAAQ,CAAA,aAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;uBACzC,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,KAAA,CAAA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,IAAA,CAAA;IACrB,IAAA,OAAA,KAAA,CAAA,aAAA,CAAQ,KAAQ,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,CAAA,CAAA;IAClB,CAAA,EAAA;IAEA,YAAA,CAAA,WAAA,GAAA,cAAA;;ICCA,IAAA,aAAA,GAAA,UAAA,QAAA,EAAA,OAAA,EAAA;IAIE,IAAA,IAAA,CAAA,QAAA,IAAA,CAAA,OAAA;;YACI,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA;;oCAEL,KAAQ,CAAA,QAAA,EAAA,IAAA;;;IAKb,CAAA,CAAA;IAEA,IAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;IACE,IAAA,OAAA,MAAA,KAAA,OAAA,MAAA,KAAA,QAAA,IAAA,OAAA,MAAA,KAAA,UAAA,CAAA,CAAA;IAAA,CAAA,CAAA;IAEF,IAAA,cAAA,GAAA,UAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,QAIM,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA,KAAA,EAAA,IAAA,CAAA,GAAA,QAAA,EAAA,EAAA,CAAA;IAEV,IAAA,gBAAA,GAAA,UAAA,KAAA,EAAA;;IACE,IAAA,IAAA,UAAA,GAAmB,KAAU,CAAA,UAAA,CAAA,uBAAA,CAAA,CAAA;IAC7B,IAAA,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA;uCACU,KAAQ,CAAA,QAAA,EAAA,IAAA,EAAA,cAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA;IACjB,KAAA;IACD,IAAA,IAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA;IACA,IAAA,IAAA,OAAA,GAAA,aAAA,CAAA,cAAA,CAAA,KAAA,CAAA,QAAA,EAAA,KAAA,EAAA,KAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,GAAA,KAAA,CAAA,OAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,KAAA,CAAA,cAAA,CAAA,QAAA,CAAA,CAAA;IAIA,IAAA,IAAA,KAAA,CAAA,OAAA,KAAA,SAAA;IAAiC,QAAA,OAAA,IAAA,CAAA;;;;IAI7B,cAAA,MAAA;IACA,cAAA,CAAA,EAAA,GAAE,OAAQ,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,UAAA,EAAA,MAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,MAAA,CAAA;IACd,KAAA,CAAA;;IAGE,QAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA;IACE,YAAA,OAAA,KAAA,CAAA,aAAA,CAAQ,KAAQ,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,CAAA,CAAA;IACjB,SAAA;0EAIC,OAAI,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA,CAAA,EAAA,QAAA,CAAA,CAAA;IAGR,KAAA,CAAA;IAEA,IAAA,IAAA,eAAA,GAAA,YAAA;;;IAC4B,YAAA,OAAA,OAAA,CAAA;IAC1B,QAAA,IAAA,KAAA,GAAA,CAAe,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,KAAA,GAAA,SAAA,CAAA;IAC1B,QAAA,IAAA,QAAA,GAAA,CAAkB,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;IAC3B,cAAA,YAAA;;;;;;IACI,gBAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;;IAGJ,cAAA,CAAA,EAAA,GAAA,KAAA,CAAA,cAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,CAAA;IACF,QAAA,IAAA,OAAA,GAAA,CAAiB,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;IAC1B,cAAA,YAAA;;;;;;IACI,gBAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;;IAGJ,cAAA,CAAA,EAAA,GAAA,KAAA,CAAA,cAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAA;IACF,QAAA,IAAA,MAAA,GAAA,CAAgB,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;IACzB,cAAA,YAAA;;;;;;IACI,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;;IAGJ,cAAA,CAAA,EAAA,GAAA,KAAA,CAAA,cAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAA;IACF,QAAA,IAAA,QAAA,GAAA,CAAkB,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;;;IAG7B,QAAA,IAAA,QAAA,GAAA,CAAkB,OAAW,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;IAC3B,cAAA,KAAA,CAAA,OAAA,KAAA,UAAA;;IAEF,QAAA,OAAA,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,KAAA,CAAA,aAAA,CAAA,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAKO,OAAI,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA,CAAA,CAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,CAAA,EAAA,OAAA,CAAA,CAAA;IAQb,KAAA,CAAA;IAEA,IAAA,OAAA,eAAA,CAAA,eAAA,EAAA,CAAA,CAAA;IACF,CAAA,CAAA;IAEA,gBAAA,CAAA,WAAA,GAAA,eAAA,CAAA;IAEA,IAAA,aAAA,GAA6B,OAAQ,CAAA,aAAA,CAAA,QAAA,CAAA,gBAAA,EAAA;IACnC,IAAA,UAAA,EAAA,IAAA;IACD,CAAA,CAAA;;AC1GD,QAAA,UAAA,GAAA,UAAA,KAAA,EAAA;IAGE,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;IACA,IAAA,IAAA,MAAA,GAAA,QAAA,EAAA,CAAA;;;IASI,QAAA,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAGN,EAAA;IAEA,UAAA,CAAA,WAAA,GAAA,YAAA;;AClBA,QAAA,WAAA,GAAA,UAAA,KAAA,EAAA;IAGE,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;IACA,IAAA,IAAA,MAAA,GAAA,QAAA,EAAA,CAAA;;;IAMI,QAAA,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAGN,EAAA;IAEA,WAAA,CAAA,WAAA,GAAA,aAAA;;AChBA,QAAA,SAAA,GAAA,UAAA,KAAA,EAAA;IAGE,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;IACA,IAAA,IAAA,MAAA,GAAA,QAAA,EAAA,CAAA;;;IAMI,QAAA,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAGN,EAAA;IAEA,SAAA,CAAA,WAAA,GAAA,WAAA;;AChBA,QAAA,KAAA,GAAA,UAAA,KAAA,EAAA;IAGE,IAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;IACA,IAAA,IAAA,MAAA,GAAA,QAAA,EAAA,CAAA;IACA,IAAA,IAAA,KAAA,GAAA,IAAA,CAAA,WAAA,CAAA,QAAA,CAAA,EAAA,QAAA,EAAA,MAAA,KAAA,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACA,IAAA,KAAS,CAAA,SAAA,CAAA,YAAA;IACP,QAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,CAAA;;IAEE,YAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,SAAA,EAAA,CAAA;IACF,SAAA,CAAA;IACF,KAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;IAGI,QAAA,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAGN,EAAA;IAEA,KAAA,CAAA,WAAA,GAAA,OAAA;;ICbA,IAAA,aAAA,GAAA,UAAA,MAAA,EAAA;IACE,IAAA,IAAA,KAAA,GAAA,kBAAA,EAAA,CAAA;;IAEE,QAAA,KAAA,EAAA,KAAA;IACD,KAAA,CAAA,CAAA;IACH,CAAA,CAAA;IAEA,IAAA,WAAA,GAAA,UAAA,KAAA,EAAA;IACE,IAAA,IAAA,MAAA,GAAA,QAAA,EAAA,CAAA;;IAEE,QAAA,OAAA,KAAA,CAAA,QAAA,KAAA,MAAA,KAAA,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA;IACD,KAAA;IACD,IAAA,OAAA,KAAA,CAAA,QAAA,KAAA,MAAA,KAAA,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,OAAA,CAAA,CAAA;IACF,CAAA,CAAA;AAEA,QAAA,cAAA,GAAA,UAAA,KAAA,EAAA;IACE,IAAA,IAAA,QAAA,GAAA,WAAA,CAAA,KAAA,CAAA,CAAA;QACoB,IAAA,WAAA,GAAA,KAAA,CAAA,OAAO,0BAAW,OAAM,CAAA,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,EAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAC5C,IAAA,IAAA,UAAA,GAAA,aAAA,CAAA,WAAA,CAAA,CAAA;;;;6BAGqB,OAAM,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,WAAA,CAAA,CAAA;;;wCAGtB,KAAQ,CAAA,QAAA,EAAA,IAAA,EAAA,UAAA,CAAA,GAAA,CAAA,UAAA,EAAA,EAAA,KAAA,EAAA;;IAEL,YAAA,IAAA,IAAA,GAAA,CAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,KAAA,QAAA,CAAA;;IAEA,YAAA,IAAI,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,EAAA;;IAEN,gBAAA,IAAA,MAAA,EAAA;;IAEC,iBAAA;IACF,aAAA;IACD,YAAA,IAAI,OAAI,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,EAAA;;IAEJ,oBAAA,OAAA,IAAA,CAAA;IACD,iBAAA;IACF,aAAA;oBACG,OAAM,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,cAAA,CAAA,IAAA,KAAA,CAAA,cAAA,EAAA;IACR,gBAAA,QAAA,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,EAAA,cAAA,EAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,KAAA,CAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA;IAWD,aAAA;;;IAYT,KAAA,CAAA;IAEA,IAAA,IAAA,MAAA,GAAA,YAAA;IACE,QAAA,IAAA,CAAK,OAAO,CAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA;;IACZ,QAAA,IAAA,WAAA,CAAA,IAAA,KAAA,QAAA,EAAA;;;IAEE,YAAA,QAAA,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,EAAA,gBAAA,CAAA,EAAA;IAKD,SAAA;IAAM,aAAA,IAAA,WAAA,CAAA,IAAA,KAAA,OAAA,EAAA;IACL,YAAA,QAAA,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,CAAA,EAAA;IAGD,SAAA;IAAM,aAAA,IAAA,WAAA,CAAA,IAAA,KAAA,MAAA,EAAA;;;IAEL,YAAA,QAAA,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,EAAA,gBAAA,CAAA,EAAA;IAKD,SAAA;IACD,QAAA,OAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,CAAA,CAAA;IACF,KAAA,CAAA;IAEA,IAAA,IAAA,CAAA,WAAA;uCAA0B,KAAQ,CAAA,QAAA,EAAA,IAAA,CAAA,CAAA;IAElC,IAAA,QAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,WAAA,EAAA,EAAA,MAAA,EAAA,CAAA,EAAA;IAKF;;ACvGA,QAAA,eAAA,GAAA,UAAA,KAAA,EAAA;IACE,IAAA,IAAA,KAAA,GAAc,KAAU,CAAA,UAAA,CAAA,4BAAA,CAAA,CAAA;oFAGb,OAAS,CAAA,MAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,KAAA,CAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,EAAA;IAKtB;;ACVA,QAAA,YAAA,GAAA,UAAA,KAAA,EAAA;IACE,IAAA,QAAA,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,EAAA,KAAA,EAAA;IAGM,YAAA,IAAA,QAAA,GAAA;;;;IAGD,SAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,EAAA;IAKP;;ACVA,QAAA,WAAA,GAAA,UAAA,KAAA,EAAA;IACE,IAAA,IAAA,KAAA,GAAA,kBAAA,EAAA,CAAA;IACA,IAAA,QAAA,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,EAAA,KAAA,EAAA;IAGM,YAAA,IAAA,OAAA,GAAA;IACE,gBAAA,OAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,CAAA;;IAEF,YAAA,IAAA,OAAA,GAAA;;IACE,gBAAA,IAAA,MAAA,GAAA,CAAA,EAAA,GAAA,KAAA,CAAA,SAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;IACA,gBAAA,IAAA,OAAA,MAAA,KAAA,QAAA,EAAA;+BACS,OAAS,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,EAAA;IACd,wBAAA,IAAA,OAAA,GAAA;IACE,4BAAA,OAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,CAAA;;IAEF,wBAAA,IAAA,MAAA,GAAA;;IACE,4BAAA,OAAA,CAAA,EAAA,GAAA,KAAA,CAAA,QAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;IAEH,qBAAA,CAAA,CAAA;IACF,iBAAA;IACD,gBAAA,OAAA,MAAA,CAAA;;IAEF,YAAA,IAAA,MAAA,GAAA;;IACE,gBAAA,OAAA,CAAA,EAAA,GAAA,KAAA,CAAA,QAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;IAEH,SAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,EAAA;IAKP;;;ACpCqD;AACD;IAOpD,IAAAC,KAAA,GAAA;IACE,IAAA,SAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAW,OAAkB,CAAA,MAAA,CAAA,kBAAA,KAAA,IAAA,IAAlB,OAAkB,CAAA,MAAA,CAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAlB,OAAkB,CAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,EAAA,KAAA,CAAA;4BACf,OAAkB,CAAA,MAAA,CAAA,kBAAA,KAAA,IAAA,IAAlB,OAAkB,CAAA,MAAA,CAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAlB,OAAkB,CAAA,MAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,YAAA;;IAGlC;IACA,IAAA,gBAAA,GAAA,YAAA;;IACE,IAAA,IAAA,CAAAA,KAAA,CAAA,YAAA,EAAA;;;IAGI,YAAA,CAAA,EAAA,GAAAA,KAAA,CAAA,YAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,IAAAA,KAAA,CAAA,YAAA,GAAA,CAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,YAAA,CAAA,CAAA;IACD,SAAA;IAAC,QAAA,OAAA,EAAA,EAAA,GAAA;IACH,KAAA;IACD,IAAA,IAAA,CAAAA,KAAA,CAAA,YAAA,EAAA;;;gBAGI,OAAmB,CAAA,OAAA,CAAA,QAAA,CAAA;;IAEhB,iBAAA,KAAA,EAAA,CAAA;IACJ,SAAA;IAAC,QAAA,OAAA,EAAA,EAAA,GAAA;IACH,KAAA;IACH,CAAA,CAAA;IAEA,IAAA,MAAA,GAAA,UAAA,OAAA,EAAA;;mBACM,OAAkB,CAAA,MAAA,CAAA,kBAAA,CAAA,SAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,MAAA,aAAA;IAAuC,QAAA,OAAA,IAAA,CAAA;IAC7D,IAAA,IAAAA,KAAA,CAAA,SAAA,IAAAA,KAAA,CAAA,YAAA,EAAA;;IAEC,KAAA;IAAM,SAAA;;IAEN,KAAA;IACH,CAAA,CAAA;IAEA,gBAAA,EAAA;;ICpBA,IAAA,GAAA,GAAA;IACE,IAAA,QAAA,EAAA,CAAA;;IAGF,IAAA,aAAA,GAAA,YAAA;IACE,IAAA,OAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,QAAA,EAAA,CAAA,CAAA;IACF,CAAA,CAAA;IAEA,SAAA,iBAAA,CAAA,OAAA,EAAA;IACE,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAA,GAAA,EAAA,CAAA,EAAA;;yBAMiB,OAAM,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,MAAA,CAAA;;IAEnB,cAAA,IAAM,OAAM,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAId,QAAA,IAAA,YAAA,GAAA,YAAA;IACE,YAAA,GAAA,CAAA,QAAA,GAAA,CAAA,CAAA;;IACkB,gBAAA,OAAA,IAAA,CAAA;IAClB,YAAA,OAAA,MAAA,CAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA;IAKF,SAAA,CAAA;IAEA,QAAA,IAAA,cAAA,GAAA,YAAA;;IAEA,SAAA,CAAA;;IAII,YAAA,KAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EACS,OAAS,CAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,UAAA,EAAA,KAAA,CAAA,UAAA,CAAA,EAAA;IAEhB,gBAAA,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,EAAA,KAAA,EAAwB,OAAS,CAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,KAAA,EAAA,KAAA,CAAA,KAAA,CAAA,EAAA;IAC9B,oBAAA,YAAA,EAAA;IACA,oBAAA,cAAA,EAAA,CAAA,CAAA,CAAA,EAAA;;IAOX,IAAA,WAAA,CAAA,WAAA,GAAA,aAAA,CAAA;;IAGE,QAAA,IAAA,MAAA,GAAe,KAAU,CAAA,UAAA,CAAA,mBAAA,CAAA,CAAA;IACzB,QAAA,IAAA,CAAA,MAAA;2CAAqB,KAAQ,CAAA,QAAA,EAAA,IAAA,CAAA,CAAA;IAC7B,QAAA,IAAA,cAAA,GAAA,YAAA;;IAEA,SAAA,CAAA;;IAEE,YAAA,IAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA;;;IAGC,aAAA;IAAM,iBAAA;IACL,gBAAA,OAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA;IACD,aAAA;IACH,SAAA,CAAA;;IAEE,YAAA,IAAA,MAAA,GAAA,MAAA,CAAA,WAAA,CAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;IACA,YAAA,QAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,EAAA,cAAA,EAAA,CAAA,EAAA;IAKD,SAAA;IAAM,aAAA,IAAA,MAAA,CAAA,IAAA,KAAA,OAAA,EAAA;IACL,YAAA,IAAA,MAAA,GAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;IACA,YAAA,QAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,EAAA,KAAA,EAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA,GAAA,MAAA,EAAA,EAAA,KAAA,CAAA,QAAA,CAAA,EAAA;IAOD,SAAA;IAAM,aAAA;;IAEN,SAAA;;;IAOD,QAAA,OAAA,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,IAAA,aAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;IAGF,IAAA,WAAA,CAAA,WAAA,GAAA,aAAA,CAAA;;;;IASA,IAAA,WAAA,CAAA,WAAA,GAAA,aAAA,CAAA;;;;IASA,IAAA,WAAA,CAAA,WAAA,GAAA,aAAA,CAAA;;;;IASA,IAAA,UAAA,CAAA,WAAA,GAAA,YAAA,CAAA;;;;IAQA,IAAA,YAAA,CAAA,WAAA,GAAA,cAAA,CAAA;;;;IASA,IAAA,WAAA,CAAA,WAAA,GAAA,aAAA,CAAA;;;;IASA,IAAA,SAAA,CAAA,WAAA,GAAA,WAAA,CAAA;;;;IASA,IAAA,aAAA,CAAA,WAAA,GAAA,eAAA,CAAA;;;;IASA,IAAA,SAAA,CAAA,WAAA,GAAA,WAAA,CAAA;IAEA,IAAA,WAAA,CAAA,MAAA,GAAA,WAAA,CAAA;IACA,IAAA,WAAA,CAAA,MAAA,GAAA,WAAA,CAAA;IACA,IAAA,WAAA,CAAA,MAAA,GAAA,WAAA,CAAA;IACA,IAAA,WAAA,CAAA,KAAA,GAAA,UAAA,CAAA;IACA,IAAA,WAAA,CAAA,OAAA,GAAA,YAAA,CAAA;IACA,IAAA,WAAA,CAAA,IAAA,GAAA,SAAA,CAAA;IACA,IAAA,WAAA,CAAA,QAAA,GAAA,aAAA,CAAA;IACA,IAAA,WAAA,CAAA,IAAA,GAAA,SAAA,CAAA;IACA,IAAA,WAAA,CAAA,MAAA,GAAA,WAAA,CAAA;IAEA,IAAA,OAAA,WAAA,CAAA;IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}