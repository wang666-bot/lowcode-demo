{"version":3,"file":"ExpressionScope.js","sourceRoot":"","sources":["../../src/components/ExpressionScope.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AACzC,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,4BAA4B,EAAE,MAAM,WAAW,CAAA;AAGxD,MAAM,CAAC,IAAM,eAAe,GAAmC,UAAC,KAAK;IACnE,IAAM,KAAK,GAAG,UAAU,CAAC,4BAA4B,CAAC,CAAA;IACtD,OAAO,CACL,oBAAC,4BAA4B,CAAC,QAAQ,IACpC,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IAEnC,KAAK,CAAC,QAAQ,CACuB,CACzC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React, { useContext } from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { SchemaExpressionScopeContext } from '../shared'\nimport { IExpressionScopeProps, ReactFC } from '../types'\n\nexport const ExpressionScope: ReactFC<IExpressionScopeProps> = (props) => {\n  const scope = useContext(SchemaExpressionScopeContext)\n  return (\n    <SchemaExpressionScopeContext.Provider\n      value={lazyMerge(scope, props.value)}\n    >\n      {props.children}\n    </SchemaExpressionScopeContext.Provider>\n  )\n}\n"]}