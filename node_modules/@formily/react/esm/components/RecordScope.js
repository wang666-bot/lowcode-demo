import React from 'react';
import { lazyMerge } from '@formily/shared';
import { ExpressionScope } from './ExpressionScope';
import { useExpressionScope } from '../hooks';
export var RecordScope = function (props) {
    var scope = useExpressionScope();
    return (React.createElement(ExpressionScope, { value: {
            get $lookup() {
                return scope === null || scope === void 0 ? void 0 : scope.$record;
            },
            get $record() {
                var _a;
                var record = (_a = props.getRecord) === null || _a === void 0 ? void 0 : _a.call(props);
                if (typeof record === 'object') {
                    return lazyMerge(record, {
                        get $lookup() {
                            return scope === null || scope === void 0 ? void 0 : scope.$record;
                        },
                        get $index() {
                            var _a;
                            return (_a = props.getIndex) === null || _a === void 0 ? void 0 : _a.call(props);
                        },
                    });
                }
                return record;
            },
            get $index() {
                var _a;
                return (_a = props.getIndex) === null || _a === void 0 ? void 0 : _a.call(props);
            },
        } }, props.children));
};
//# sourceMappingURL=RecordScope.js.map