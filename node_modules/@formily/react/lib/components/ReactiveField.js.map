{"version":3,"file":"ReactiveField.js","sourceRoot":"","sources":["../../src/components/ReactiveField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react'\nimport { toJS } from '@formily/reactive'\nimport { observer } from '@formily/reactive-react'\nimport { FormPath, isFn } from '@formily/shared'\nimport { isVoidField, GeneralField, Form } from '@formily/core'\nimport { SchemaComponentsContext } from '../shared'\nimport { RenderPropsChildren } from '../types'\ninterface IReactiveFieldProps {\n  field: GeneralField\n  children?: RenderPropsChildren<GeneralField>\n}\n\nconst mergeChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  content: React.ReactNode\n) => {\n  if (!children && !content) return\n  if (isFn(children)) return\n  return (\n    <Fragment>\n      {children}\n      {content}\n    </Fragment>\n  )\n}\n\nconst isValidComponent = (target: any) =>\n  target && (typeof target === 'object' || typeof target === 'function')\n\nconst renderChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  field?: GeneralField,\n  form?: Form\n) => (isFn(children) ? children(field, form) : children)\n\nconst ReactiveInternal: React.FC<IReactiveFieldProps> = (props) => {\n  const components = useContext(SchemaComponentsContext)\n  if (!props.field) {\n    return <Fragment>{renderChildren(props.children)}</Fragment>\n  }\n  const field = props.field\n  const content = mergeChildren(\n    renderChildren(props.children, field, field.form),\n    field.content ?? field.componentProps.children\n  )\n  if (field.display !== 'visible') return null\n\n  const getComponent = (target: any) => {\n    return isValidComponent(target)\n      ? target\n      : FormPath.getIn(components, target) ?? target\n  }\n\n  const renderDecorator = (children: React.ReactNode) => {\n    if (!field.decoratorType) {\n      return <Fragment>{children}</Fragment>\n    }\n\n    return React.createElement(\n      getComponent(field.decoratorType),\n      toJS(field.decoratorProps),\n      children\n    )\n  }\n\n  const renderComponent = () => {\n    if (!field.componentType) return content\n    const value = !isVoidField(field) ? field.value : undefined\n    const onChange = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onInput(...args)\n          field.componentProps?.onChange?.(...args)\n        }\n      : field.componentProps?.onChange\n    const onFocus = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onFocus(...args)\n          field.componentProps?.onFocus?.(...args)\n        }\n      : field.componentProps?.onFocus\n    const onBlur = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onBlur(...args)\n          field.componentProps?.onBlur?.(...args)\n        }\n      : field.componentProps?.onBlur\n    const disabled = !isVoidField(field)\n      ? field.pattern === 'disabled' || field.pattern === 'readPretty'\n      : undefined\n    const readOnly = !isVoidField(field)\n      ? field.pattern === 'readOnly'\n      : undefined\n    return React.createElement(\n      getComponent(field.componentType),\n      {\n        disabled,\n        readOnly,\n        ...toJS(field.componentProps),\n        value,\n        onChange,\n        onFocus,\n        onBlur,\n      },\n      content\n    )\n  }\n\n  return renderDecorator(renderComponent())\n}\n\nReactiveInternal.displayName = 'ReactiveField'\n\nexport const ReactiveField = observer(ReactiveInternal, {\n  forwardRef: true,\n})\n"]}