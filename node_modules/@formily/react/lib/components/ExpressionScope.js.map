{"version":3,"file":"ExpressionScope.js","sourceRoot":"","sources":["../../src/components/ExpressionScope.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAyC;AACzC,0CAA2C;AAC3C,oCAAwD;AAGjD,IAAM,eAAe,GAAmC,UAAC,KAAK;IACnE,IAAM,KAAK,GAAG,IAAA,kBAAU,EAAC,qCAA4B,CAAC,CAAA;IACtD,OAAO,CACL,8BAAC,qCAA4B,CAAC,QAAQ,IACpC,KAAK,EAAE,IAAA,kBAAS,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IAEnC,KAAK,CAAC,QAAQ,CACuB,CACzC,CAAA;AACH,CAAC,CAAA;AATY,QAAA,eAAe,mBAS3B","sourcesContent":["import React, { useContext } from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { SchemaExpressionScopeContext } from '../shared'\nimport { IExpressionScopeProps, ReactFC } from '../types'\n\nexport const ExpressionScope: ReactFC<IExpressionScopeProps> = (props) => {\n  const scope = useContext(SchemaExpressionScopeContext)\n  return (\n    <SchemaExpressionScopeContext.Provider\n      value={lazyMerge(scope, props.value)}\n    >\n      {props.children}\n    </SchemaExpressionScopeContext.Provider>\n  )\n}\n"]}