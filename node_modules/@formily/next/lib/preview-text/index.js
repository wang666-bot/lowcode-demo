"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewText = void 0;
var react_1 = __importStar(require("react"));
var shared_1 = require("@formily/shared");
var react_2 = require("@formily/react");
var next_1 = require("@alifd/next");
var classnames_1 = __importDefault(require("classnames"));
var __builtins__1 = require("../__builtins__");
var PlaceholderContext = (0, react_1.createContext)('N/A');
var Placeholder = PlaceholderContext.Provider;
var usePlaceholder = function (value) {
    var placeholder = (0, react_1.useContext)(PlaceholderContext) || 'N/A';
    return !(0, shared_1.isEmpty)(value) ? value : placeholder;
};
var Input = function (props) {
    return react_1.default.createElement(next_1.Input, __assign({}, props, { isPreview: true }));
};
var NumberPicker = function (props) {
    return react_1.default.createElement(next_1.NumberPicker, __assign({}, props, { isPreview: true }));
};
var Select = (0, react_2.observer)(function (props) {
    var _a, _b;
    var field = (0, react_2.useField)();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var dataSource = ((_a = field === null || field === void 0 ? void 0 : field.dataSource) === null || _a === void 0 ? void 0 : _a.length)
        ? field.dataSource
        : ((_b = props === null || props === void 0 ? void 0 : props.dataSource) === null || _b === void 0 ? void 0 : _b.length)
            ? props.dataSource
            : [];
    var placeholder = usePlaceholder();
    var getSelected = function () {
        var value = props.value;
        if (props.mode === 'multiple' || props.mode === 'tag') {
            if (props.useDetailValue) {
                return (0, shared_1.isArr)(value) ? value : [];
            }
            else {
                return (0, shared_1.isArr)(value)
                    ? value.map(function (val) { return ({ label: val, value: val }); })
                    : [];
            }
        }
        else {
            if (props.useDetailValue) {
                return (0, shared_1.isValid)(value) ? [value] : [];
            }
            else {
                return (0, shared_1.isValid)(value) ? [{ label: value, value: value }] : [];
            }
        }
    };
    var getLabel = function (target) {
        var _a;
        return (((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.find(function (item) { return item.value == (target === null || target === void 0 ? void 0 : target.value); })) === null || _a === void 0 ? void 0 : _a.label) ||
            target.label ||
            placeholder);
    };
    var getLabels = function () {
        var selected = getSelected();
        if (!selected.length)
            return placeholder;
        if (selected.length === 1)
            return getLabel(selected[0]);
        return selected.map(function (item, key) {
            return (react_1.default.createElement(next_1.Tag, { type: "primary", size: "small", key: key }, getLabel(item)));
        });
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
});
var TreeSelect = (0, react_2.observer)(function (props) {
    var _a, _b;
    var field = (0, react_2.useField)();
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var dataSource = ((_a = field === null || field === void 0 ? void 0 : field.dataSource) === null || _a === void 0 ? void 0 : _a.length)
        ? field.dataSource
        : ((_b = props === null || props === void 0 ? void 0 : props.dataSource) === null || _b === void 0 ? void 0 : _b.length)
            ? props.dataSource
            : [];
    var getSelected = function () {
        var value = props.value;
        if (props.multiple) {
            if (props['useDetailValue']) {
                return (0, shared_1.isArr)(value) ? value : [];
            }
            else {
                return (0, shared_1.isArr)(value)
                    ? value.map(function (val) { return ({ label: val, value: val }); })
                    : [];
            }
        }
        else {
            if (props['useDetailValue']) {
                return value ? [value] : [];
            }
            else {
                return value ? [{ label: value, value: value }] : [];
            }
        }
    };
    var findLabel = function (value, dataSource) {
        for (var i = 0; i < (dataSource === null || dataSource === void 0 ? void 0 : dataSource.length); i++) {
            var item = dataSource[i];
            if ((item === null || item === void 0 ? void 0 : item.value) === value) {
                return item === null || item === void 0 ? void 0 : item.label;
            }
            else {
                var childLabel = findLabel(value, item === null || item === void 0 ? void 0 : item.children);
                if (childLabel)
                    return childLabel;
            }
        }
    };
    var getLabels = function () {
        var selected = getSelected();
        if (!(selected === null || selected === void 0 ? void 0 : selected.length))
            return (react_1.default.createElement(next_1.Tag, { type: "primary", size: "small" }, placeholder));
        return selected.map(function (_a, key) {
            var value = _a.value, label = _a.label;
            return (react_1.default.createElement(next_1.Tag, { type: "primary", size: "small", key: key }, findLabel(value, dataSource) || label || placeholder));
        });
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
});
var Cascader = (0, react_2.observer)(function (props) {
    var field = (0, react_2.useField)();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    return (react_1.default.createElement(next_1.CascaderSelect, __assign({}, props, { className: prefixCls, dataSource: field.dataSource, isPreview: true })));
});
var DatePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var getLabels = function () {
        var labels = (0, __builtins__1.formatMomentValue)(props.value, props.format, placeholder);
        return (0, shared_1.isArr)(labels) ? labels.join('~') : labels;
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
};
var DateRangePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var getLabels = function () {
        var labels = (0, __builtins__1.formatMomentValue)(props.value, props.format, placeholder);
        return (0, shared_1.isArr)(labels) ? labels.join('~') : labels;
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
};
var TimePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var getLabels = function () {
        var labels = (0, __builtins__1.formatMomentValue)(props.value, props.format, placeholder);
        return (0, shared_1.isArr)(labels) ? labels.join('~') : labels;
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
};
var TimePicker2 = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var getLabels = function () {
        var labels = (0, __builtins__1.formatMomentValue)(props.value, props.format, placeholder);
        return (0, shared_1.isArr)(labels) ? labels.join('~') : labels;
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
};
var TimeRangePicker2 = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    var getLabels = function () {
        var labels = (0, __builtins__1.formatMomentValue)(props.value, props.format, placeholder);
        return (0, shared_1.isArr)(labels) ? labels.join('~') : labels;
    };
    return react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className) }, getLabels());
};
var Text = function (props) {
    var prefixCls = (0, __builtins__1.usePrefixCls)('form-preview', props);
    return (react_1.default.createElement("div", { className: (0, classnames_1.default)(prefixCls, props.className), style: props.style }, usePlaceholder(props.value)));
};
Text.Input = Input;
Text.NumberPicker = NumberPicker;
Text.Select = Select;
Text.TreeSelect = TreeSelect;
Text.Cascader = Cascader;
Text.DatePicker = DatePicker;
Text.DateRangePicker = DateRangePicker;
Text.TimePicker = TimePicker;
Text.TimePicker2 = TimePicker2;
Text.TimeRangePicker2 = TimeRangePicker2;
Text.Placeholder = Placeholder;
Text.usePlaceholder = usePlaceholder;
exports.PreviewText = Text;
exports.default = exports.PreviewText;
//# sourceMappingURL=index.js.map