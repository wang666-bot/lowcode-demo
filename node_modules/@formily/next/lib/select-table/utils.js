"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompatibleAllSelected = exports.completedKeys = exports.getOutputData = exports.getUISelected = exports.isAllSelected = exports.deleteTreeItem = exports.getTreeKeys = exports.hasSelectedKey = void 0;
var shared_1 = require("@formily/shared");
var useFlatOptions_1 = require("./useFlatOptions");
/**
 * 获取树列表某个键值的集合
 * @param tree 树列表
 * @param primaryKey 键名称
 * @returns 键值数组集合
 */
var getTreeKeys = function (tree, primaryKey) {
    return (0, shared_1.isArr)(tree)
        ? tree.reduce(function (prev, current) {
            if (current === null || current === void 0 ? void 0 : current.disabled) {
                return prev;
            }
            return __spreadArray(__spreadArray(__spreadArray([], __read(prev), false), [
                current[primaryKey]
            ], false), __read(getTreeKeys(current === null || current === void 0 ? void 0 : current.children, primaryKey)), false);
        }, [])
        : [];
};
exports.getTreeKeys = getTreeKeys;
/**
 * 判断树列表中是否有任一 key 被选中
 * @param tree 树列表
 * @param selected 已选中的 keys
 * @param primaryKey 键名
 * @returns
 */
var hasSelectedKey = function (tree, selected, primaryKey) {
    var keys = getTreeKeys(tree, primaryKey);
    var mergedKeys = __spreadArray(__spreadArray([], __read(keys), false), __read(selected), false);
    var validKeys = __spreadArray([], __read(new Set(mergedKeys)), false);
    return validKeys.length !== mergedKeys.length;
};
exports.hasSelectedKey = hasSelectedKey;
/**
 * 判断列表项是否全部被选中
 * @param list 一阶列表
 * @param selected 当前选中的字段值集合
 * @param primaryKey 键名称
 * @returns 是否全部被选中
 */
var isAllSelected = function (list, selected, primaryKey) {
    var validList = list.filter(function (item) { return !(item === null || item === void 0 ? void 0 : item.disabled); });
    var selectedList = validList.filter(function (item) {
        return selected === null || selected === void 0 ? void 0 : selected.includes(item[primaryKey]);
    });
    return selectedList.length === validList.length;
};
exports.isAllSelected = isAllSelected;
/**
 * 完善TableUI Keys（添加选中所有子元素的父元素，或移除未选中所有子元素的父元素）
 * @param flatDataSource 完整数据平铺列表
 * @param selected 当前选中的字段值集合
 * @param primaryKey 键名称
 * @returns 完整的字段值集合
 */
var completedKeys = function (flatDataSource, selected, primaryKey) {
    if (flatDataSource === void 0) { flatDataSource = []; }
    var allSelectedKeys = __spreadArray([], __read(selected), false);
    flatDataSource.forEach(function (item) {
        var _a;
        if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {
            // 优先递归子元素
            allSelectedKeys = completedKeys(item.children, allSelectedKeys, primaryKey);
            if (isAllSelected(item.children, allSelectedKeys, primaryKey)) {
                // 如果该元素的子元素全部选中，且该元素未禁用，则也选中该项（即包含全选子元素的父元素）
                if (!(item === null || item === void 0 ? void 0 : item.disabled)) {
                    allSelectedKeys = __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(allSelectedKeys), false), [item[primaryKey]], false))), false);
                }
            }
            else {
                // 如果该元素的子元素未全部选中，则移除该项
                allSelectedKeys = allSelectedKeys.filter(function (key) { return key !== item[primaryKey]; });
            }
        }
    });
    return allSelectedKeys;
};
exports.completedKeys = completedKeys;
/**
 * 获取数列表中被选中的有效路径
 * @param tree 数列表
 * @param selected 当前选中的字段值集合
 * @param primaryKey 键名称
 * @returns 有效的树路径
 */
var getSelectedPath = function (tree, selected, primaryKey) {
    if (tree === void 0) { tree = []; }
    var pathData = [];
    tree.forEach(function (item) {
        var validChildren = getSelectedPath(item.children, selected, primaryKey);
        if (validChildren.length || (selected === null || selected === void 0 ? void 0 : selected.includes(item[primaryKey]))) {
            pathData.push(__assign(__assign({}, item), (validChildren.length ? { children: validChildren } : {})));
        }
    });
    return pathData;
};
/**
 * 删除树列表的某个 key/value 键值对
 * @param tree
 * @param key
 * @returns
 */
var deleteTreeItem = function (tree, key) {
    return tree.map(function (item) {
        var _a;
        var validItem = __assign({}, item);
        delete validItem[key];
        if ((_a = validItem.children) === null || _a === void 0 ? void 0 : _a.length) {
            validItem.children = deleteTreeItem(validItem.children, key);
        }
        return validItem;
    });
};
exports.deleteTreeItem = deleteTreeItem;
/**
 * 根据 valueType 获取最终输出值
 * @param keys 当前选中的 key 集合（all完整类型）
 * @param records 当前选中的 option 集合
 * @param dataSource 数据源集合
 * @param primaryKey 键名
 * @param originalValueType 值输出类型
 * @param originalOptionAsValue
 * @param mode
 * @param checkStrictly
 * @returns 最终输出的 keys 和 options
 */
var getOutputData = function (keys, // selected
options, dataSource, primaryKey, originalValueType, originalOptionAsValue, mode, checkStrictly) {
    var valueType = checkStrictly !== false ? 'all' : originalValueType; // valueType 在 Strictly 为 false 时生效
    var optionAsValue = valueType === 'path' ? false : originalOptionAsValue; // optionAsValue 在 path 模式不生效
    var outputValue = [];
    var outputOptions = [];
    if (valueType === 'parent') {
        // 移除所有选中值的子值
        var childrenKeys_1 = [];
        options.forEach(function (option) {
            childrenKeys_1 = __spreadArray(__spreadArray([], __read(childrenKeys_1), false), __read(getTreeKeys(option.children, primaryKey)), false);
        });
        outputValue = keys.filter(function (key) { return !childrenKeys_1.includes(key); });
        outputOptions = options.filter(function (options) {
            return outputValue.includes(options[primaryKey]);
        });
    }
    else if (valueType === 'child') {
        outputValue = __spreadArray([], __read(keys), false);
        outputOptions = __spreadArray([], __read(options), false);
        outputOptions.forEach(function (option) {
            // 移除当前有子值被选中的父值
            if (hasSelectedKey(option.children, keys, primaryKey)) {
                outputValue = outputValue.filter(function (key) { return key !== option[primaryKey]; });
                outputOptions = outputOptions.filter(function (options) { return options[primaryKey] !== option[primaryKey]; });
            }
        });
    }
    else if (valueType === 'path') {
        outputValue = getSelectedPath(dataSource, keys, primaryKey);
        outputOptions = __spreadArray([], __read(options), false);
    }
    else {
        // valueType === 'all'
        outputValue = __spreadArray([], __read(keys), false);
        outputOptions = __spreadArray([], __read(options), false);
    }
    outputOptions = deleteTreeItem(outputOptions, '__formily_key__');
    outputValue =
        optionAsValue && valueType !== 'path' ? outputOptions : outputValue;
    if (mode === 'single') {
        outputValue = outputValue[0];
        outputOptions = outputOptions[0];
    }
    return { outputValue: outputValue, outputOptions: outputOptions };
};
exports.getOutputData = getOutputData;
/**
 * 根据 valueType 获取 TableUI 显示值
 * @param keys 回填的数据（输出的）keys 集合
 * @param flatDataSource 平铺的数据源集合
 * @param primaryKey 键名称
 * @param originalValueType 值输出类型
 * @param originalOptionAsValue
 * @param mode
 * @param checkStrictly
 * @param rowKey
 * @returns [] TableUI keys 集合
 */
var getUISelected = function (value, flatDataSource, primaryKey, originalValueType, originalOptionAsValue, mode, checkStrictly, rowKey) {
    var valueType = checkStrictly !== false ? 'all' : originalValueType; // valueType 在 Strictly 为 false 时生效
    var optionAsValue = valueType === 'path' ? false : originalOptionAsValue; // optionAsValue 在 path 模式不生效
    var keys = mode === 'single' ? [value] : (0, shared_1.isArr)(value) ? value : [];
    keys =
        optionAsValue && valueType !== 'path'
            ? keys.map(function (record) {
                return (0, shared_1.isFn)(rowKey) ? rowKey(record) : record === null || record === void 0 ? void 0 : record[primaryKey];
            })
            : keys;
    var newKeys = [];
    if (valueType === 'parent') {
        var options = flatDataSource.filter(function (item) {
            return keys.includes(item[primaryKey]);
        });
        var childrenKeys_2 = [];
        options.forEach(function (option) {
            childrenKeys_2 = __spreadArray(__spreadArray([], __read(childrenKeys_2), false), __read(getTreeKeys(option.children, primaryKey)), false);
        });
        newKeys = __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(keys), false), __read(childrenKeys_2), false))), false);
    }
    else if (valueType === 'child') {
        newKeys = completedKeys(flatDataSource, keys, primaryKey);
    }
    else if (valueType === 'path') {
        var pathKeys = (0, useFlatOptions_1.useFlatOptions)(keys).map(function (item) { return item[primaryKey]; });
        newKeys = completedKeys(flatDataSource, pathKeys, primaryKey);
    }
    else {
        // valueType === 'all'
        newKeys = __spreadArray([], __read(keys), false);
    }
    return newKeys;
};
exports.getUISelected = getUISelected;
/**
 * 获取兼容筛选模式下是否全部选中子元素
 * @param selected 已选中项
 * @param dataSource 当前数据结构
 * @param usableKeys 当前数据结构的可执行项
 * @param checkStrictly
 * @param primaryKey
 * @returns 是否全部选中
 */
var getCompatibleAllSelected = function (selected, dataSource, usableKeys, checkStrictly, primaryKey) {
    if (!usableKeys.length) {
        return false;
    }
    // 当前模式下已选中的项
    var currentSelected = selected.filter(function (item) { return usableKeys.includes(item); });
    // 获取有效选中（父子模式或非父子模式）
    var validSelected = checkStrictly !== false
        ? currentSelected // 非父子模式选中项
        : completedKeys(dataSource, currentSelected, primaryKey); // 父子模式选中项
    // 有效选中项数量等于可执行项数量则全部选中子元素
    return validSelected.length === usableKeys.length;
};
exports.getCompatibleAllSelected = getCompatibleAllSelected;
//# sourceMappingURL=utils.js.map