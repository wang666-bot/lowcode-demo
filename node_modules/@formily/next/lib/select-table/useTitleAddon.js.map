{"version":3,"file":"useTitleAddon.js","sourceRoot":"","sources":["../../src/select-table/useTitleAddon.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAyB;AACzB,oCAAsC;AACtC,iCAAiE;AAEjE,2CAA2C;AAC3C,IAAM,WAAW,GACf,UACE,QAAQ,EACR,cAAc,EACd,sBAAsB,EACtB,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,QAAQ;IAEV,OAAA;QACE,UAAU;QACV,IAAM,OAAO,GAAG,OAAO,CACrB,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM;YACd,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM;gBACd,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,QAAQ,EAAd,CAAc,CAAC,CAAC,MAAM,CAC3D,CAAA;QACD,aAAa;QACb,IAAM,aAAa,GAAG,OAAO,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,KAAI,CAAC,OAAO,CAAC,CAAA;QAE3D,IAAM,aAAa,GAAG,UAAC,OAAO;YAC5B,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,UAAU,GAAG,OAAO,CAAA;gBACxB,eAAe;gBACf,IAAM,YAAU,GAAG,sBAAsB;qBACtC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,QAAQ,EAAd,CAAc,CAAC;qBAChC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAG,UAAU,CAAC,EAAlB,CAAkB,CAAC,CAAA;gBACpC,oDAAoD;gBACpD,IACE,IAAA,gCAAwB,EACtB,QAAQ,EACR,sBAAsB,EACtB,YAAU,EACV,aAAa,EACb,UAAU,CACX,EACD;oBACA,UAAU,GAAG,KAAK,CAAA;iBACnB;gBAED,IAAI,WAAW,GAAG,EAAE,CAAA;gBACpB,IAAI,UAAU,EAAE;oBACd,OAAO;oBACP,WAAW,4BAAO,IAAI,GAAG,wCAAK,QAAQ,kBAAK,YAAU,UAAE,SAAC,CAAA;iBACzD;qBAAM;oBACL,SAAS;oBACT,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,YAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAzB,CAAyB,CAAC,CAAA;iBAClE;gBACD,WAAW,GAAG,IAAA,qBAAa,EAAC,cAAc,EAAE,WAAW,EAAE,UAAU,CAAC,CAAA;gBACpE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,WAAW,CAAC,CAAA;aACxB;QACH,CAAC,CAAA;QAED,OAAO,CACL,8BAAC,eAAQ,IACP,GAAG,EAAC,aAAa,EACjB,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,EAChB,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,aAAa,GACvB,CACH,CAAA;IACH,CAAC;AApDD,CAoDC,CAAA;AAEH,IAAM,aAAa,GAAG,UACpB,QAAe,EACf,cAAqB,EACrB,sBAA6B,EAC7B,UAAkB,EAClB,IAAY,EACZ,QAAiB,EACjB,QAAiB,EACjB,aAAsB,EACtB,QAAwD;IAExD,IAAI,IAAI,KAAK,QAAQ,EAAE;QACrB,OAAO,EAAE,CAAA;KACV;IACD,OAAO;QACL,UAAU,EAAE,cAAM,OAAA,CAAC;YACjB,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;SAC3B,CAAC,EAFgB,CAEhB;QACF,WAAW,EAAE,WAAW,CACtB,QAAQ,EACR,cAAc,EACd,sBAAsB,EACtB,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,QAAQ,CACT;KACF,CAAA;AACH,CAAC,CAAA;AAEQ,sCAAa","sourcesContent":["import React from 'react'\nimport { Checkbox } from '@alifd/next'\nimport { completedKeys, getCompatibleAllSelected } from './utils'\n\n// 重写表格表头Checkbox（节点状态按全完整数据计算，节点操作按筛选数据计算）\nconst newCheckbox =\n  (\n    selected,\n    flatDataSource,\n    flatFilteredDataSource,\n    primaryKey,\n    disabled,\n    readOnly,\n    checkStrictly,\n    onChange\n  ) =>\n  () => {\n    // 全选框是否选中\n    const checked = Boolean(\n      selected?.length &&\n        selected?.length ===\n          flatDataSource.filter((item) => !item.disabled).length\n    )\n    // 全选框是否未完全选中\n    const indeterminate = Boolean(selected?.length && !checked)\n\n    const onInnerChange = (checked) => {\n      if (!readOnly) {\n        let isSelected = checked\n        // 当前可执行全选的keys\n        const usableKeys = flatFilteredDataSource\n          .filter((item) => !item.disabled)\n          .map((item) => item?.[primaryKey])\n        // 在筛选状态下（按钮的indeterminate状态处于异常）需要通过数据对比判断是否处于全选中状态\n        if (\n          getCompatibleAllSelected(\n            selected,\n            flatFilteredDataSource,\n            usableKeys,\n            checkStrictly,\n            primaryKey\n          )\n        ) {\n          isSelected = false\n        }\n\n        let newSelected = []\n        if (isSelected) {\n          // 执行全选\n          newSelected = [...new Set([...selected, ...usableKeys])]\n        } else {\n          // 执行取消全选\n          newSelected = selected.filter((key) => !usableKeys.includes(key))\n        }\n        newSelected = completedKeys(flatDataSource, newSelected, primaryKey)\n        onChange?.(newSelected)\n      }\n    }\n\n    return (\n      <Checkbox\n        key=\"titleAddons\"\n        disabled={disabled}\n        checked={checked}\n        indeterminate={indeterminate}\n        onChange={onInnerChange}\n      />\n    )\n  }\n\nconst useTitleAddon = (\n  selected: any[],\n  flatDataSource: any[],\n  flatFilteredDataSource: any[],\n  primaryKey: string,\n  mode: string,\n  disabled: boolean,\n  readOnly: boolean,\n  checkStrictly: boolean,\n  onChange: (selectedRowKeys: any[], record: any[]) => any\n) => {\n  if (mode === 'single') {\n    return {}\n  }\n  return {\n    titleProps: () => ({\n      style: { display: 'none' },\n    }),\n    titleAddons: newCheckbox(\n      selected,\n      flatDataSource,\n      flatFilteredDataSource,\n      primaryKey,\n      disabled,\n      readOnly,\n      checkStrictly,\n      onChange\n    ),\n  }\n}\n\nexport { useTitleAddon }\n"]}