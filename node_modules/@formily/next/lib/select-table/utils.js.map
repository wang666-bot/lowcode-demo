{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/select-table/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArr, isFn } from '@formily/shared'\nimport { useFlatOptions } from './useFlatOptions'\n\n/**\n * 获取树列表某个键值的集合\n * @param tree 树列表\n * @param primaryKey 键名称\n * @returns 键值数组集合\n */\nconst getTreeKeys = (tree: any[], primaryKey: string) =>\n  isArr(tree)\n    ? tree.reduce((prev, current) => {\n        if (current?.disabled) {\n          return prev\n        }\n        return [\n          ...prev,\n          current[primaryKey],\n          ...getTreeKeys(current?.children, primaryKey),\n        ]\n      }, [])\n    : []\n\n/**\n * 判断树列表中是否有任一 key 被选中\n * @param tree 树列表\n * @param selected 已选中的 keys\n * @param primaryKey 键名\n * @returns\n */\nconst hasSelectedKey = (tree: any[], selected: any[], primaryKey: string) => {\n  const keys = getTreeKeys(tree, primaryKey)\n  const mergedKeys = [...keys, ...selected]\n  const validKeys = [...new Set(mergedKeys)]\n  return validKeys.length !== mergedKeys.length\n}\n\n/**\n * 判断列表项是否全部被选中\n * @param list 一阶列表\n * @param selected 当前选中的字段值集合\n * @param primaryKey 键名称\n * @returns 是否全部被选中\n */\nconst isAllSelected = (list: any[], selected: any[], primaryKey: string) => {\n  const validList = list.filter((item) => !item?.disabled)\n  const selectedList = validList.filter((item) =>\n    selected?.includes(item[primaryKey])\n  )\n  return selectedList.length === validList.length\n}\n\n/**\n * 完善TableUI Keys（添加选中所有子元素的父元素，或移除未选中所有子元素的父元素）\n * @param flatDataSource 完整数据平铺列表\n * @param selected 当前选中的字段值集合\n * @param primaryKey 键名称\n * @returns 完整的字段值集合\n */\nconst completedKeys = (\n  flatDataSource: any[] = [],\n  selected: any[],\n  primaryKey: string\n) => {\n  let allSelectedKeys = [...selected]\n  flatDataSource.forEach((item) => {\n    if (item.children?.length) {\n      // 优先递归子元素\n      allSelectedKeys = completedKeys(\n        item.children,\n        allSelectedKeys,\n        primaryKey\n      )\n      if (isAllSelected(item.children, allSelectedKeys, primaryKey)) {\n        // 如果该元素的子元素全部选中，且该元素未禁用，则也选中该项（即包含全选子元素的父元素）\n        if (!item?.disabled) {\n          allSelectedKeys = [...new Set([...allSelectedKeys, item[primaryKey]])]\n        }\n      } else {\n        // 如果该元素的子元素未全部选中，则移除该项\n        allSelectedKeys = allSelectedKeys.filter(\n          (key) => key !== item[primaryKey]\n        )\n      }\n    }\n  })\n  return allSelectedKeys\n}\n\n/**\n * 获取数列表中被选中的有效路径\n * @param tree 数列表\n * @param selected 当前选中的字段值集合\n * @param primaryKey 键名称\n * @returns 有效的树路径\n */\nconst getSelectedPath = (tree = [], selected, primaryKey) => {\n  const pathData = []\n\n  tree.forEach((item) => {\n    const validChildren = getSelectedPath(item.children, selected, primaryKey)\n    if (validChildren.length || selected?.includes(item[primaryKey])) {\n      pathData.push({\n        ...item,\n        ...(validChildren.length ? { children: validChildren } : {}),\n      })\n    }\n  })\n\n  return pathData\n}\n\n/**\n * 删除树列表的某个 key/value 键值对\n * @param tree\n * @param key\n * @returns\n */\nconst deleteTreeItem = (tree: any[], key: string) =>\n  tree.map((item) => {\n    const validItem = { ...item }\n    delete validItem[key]\n    if (validItem.children?.length) {\n      validItem.children = deleteTreeItem(validItem.children, key)\n    }\n    return validItem\n  })\n\n/**\n * 根据 valueType 获取最终输出值\n * @param keys 当前选中的 key 集合（all完整类型）\n * @param records 当前选中的 option 集合\n * @param dataSource 数据源集合\n * @param primaryKey 键名\n * @param originalValueType 值输出类型\n * @param originalOptionAsValue\n * @param mode\n * @param checkStrictly\n * @returns 最终输出的 keys 和 options\n */\nconst getOutputData = (\n  keys, // selected\n  options,\n  dataSource,\n  primaryKey,\n  originalValueType,\n  originalOptionAsValue,\n  mode,\n  checkStrictly\n) => {\n  const valueType = checkStrictly !== false ? 'all' : originalValueType // valueType 在 Strictly 为 false 时生效\n  const optionAsValue = valueType === 'path' ? false : originalOptionAsValue // optionAsValue 在 path 模式不生效\n  let outputValue = []\n  let outputOptions = []\n\n  if (valueType === 'parent') {\n    // 移除所有选中值的子值\n    let childrenKeys = []\n    options.forEach((option) => {\n      childrenKeys = [\n        ...childrenKeys,\n        ...getTreeKeys(option.children, primaryKey),\n      ]\n    })\n    outputValue = keys.filter((key) => !childrenKeys.includes(key))\n    outputOptions = options.filter((options) =>\n      outputValue.includes(options[primaryKey])\n    )\n  } else if (valueType === 'child') {\n    outputValue = [...keys]\n    outputOptions = [...options]\n    outputOptions.forEach((option) => {\n      // 移除当前有子值被选中的父值\n      if (hasSelectedKey(option.children, keys, primaryKey)) {\n        outputValue = outputValue.filter((key) => key !== option[primaryKey])\n        outputOptions = outputOptions.filter(\n          (options) => options[primaryKey] !== option[primaryKey]\n        )\n      }\n    })\n  } else if (valueType === 'path') {\n    outputValue = getSelectedPath(dataSource, keys, primaryKey)\n    outputOptions = [...options]\n  } else {\n    // valueType === 'all'\n    outputValue = [...keys]\n    outputOptions = [...options]\n  }\n\n  outputOptions = deleteTreeItem(outputOptions, '__formily_key__')\n  outputValue =\n    optionAsValue && valueType !== 'path' ? outputOptions : outputValue\n  if (mode === 'single') {\n    outputValue = outputValue[0]\n    outputOptions = outputOptions[0]\n  }\n\n  return { outputValue, outputOptions }\n}\n\n/**\n * 根据 valueType 获取 TableUI 显示值\n * @param keys 回填的数据（输出的）keys 集合\n * @param flatDataSource 平铺的数据源集合\n * @param primaryKey 键名称\n * @param originalValueType 值输出类型\n * @param originalOptionAsValue\n * @param mode\n * @param checkStrictly\n * @param rowKey\n * @returns [] TableUI keys 集合\n */\nconst getUISelected = (\n  value,\n  flatDataSource,\n  primaryKey,\n  originalValueType,\n  originalOptionAsValue,\n  mode,\n  checkStrictly,\n  rowKey\n) => {\n  const valueType = checkStrictly !== false ? 'all' : originalValueType // valueType 在 Strictly 为 false 时生效\n  const optionAsValue = valueType === 'path' ? false : originalOptionAsValue // optionAsValue 在 path 模式不生效\n\n  let keys = mode === 'single' ? [value] : isArr(value) ? value : []\n  keys =\n    optionAsValue && valueType !== 'path'\n      ? keys.map((record: any) =>\n          isFn(rowKey) ? rowKey(record) : record?.[primaryKey]\n        )\n      : keys\n\n  let newKeys = []\n  if (valueType === 'parent') {\n    const options = flatDataSource.filter((item) =>\n      keys.includes(item[primaryKey])\n    )\n    let childrenKeys = []\n    options.forEach((option) => {\n      childrenKeys = [\n        ...childrenKeys,\n        ...getTreeKeys(option.children, primaryKey),\n      ]\n    })\n    newKeys = [...new Set([...keys, ...childrenKeys])]\n  } else if (valueType === 'child') {\n    newKeys = completedKeys(flatDataSource, keys, primaryKey)\n  } else if (valueType === 'path') {\n    const pathKeys = useFlatOptions(keys).map((item) => item[primaryKey])\n    newKeys = completedKeys(flatDataSource, pathKeys, primaryKey)\n  } else {\n    // valueType === 'all'\n    newKeys = [...keys]\n  }\n\n  return newKeys\n}\n\n/**\n * 获取兼容筛选模式下是否全部选中子元素\n * @param selected 已选中项\n * @param dataSource 当前数据结构\n * @param usableKeys 当前数据结构的可执行项\n * @param checkStrictly\n * @param primaryKey\n * @returns 是否全部选中\n */\nconst getCompatibleAllSelected = (\n  selected,\n  dataSource,\n  usableKeys,\n  checkStrictly,\n  primaryKey\n) => {\n  if (!usableKeys.length) {\n    return false\n  }\n  // 当前模式下已选中的项\n  const currentSelected = selected.filter((item) => usableKeys.includes(item))\n  // 获取有效选中（父子模式或非父子模式）\n  const validSelected =\n    checkStrictly !== false\n      ? currentSelected // 非父子模式选中项\n      : completedKeys(dataSource, currentSelected, primaryKey) // 父子模式选中项\n  // 有效选中项数量等于可执行项数量则全部选中子元素\n  return validSelected.length === usableKeys.length\n}\n\nexport {\n  hasSelectedKey,\n  getTreeKeys,\n  deleteTreeItem,\n  isAllSelected,\n  getUISelected,\n  getOutputData,\n  completedKeys,\n  getCompatibleAllSelected,\n}\n"]}