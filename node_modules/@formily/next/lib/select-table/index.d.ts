import React from 'react';
import { TableProps, ColumnProps } from '@alifd/next/types/table';
import { SearchProps } from '@alifd/next/types/search';
declare type IFilterOption = boolean | ((option: any, keyword: string) => boolean);
declare type IFilterSort = (optionA: any, optionB: any) => number;
export interface ISelectTableColumnProps extends ColumnProps {
    key: React.ReactText;
}
export interface ISelectTableProps extends Omit<TableProps, 'primaryKey' | 'onChange'> {
    mode?: 'multiple' | 'single';
    dataSource?: any[];
    optionAsValue?: boolean;
    valueType?: 'all' | 'parent' | 'child' | 'path';
    showSearch?: boolean;
    searchProps?: SearchProps;
    primaryKey?: string | ((record: any) => string);
    filterOption?: IFilterOption;
    filterSort?: IFilterSort;
    onSearch?: (keyword: string) => void;
    onChange?: (value: any, options: any) => void;
    value?: any;
    rowSelection?: TableProps['rowSelection'] & {
        checkStrictly?: boolean;
    };
}
declare type ComposedSelectTable = React.FC<React.PropsWithChildren<ISelectTableProps>> & {
    Column?: React.FC<React.PropsWithChildren<ISelectTableColumnProps>>;
};
export declare const SelectTable: ComposedSelectTable;
export default SelectTable;
