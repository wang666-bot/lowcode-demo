"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIndeterminate = exports.useCheckSlackly = void 0;
var utils_1 = require("./utils");
/**
 * 判断该字段的 indeterminate 属性
 * @param record 当前字段
 * @param flatDataSource 完整平铺数据
 * @param selected 已选中的字段值集合
 * @param primaryKey 键名称
 * @returns indeterminate 属性值
 */
var getIndeterminate = function (record, flatDataSource, selected, primaryKey) {
    if (selected === null || selected === void 0 ? void 0 : selected.includes(record[primaryKey])) {
        return undefined;
    }
    var wholeRecord = flatDataSource.find(function (item) { return item[primaryKey] === record[primaryKey]; });
    return (0, utils_1.hasSelectedKey)(wholeRecord.children, selected, primaryKey) || undefined;
};
exports.getIndeterminate = getIndeterminate;
// 父子节点（节点状态按全完整数据计算，节点操作按筛选数据计算）
var useCheckSlackly = function (currentSelected, // onChange 返回的 keys
selected, // Table UI 展示的 keys
flatDataSource, flatFilteredDataSource, primaryKey, checkStrictly) {
    var isSelected = currentSelected.length > selected.length; // 判断是选中还是取消
    var currentKey = __spreadArray(__spreadArray([], __read(currentSelected), false), __read(selected), false).find(function (key) { return !(currentSelected.includes(key) && selected.includes(key)); } // 当前变化key不同时存在于两个selected
    );
    // 从过滤后的数据中获取当前record
    var currentRecord = flatFilteredDataSource.find(function (item) { return item[primaryKey] === currentKey; });
    var currentTreeKeys = (0, utils_1.getTreeKeys)(currentRecord.children, primaryKey);
    // 在筛选状态下（按钮的indeterminate状态处于异常）需要通过数据对比判断是否处于全选中状态
    if ((0, utils_1.getCompatibleAllSelected)(selected, currentRecord.children, currentTreeKeys, checkStrictly, primaryKey)) {
        isSelected = false;
    }
    var newSelected = [];
    if (isSelected) {
        // 选中当前key及其子keys
        newSelected = __spreadArray([], __read(new Set(__spreadArray(__spreadArray(__spreadArray([], __read(selected), false), [currentKey], false), __read(currentTreeKeys), false))), false);
    }
    else {
        // 移除当前key及其子keys
        newSelected = selected.filter(function (key) { return !__spreadArray([currentKey], __read(currentTreeKeys), false).includes(key); });
    }
    newSelected = (0, utils_1.completedKeys)(flatDataSource, newSelected, primaryKey);
    return { selectedRowKeys: newSelected };
};
exports.useCheckSlackly = useCheckSlackly;
//# sourceMappingURL=useCheckSlackly.js.map