"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatMomentValue = exports.momentable = void 0;
var shared_1 = require("@formily/shared");
var moment_1 = __importDefault(require("moment"));
var moment = function (date, format) {
    return (0, moment_1.default)((date === null || date === void 0 ? void 0 : date.toDate) ? date.toDate() : date, format);
};
var momentable = function (value, format) {
    return Array.isArray(value)
        ? value.map(function (val) { return moment(val, format); })
        : value
            ? moment(value, format)
            : value;
};
exports.momentable = momentable;
var formatMomentValue = function (value, format, placeholder) {
    var formatDate = function (date, format, i) {
        if (i === void 0) { i = 0; }
        if (!date)
            return placeholder;
        var TIME_REG = /^(?:[01]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/;
        var _format = format;
        if ((0, shared_1.isArr)(format)) {
            _format = format[i];
        }
        if ((0, shared_1.isFn)(_format)) {
            return _format(date);
        }
        if ((0, shared_1.isEmpty)(_format)) {
            return date;
        }
        // moment '19:55:22' 下需要传入第二个参数
        if (TIME_REG.test(date)) {
            return moment(date, _format).format(_format);
        }
        return moment(date).format(_format);
    };
    if ((0, shared_1.isArr)(value)) {
        return value.map(function (val, index) {
            return formatDate(val, format, index);
        });
    }
    else {
        return value ? formatDate(value, format) : value || placeholder;
    }
};
exports.formatMomentValue = formatMomentValue;
//# sourceMappingURL=moment.js.map