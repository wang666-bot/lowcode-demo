{"version":3,"file":"render.js","sourceRoot":"","sources":["../../src/__builtins__/render.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kDAAqC;AAOrC,0CAA0C;AAC1C,IAAM,SAAS,GAAG,aACb,QAAQ,CAMZ,CAAA;AAEO,IAAA,OAAO,GAAkD,SAAS,QAA3D,EAAU,WAAW,GAA6B,SAAS,OAAtC,EAAE,sBAAsB,GAAK,SAAS,uBAAd,CAAc;AAE1E,IAAI,UAAsB,CAAA;AAC1B,IAAI;IACF,IAAM,WAAW,GAAG,MAAM,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACzD,IAAI,WAAW,IAAI,EAAE,IAAI,SAAS,CAAC,UAAU,EAAE;QAC7C,8DAA8D;QAC9D,UAAU,GAAG,SAAS,CAAC,UAAU,CAAA;KAClC;CACF;AAAC,OAAO,CAAC,EAAE;IACV,cAAc;CACf;AAED,SAAS,aAAa,CAAC,IAAa;IAC1B,IAAA,kDAAkD,GAAK,SAAS,mDAAd,CAAc;IAExE,IACE,kDAAkD;QAClD,OAAO,kDAAkD,KAAK,QAAQ,EACtE;QACA,kDAAkD,CAAC,qBAAqB;YACtE,IAAI,CAAA;KACP;AACH,CAAC;AAED,IAAM,IAAI,GAAG,sBAAsB,CAAA;AAOnC,SAAS,YAAY,CAAC,IAAkB,EAAE,SAAwB;IAChE,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;AAC9B,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAkB,EAAE,SAAwB;IACpE,aAAa,CAAC,IAAI,CAAC,CAAA;IACnB,IAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,CAAA;IACrD,aAAa,CAAC,KAAK,CAAC,CAAA;IACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACjB,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;AACxB,CAAC;AAED,SAAgB,MAAM,CAAC,IAAkB,EAAE,SAAwB;IACjE,IAAI,UAAqB,EAAE;QACzB,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;QACjC,OAAM;KACP;IACD,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;AAC/B,CAAC;AAND,wBAMC;AAED,+DAA+D;AAC/D,SAAS,aAAa,CAAC,SAAwB;IAC7C,OAAO,sBAAsB,CAAC,SAAS,CAAC,CAAA;AAC1C,CAAC;AAED,SAAe,iBAAiB,CAAC,SAAwB;;;YACvD,kDAAkD;YAClD,sBAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;oBAC5B,MAAA,SAAS,CAAC,IAAI,CAAC,0CAAE,OAAO,EAAE,CAAA;oBAC1B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAA;gBACxB,CAAC,CAAC,EAAA;;;CACH;AAED,SAAgB,OAAO,CAAC,SAAwB;IAC9C,IAAI,UAAqB,EAAE;QACzB,OAAO,iBAAiB,CAAC,SAAS,CAAC,CAAA;KACpC;IAED,OAAO,aAAa,CAAC,SAAS,CAAC,CAAA;AACjC,CAAC;AAND,0BAMC","sourcesContent":["import { ReactElement } from 'react'\nimport * as ReactDOM from 'react-dom'\nimport type { Root } from 'react-dom/client'\n\n// 移植自rc-util: https://github.com/react-component/util/blob/master/src/React/render.ts\n\ntype CreateRoot = (container: ContainerType) => Root\n\n// Let compiler not to search module usage\nconst fullClone = {\n  ...ReactDOM,\n} as typeof ReactDOM & {\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?: {\n    usingClientEntryPoint?: boolean\n  }\n  createRoot?: CreateRoot\n}\n\nconst { version, render: reactRender, unmountComponentAtNode } = fullClone\n\nlet createRoot: CreateRoot\ntry {\n  const mainVersion = Number((version || '').split('.')[0])\n  if (mainVersion >= 18 && fullClone.createRoot) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    createRoot = fullClone.createRoot\n  }\n} catch (e) {\n  // Do nothing;\n}\n\nfunction toggleWarning(skip: boolean) {\n  const { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } = fullClone\n\n  if (\n    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED &&\n    typeof __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === 'object'\n  ) {\n    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint =\n      skip\n  }\n}\n\nconst MARK = '__antd_mobile_root__'\n\n// ========================== Render ==========================\ntype ContainerType = (Element | DocumentFragment) & {\n  [MARK]?: Root\n}\n\nfunction legacyRender(node: ReactElement, container: ContainerType) {\n  reactRender(node, container)\n}\n\nfunction concurrentRender(node: ReactElement, container: ContainerType) {\n  toggleWarning(true)\n  const root = container[MARK] || createRoot(container)\n  toggleWarning(false)\n  root.render(node)\n  container[MARK] = root\n}\n\nexport function render(node: ReactElement, container: ContainerType) {\n  if (createRoot as unknown) {\n    concurrentRender(node, container)\n    return\n  }\n  legacyRender(node, container)\n}\n\n// ========================== Unmount =========================\nfunction legacyUnmount(container: ContainerType) {\n  return unmountComponentAtNode(container)\n}\n\nasync function concurrentUnmount(container: ContainerType) {\n  // Delay to unmount to avoid React 18 sync warning\n  return Promise.resolve().then(() => {\n    container[MARK]?.unmount()\n    delete container[MARK]\n  })\n}\n\nexport function unmount(container: ContainerType) {\n  if (createRoot as unknown) {\n    return concurrentUnmount(container)\n  }\n\n  return legacyUnmount(container)\n}"]}