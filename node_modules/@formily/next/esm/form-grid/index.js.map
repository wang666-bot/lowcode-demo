{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/form-grid/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,eAAe,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAC3E,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAA;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AACzC,OAAO,EAAE,IAAI,EAAgB,MAAM,eAAe,CAAA;AAClD,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAA;AAC9C,OAAO,GAAG,MAAM,YAAY,CAAA;AAE5B,IAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAoB,IAAI,CAAC,CAAA;AA6BpE,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,KAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;AACjC,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,WAAW,GAAG,cAAM,OAAA,UAAU,CAAC,eAAe,CAAC,EAA3B,CAA2B,CAAA;AAE5D;;GAEG;AACH,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,QAAY;IAAZ,yBAAA,EAAA,YAAY;IACtC,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AACD;;GAEG;AACH,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,QAAY;IAAZ,yBAAA,EAAA,YAAY;IACxC,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,QAAQ,GAAqB,QAAQ,CAChD,UAAC,EAKyC;;IAJxC,IAAA,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,KAAK,WAAA,EACF,KAAK,cAJT,kCAKA,CADS;IAER,IAAM,MAAM,GAAG,aAAa,EAAE,CAAA;IAC9B,IAAM,OAAO,cACX,SAAS,EAAE,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,aAAa,mCAAI,CAAC,EACrC,MAAM,EAAE,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,mCAAI,CAAC,IAC5B,KAAK,CACT,CAAA;IACD,IAAM,IAAI,GAAG,OAAO,CAClB,cAAM,OAAA,OAAO,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,EAAzD,CAAyD,EAC/D,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CACnB,CAAA;IACD,IAAM,GAAG,GAAG,MAAM,EAAkB,CAAA;IACpC,IAAM,SAAS,GAAG,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;IACrD,IAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;IACtC,eAAe,CAAC;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAClC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IACV,OAAO,CACL,oBAAC,eAAe,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI;QACnC,wCACM,SAAS,IACb,SAAS,EAAE,GAAG,CAAC,UAAG,SAAS,YAAS,EAAE,SAAS,CAAC,EAChD,KAAK,wBACA,KAAK,KACR,mBAAmB,EAAE,IAAI,CAAC,eAAe,EACzC,GAAG,EAAE,IAAI,CAAC,GAAG,KAEf,GAAG,EAAE,GAAG,KAEP,QAAQ,CACL,CACmB,CAC5B,CAAA;AACH,CAAC,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACK,CAAA;AAER,MAAM,CAAC,IAAM,UAAU,GACrB,QAAQ,CAAC,UAAC,EAAgC;IAA9B,IAAA,QAAQ,cAAA,EAAE,QAAQ,cAAA,EAAK,KAAK,cAA9B,wBAAgC,CAAF;IACtC,OAAO,CACL,wCAAS,KAAK,sBAAkB,QAAQ,KACrC,QAAQ,CACL,CACP,CAAA;AACH,CAAC,CAAC,CAAA;AAEJ,UAAU,CAAC,YAAY,GAAG;IACxB,QAAQ,EAAE,CAAC;CACZ,CAAA;AAED,QAAQ,CAAC,cAAc,GAAG,cAAc,CAAA;AACxC,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAA;AAClC,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAA;AAClC,QAAQ,CAAC,aAAa,GAAG,aAAa,CAAA;AACtC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAA;AAEhC,eAAe,QAAQ,CAAA","sourcesContent":["import React, { useLayoutEffect, useRef, useMemo, useContext } from 'react'\nimport { markRaw } from '@formily/reactive'\nimport { observer } from '@formily/react'\nimport { Grid, IGridOptions } from '@formily/grid'\nimport { usePrefixCls, pickDataProps } from '../__builtins__'\nimport { useFormLayout } from '../form-layout'\nimport cls from 'classnames'\n\nconst FormGridContext = React.createContext<Grid<HTMLElement>>(null)\n\nexport interface IFormGridProps extends IGridOptions {\n  grid?: Grid<HTMLElement>\n  prefix?: string\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport interface IGridColumnProps {\n  gridSpan?: number\n  style?: React.CSSProperties\n  className?: string\n}\n\ntype ComposedFormGrid = React.FC<React.PropsWithChildren<IFormGridProps>> & {\n  GridColumn: React.FC<React.PropsWithChildren<IGridColumnProps>>\n  useFormGrid: () => Grid<HTMLElement>\n  createFormGrid: (props: IFormGridProps) => Grid<HTMLElement>\n  /**\n   * @deprecated\n   */\n  useGridSpan: (gridSpan: number) => number\n  /**\n   * @deprecated\n   */\n  useGridColumn: (gridSpan: number) => number\n}\n\nexport const createFormGrid = (props: IFormGridProps) => {\n  return markRaw(new Grid(props))\n}\n\nexport const useFormGrid = () => useContext(FormGridContext)\n\n/**\n * @deprecated\n */\nexport const useGridSpan = (gridSpan = 1) => {\n  return gridSpan\n}\n/**\n * @deprecated\n */\nexport const useGridColumn = (gridSpan = 1) => {\n  return gridSpan\n}\n\nexport const FormGrid: ComposedFormGrid = observer(\n  ({\n    children,\n    className,\n    style,\n    ...props\n  }: React.PropsWithChildren<IFormGridProps>) => {\n    const layout = useFormLayout()\n    const options = {\n      columnGap: layout?.gridColumnGap ?? 8,\n      rowGap: layout?.gridRowGap ?? 4,\n      ...props,\n    }\n    const grid = useMemo(\n      () => markRaw(options?.grid ? options.grid : new Grid(options)),\n      [Grid.id(options)]\n    )\n    const ref = useRef<HTMLDivElement>()\n    const prefixCls = usePrefixCls('formily-grid', props)\n    const dataProps = pickDataProps(props)\n    useLayoutEffect(() => {\n      return grid.connect(ref.current)\n    }, [grid])\n    return (\n      <FormGridContext.Provider value={grid}>\n        <div\n          {...dataProps}\n          className={cls(`${prefixCls}-layout`, className)}\n          style={{\n            ...style,\n            gridTemplateColumns: grid.templateColumns,\n            gap: grid.gap,\n          }}\n          ref={ref}\n        >\n          {children}\n        </div>\n      </FormGridContext.Provider>\n    )\n  },\n  {\n    forwardRef: true,\n  }\n) as any\n\nexport const GridColumn: React.FC<React.PropsWithChildren<IGridColumnProps>> =\n  observer(({ gridSpan, children, ...props }) => {\n    return (\n      <div {...props} data-grid-span={gridSpan}>\n        {children}\n      </div>\n    )\n  })\n\nGridColumn.defaultProps = {\n  gridSpan: 1,\n}\n\nFormGrid.createFormGrid = createFormGrid\nFormGrid.useFormGrid = useFormGrid\nFormGrid.useGridSpan = useGridSpan\nFormGrid.useGridColumn = useGridColumn\nFormGrid.GridColumn = GridColumn\n\nexport default FormGrid\n"]}