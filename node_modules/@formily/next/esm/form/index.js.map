{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/form/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AACtC,OAAO,EAAE,YAAY,EAAgB,aAAa,EAAE,MAAM,gBAAgB,CAAA;AAC1E,OAAO,EAAE,UAAU,EAAoB,MAAM,gBAAgB,CAAA;AAC7D,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,EACL,wBAAwB,EACxB,mBAAmB,GAIpB,MAAM,eAAe,CAAA;AACtB,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAA;AAS7C,MAAM,CAAC,IAAM,IAAI,GAAiD,UAAC,EAOlE;;IANC,IAAA,IAAI,UAAA,EACJ,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,kBAAkB,wBAAA,EAClB,sBAAsB,4BAAA,EACnB,KAAK,cANyD,qFAOlE,CADS;IAER,IAAM,GAAG,GAAG,aAAa,EAAE,CAAA;IAC3B,IAAM,IAAI,GACR,MAAA,MAAA,MAAC,cAAsB,CAAC,UAAU,EAAE,0CAAE,MAAM,0CAAE,YAAY,mCAAI,OAAO,CAAA;IACvE,OAAO,CAAC;QACN,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA;QACvD,mBAAmB,CAAC,gBAAgB,CAAC,CAAA;IACvC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IAEV,IAAM,aAAa,GAAG,UAAC,IAA4B,IAAK,OAAA,CACtD,oBAAC,WAAW,CAAC,WAAW,IAAC,KAAK,EAAE,sBAAsB;QACpD,oBAAC,UAAU,eAAK,KAAK,GAClB,KAAK,CAAC,aAAa,CAClB,SAAS,EACT;YACE,QAAQ,EAAR,UAAS,CAAkB;;gBACzB,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,eAAe,iDAAI,CAAA;gBACtB,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,cAAc,iDAAI,CAAA;gBACrB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;YACrD,CAAC;SACF,EACD,KAAK,CAAC,QAAQ,CACf,CACU,CACW,CAC3B,EAhBuD,CAgBvD,CAAA;IAED,IAAI,IAAI;QACN,OAAO,oBAAC,YAAY,IAAC,IAAI,EAAE,IAAI,IAAG,aAAa,CAAC,IAAI,CAAC,CAAgB,CAAA;IACvE,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;IAClE,OAAO,aAAa,CAAC,GAAG,CAAC,CAAA;AAC3B,CAAC,CAAA;AAED,IAAI,CAAC,YAAY,GAAG;IAClB,SAAS,EAAE,MAAM;CAClB,CAAA;AAED,eAAe,IAAI,CAAA","sourcesContent":["import React, { useMemo } from 'react'\nimport { FormProvider, JSXComponent, useParentForm } from '@formily/react'\nimport { FormLayout, IFormLayoutProps } from '../form-layout'\nimport { ConfigProvider } from '@alifd/next'\nimport {\n  getValidateLocaleIOSCode,\n  setValidateLanguage,\n  Form as FormType,\n  ObjectField,\n  IFormFeedback,\n} from '@formily/core'\nimport { PreviewText } from '../preview-text'\nexport interface FormProps extends IFormLayoutProps {\n  form?: FormType\n  component?: JSXComponent\n  onAutoSubmit?: (values: any) => any\n  onAutoSubmitFailed?: (feedbacks: IFormFeedback[]) => void\n  previewTextPlaceholder?: React.ReactNode\n}\n\nexport const Form: React.FC<React.PropsWithChildren<FormProps>> = ({\n  form,\n  component,\n  onAutoSubmit,\n  onAutoSubmitFailed,\n  previewTextPlaceholder,\n  ...props\n}) => {\n  const top = useParentForm()\n  const lang =\n    (ConfigProvider as any).getContext()?.locale?.momentLocale ?? 'zh-CN'\n  useMemo(() => {\n    const validateLanguage = getValidateLocaleIOSCode(lang)\n    setValidateLanguage(validateLanguage)\n  }, [lang])\n\n  const renderContent = (form: FormType | ObjectField) => (\n    <PreviewText.Placeholder value={previewTextPlaceholder}>\n      <FormLayout {...props}>\n        {React.createElement(\n          component,\n          {\n            onSubmit(e: React.FormEvent) {\n              e?.stopPropagation?.()\n              e?.preventDefault?.()\n              form.submit(onAutoSubmit).catch(onAutoSubmitFailed)\n            },\n          },\n          props.children\n        )}\n      </FormLayout>\n    </PreviewText.Placeholder>\n  )\n\n  if (form)\n    return <FormProvider form={form}>{renderContent(form)}</FormProvider>\n  if (!top) throw new Error('must pass form instance by createForm')\n  return renderContent(top)\n}\n\nForm.defaultProps = {\n  component: 'form',\n}\n\nexport default Form\n"]}