{"version":3,"file":"useClickAway.js","sourceRoot":"","sources":["../../../src/__builtins__/hooks/useClickAway.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,SAAS,EAAoB,MAAM,OAAO,CAAA;AAE3D,IAAM,YAAY,GAAG,OAAO,CAAA;AAY5B,SAAS,gBAAgB,CACvB,MAAmC,EACnC,cAA8B;IAE9B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,cAAc,CAAA;KACtB;IAED,IAAI,aAA+C,CAAA;IAEnD,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,aAAa,GAAG,MAAM,EAAE,CAAA;KACzB;SAAM,IAAI,SAAS,IAAI,MAAM,EAAE;QAC9B,aAAa,GAAG,MAAM,CAAC,OAAO,CAAA;KAC/B;SAAM;QACL,aAAa,GAAG,MAAM,CAAA;KACvB;IAED,OAAO,aAAa,CAAA;AACtB,CAAC;AAED,MAAM,CAAC,IAAM,YAAY,GAAG,UAC1B,WAAuC,EACvC,MAAmC,EACnC,SAAgC;IAAhC,0BAAA,EAAA,wBAAgC;IAEhC,IAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,CAAA;IAC1C,cAAc,CAAC,OAAO,GAAG,WAAW,CAAA;IAEpC,SAAS,CAAC;QACR,IAAM,OAAO,GAAG,UAAC,KAAU;YACzB,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;YACzD,IACE,OAAO,CAAC,IAAI,CAAC,UAAC,UAAU;gBACtB,IAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,CAAgB,CAAA;gBACjE,OAAO,CAAC,aAAa,KAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,CAAA;YAChE,CAAC,CAAC,EACF;gBACA,OAAM;aACP;YACD,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC/B,CAAC,CAAA;QAED,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAE7C,OAAO;YACL,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAClD,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAA;AACzB,CAAC,CAAA","sourcesContent":["import { useRef, useEffect, MutableRefObject } from 'react'\n\nconst defaultEvent = 'click'\n\ntype EventType = MouseEvent | TouchEvent\n\ntype BasicTarget<T = HTMLElement> =\n  | (() => T | null)\n  | T\n  | null\n  | MutableRefObject<T | null | undefined>\n\ntype TargetElement = HTMLElement | Element | Document | Window\n\nfunction getTargetElement(\n  target?: BasicTarget<TargetElement>,\n  defaultElement?: TargetElement\n): TargetElement | undefined | null {\n  if (!target) {\n    return defaultElement\n  }\n\n  let targetElement: TargetElement | undefined | null\n\n  if (typeof target === 'function') {\n    targetElement = target()\n  } else if ('current' in target) {\n    targetElement = target.current\n  } else {\n    targetElement = target\n  }\n\n  return targetElement\n}\n\nexport const useClickAway = (\n  onClickAway: (event: EventType) => void,\n  target: BasicTarget | BasicTarget[],\n  eventName: string = defaultEvent\n) => {\n  const onClickAwayRef = useRef(onClickAway)\n  onClickAwayRef.current = onClickAway\n\n  useEffect(() => {\n    const handler = (event: any) => {\n      const targets = Array.isArray(target) ? target : [target]\n      if (\n        targets.some((targetItem) => {\n          const targetElement = getTargetElement(targetItem) as HTMLElement\n          return !targetElement || targetElement?.contains(event.target)\n        })\n      ) {\n        return\n      }\n      onClickAwayRef.current(event)\n    }\n\n    document.addEventListener(eventName, handler)\n\n    return () => {\n      document.removeEventListener(eventName, handler)\n    }\n  }, [target, eventName])\n}\n"]}