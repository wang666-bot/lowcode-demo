var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { Checkbox } from '@alifd/next';
import { completedKeys, getCompatibleAllSelected } from './utils';
// 重写表格表头Checkbox（节点状态按全完整数据计算，节点操作按筛选数据计算）
var newCheckbox = function (selected, flatDataSource, flatFilteredDataSource, primaryKey, disabled, readOnly, checkStrictly, onChange) {
    return function () {
        // 全选框是否选中
        var checked = Boolean((selected === null || selected === void 0 ? void 0 : selected.length) &&
            (selected === null || selected === void 0 ? void 0 : selected.length) ===
                flatDataSource.filter(function (item) { return !item.disabled; }).length);
        // 全选框是否未完全选中
        var indeterminate = Boolean((selected === null || selected === void 0 ? void 0 : selected.length) && !checked);
        var onInnerChange = function (checked) {
            if (!readOnly) {
                var isSelected = checked;
                // 当前可执行全选的keys
                var usableKeys_1 = flatFilteredDataSource
                    .filter(function (item) { return !item.disabled; })
                    .map(function (item) { return item === null || item === void 0 ? void 0 : item[primaryKey]; });
                // 在筛选状态下（按钮的indeterminate状态处于异常）需要通过数据对比判断是否处于全选中状态
                if (getCompatibleAllSelected(selected, flatFilteredDataSource, usableKeys_1, checkStrictly, primaryKey)) {
                    isSelected = false;
                }
                var newSelected = [];
                if (isSelected) {
                    // 执行全选
                    newSelected = __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(selected), false), __read(usableKeys_1), false))), false);
                }
                else {
                    // 执行取消全选
                    newSelected = selected.filter(function (key) { return !usableKeys_1.includes(key); });
                }
                newSelected = completedKeys(flatDataSource, newSelected, primaryKey);
                onChange === null || onChange === void 0 ? void 0 : onChange(newSelected);
            }
        };
        return (React.createElement(Checkbox, { key: "titleAddons", disabled: disabled, checked: checked, indeterminate: indeterminate, onChange: onInnerChange }));
    };
};
var useTitleAddon = function (selected, flatDataSource, flatFilteredDataSource, primaryKey, mode, disabled, readOnly, checkStrictly, onChange) {
    if (mode === 'single') {
        return {};
    }
    return {
        titleProps: function () { return ({
            style: { display: 'none' },
        }); },
        titleAddons: newCheckbox(selected, flatDataSource, flatFilteredDataSource, primaryKey, disabled, readOnly, checkStrictly, onChange),
    };
};
export { useTitleAddon };
//# sourceMappingURL=useTitleAddon.js.map