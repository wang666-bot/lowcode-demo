{"version":3,"file":"useCheckSlackly.js","sourceRoot":"","sources":["../../src/select-table/useCheckSlackly.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,WAAW,EACX,cAAc,EACd,aAAa,EACb,wBAAwB,GACzB,MAAM,SAAS,CAAA;AAEhB;;;;;;;GAOG;AACH,IAAM,gBAAgB,GAAG,UACvB,MAAW,EACX,cAAmB,EACnB,QAAe,EACf,UAAkB;IAElB,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE;QAC1C,OAAO,SAAS,CAAA;KACjB;IACD,IAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CACrC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,UAAU,CAAC,EAAvC,CAAuC,CAClD,CAAA;IACD,OAAO,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,IAAI,SAAS,CAAA;AAChF,CAAC,CAAA;AAaD,iCAAiC;AACjC,IAAM,eAAe,GAAkB,UACrC,eAAe,EAAE,oBAAoB;AACrC,QAAQ,EAAE,oBAAoB;AAC9B,cAAc,EACd,sBAAsB,EACtB,UAAU,EACV,aAAa;IAEb,IAAI,UAAU,GAAG,eAAe,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAA,CAAC,YAAY;IAEtE,IAAM,UAAU,GAAG,uCAAI,eAAe,kBAAK,QAAQ,UAAE,IAAI,CACvD,UAAC,GAAG,IAAK,OAAA,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAA1D,CAA0D,CAAC,0BAA0B;KAC/F,CAAA;IACD,qBAAqB;IACrB,IAAM,aAAa,GAAG,sBAAsB,CAAC,IAAI,CAC/C,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,UAAU,CAAC,KAAK,UAAU,EAA/B,CAA+B,CAC1C,CAAA;IACD,IAAM,eAAe,GAAG,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;IAEvE,oDAAoD;IACpD,IACE,wBAAwB,CACtB,QAAQ,EACR,aAAa,CAAC,QAAQ,EACtB,eAAe,EACf,aAAa,EACb,UAAU,CACX,EACD;QACA,UAAU,GAAG,KAAK,CAAA;KACnB;IAED,IAAI,WAAW,GAAG,EAAE,CAAA;IACpB,IAAI,UAAU,EAAE;QACd,iBAAiB;QACjB,WAAW,4BAAO,IAAI,GAAG,sDAAK,QAAQ,YAAE,UAAU,kBAAK,eAAe,UAAE,SAAC,CAAA;KAC1E;SAAM;QACL,iBAAiB;QACjB,WAAW,GAAG,QAAQ,CAAC,MAAM,CAC3B,UAAC,GAAG,IAAK,OAAA,CAAC,eAAC,UAAU,UAAK,eAAe,UAAE,QAAQ,CAAC,GAAG,CAAC,EAA/C,CAA+C,CACzD,CAAA;KACF;IAED,WAAW,GAAG,aAAa,CAAC,cAAc,EAAE,WAAW,EAAE,UAAU,CAAC,CAAA;IAEpE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,CAAA;AACzC,CAAC,CAAA;AAED,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,CAAA","sourcesContent":["import {\n  getTreeKeys,\n  hasSelectedKey,\n  completedKeys,\n  getCompatibleAllSelected,\n} from './utils'\n\n/**\n * 判断该字段的 indeterminate 属性\n * @param record 当前字段\n * @param flatDataSource 完整平铺数据\n * @param selected 已选中的字段值集合\n * @param primaryKey 键名称\n * @returns indeterminate 属性值\n */\nconst getIndeterminate = (\n  record: any,\n  flatDataSource: any,\n  selected: any[],\n  primaryKey: string\n) => {\n  if (selected?.includes(record[primaryKey])) {\n    return undefined\n  }\n  const wholeRecord = flatDataSource.find(\n    (item) => item[primaryKey] === record[primaryKey]\n  )\n  return hasSelectedKey(wholeRecord.children, selected, primaryKey) || undefined\n}\n\ninterface ICheckSlackly {\n  (\n    currentSelected: any[],\n    selected: any[],\n    flatDataSource: any[],\n    flatFilteredDataSource: any[],\n    primaryKey: string,\n    checkStrictly: boolean\n  ): { selectedRowKeys: any[] }\n}\n\n// 父子节点（节点状态按全完整数据计算，节点操作按筛选数据计算）\nconst useCheckSlackly: ICheckSlackly = (\n  currentSelected, // onChange 返回的 keys\n  selected, // Table UI 展示的 keys\n  flatDataSource,\n  flatFilteredDataSource,\n  primaryKey,\n  checkStrictly\n) => {\n  let isSelected = currentSelected.length > selected.length // 判断是选中还是取消\n\n  const currentKey = [...currentSelected, ...selected].find(\n    (key) => !(currentSelected.includes(key) && selected.includes(key)) // 当前变化key不同时存在于两个selected\n  )\n  // 从过滤后的数据中获取当前record\n  const currentRecord = flatFilteredDataSource.find(\n    (item) => item[primaryKey] === currentKey\n  )\n  const currentTreeKeys = getTreeKeys(currentRecord.children, primaryKey)\n\n  // 在筛选状态下（按钮的indeterminate状态处于异常）需要通过数据对比判断是否处于全选中状态\n  if (\n    getCompatibleAllSelected(\n      selected,\n      currentRecord.children,\n      currentTreeKeys,\n      checkStrictly,\n      primaryKey\n    )\n  ) {\n    isSelected = false\n  }\n\n  let newSelected = []\n  if (isSelected) {\n    // 选中当前key及其子keys\n    newSelected = [...new Set([...selected, currentKey, ...currentTreeKeys])]\n  } else {\n    // 移除当前key及其子keys\n    newSelected = selected.filter(\n      (key) => ![currentKey, ...currentTreeKeys].includes(key)\n    )\n  }\n\n  newSelected = completedKeys(flatDataSource, newSelected, primaryKey)\n\n  return { selectedRowKeys: newSelected }\n}\n\nexport { useCheckSlackly, getIndeterminate }\n"]}