{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/form-step/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport { define, observable, model, markRaw, action } from '@formily/reactive'\nimport cls from 'classnames'\nimport {\n  StepProps as StepsProps,\n  ItemProps as StepProps,\n} from '@alifd/next/lib/step'\nimport { Form, VoidField } from '@formily/core'\nimport {\n  connect,\n  useField,\n  observer,\n  useFieldSchema,\n  RecursionField,\n} from '@formily/react'\nimport { Schema, SchemaKey } from '@formily/json-schema'\nimport { Step as Steps } from '@alifd/next'\nimport { usePrefixCls } from '../__builtins__'\n\nexport interface IFormStep {\n  connect: (steps: SchemaStep[], field: VoidField) => void\n  current: number\n  allowNext: boolean\n  allowBack: boolean\n  setCurrent(key: number): void\n  submit: Form['submit']\n  next(): void\n  back(): void\n}\n\nexport interface IFormStepProps extends StepsProps {\n  formStep?: IFormStep\n}\n\ntype ComposedFormTab = React.FC<React.PropsWithChildren<IFormStepProps>> & {\n  StepPane?: React.FC<React.PropsWithChildren<StepProps>>\n  createFormStep?: (defaultCurrent?: number) => IFormStep\n}\n\ntype SchemaStep = {\n  name: SchemaKey\n  props: any\n  schema: Schema\n}\n\ntype FormStepEnv = {\n  form: Form\n  field: VoidField\n  steps: SchemaStep[]\n}\n\nconst parseSteps = (schema: Schema) => {\n  const steps: SchemaStep[] = []\n  schema.mapProperties((schema, name) => {\n    if (schema['x-component']?.indexOf('StepPane') > -1) {\n      steps.push({\n        name,\n        props: schema['x-component-props'],\n        schema,\n      })\n    }\n  })\n  return steps\n}\n\nconst createFormStep = (defaultCurrent = 0): IFormStep => {\n  const env: FormStepEnv = define(\n    {\n      form: null,\n      field: null,\n      steps: [],\n    },\n    {\n      form: observable.ref,\n      field: observable.ref,\n      steps: observable.shallow,\n    }\n  )\n\n  const setDisplay = action.bound((target: number) => {\n    const currentStep = env.steps[target]\n    env.steps.forEach(({ name }) => {\n      env.form.query(`${env.field.address}.${name}`).take((field) => {\n        if (name === currentStep.name) {\n          field.setDisplay('visible')\n        } else {\n          field.setDisplay('hidden')\n        }\n      })\n    })\n  })\n\n  const next = () => {\n    if (formStep.allowNext) {\n      formStep.setCurrent(formStep.current + 1)\n    }\n  }\n\n  const back = () => {\n    if (formStep.allowBack) {\n      formStep.setCurrent(formStep.current - 1)\n    }\n  }\n\n  const formStep: IFormStep = model({\n    connect(steps, field) {\n      env.steps = steps\n      env.form = field?.form\n      env.field = field\n    },\n    current: defaultCurrent,\n    setCurrent(key: number) {\n      setDisplay(key)\n      formStep.current = key\n    },\n    get allowNext() {\n      return formStep.current < env.steps.length - 1\n    },\n    get allowBack() {\n      return formStep.current > 0\n    },\n    async next() {\n      try {\n        await env.form.validate()\n        if (env.form.valid) {\n          next()\n        }\n      } catch {}\n    },\n    async back() {\n      back()\n    },\n    async submit(onSubmit) {\n      return env.form?.submit?.(onSubmit)\n    },\n  })\n  return markRaw(formStep)\n}\n\nexport const FormStep: ComposedFormTab = connect(\n  observer(({ formStep, className, ...props }: IFormStepProps) => {\n    const field = useField<VoidField>()\n    const prefixCls = usePrefixCls('formily-step', props)\n    const schema = useFieldSchema()\n    const steps = parseSteps(schema)\n    const current = props.current || formStep?.current || 0\n    formStep?.connect?.(steps, field)\n    return (\n      <div className={cls(prefixCls, className)}>\n        <Steps\n          {...props}\n          style={{ marginBottom: 10, ...props.style }}\n          current={current}\n        >\n          {steps.map(({ props }, key) => {\n            return <Steps.Item {...props} key={key} />\n          })}\n        </Steps>\n        {steps.map(({ name, schema }, key) => {\n          if (key !== current) return\n          return <RecursionField key={key} name={name} schema={schema} />\n        })}\n      </div>\n    )\n  })\n)\n\nconst StepPane: React.FC<React.PropsWithChildren<StepProps>> = ({\n  children,\n}) => {\n  return <Fragment>{children}</Fragment>\n}\n\nFormStep.StepPane = StepPane\nFormStep.createFormStep = createFormStep\n\nexport default FormStep\n"]}