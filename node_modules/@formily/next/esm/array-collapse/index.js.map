{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-collapse/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAC5D,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEnD,OAAO,EACL,cAAc,EACd,QAAQ,EACR,cAAc,EACd,QAAQ,GAET,MAAM,gBAAgB,CAAA;AACvB,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAA;AACvC,OAAO,GAAG,MAAM,YAAY,CAAA;AAC5B,OAAO,SAA+C,MAAM,eAAe,CAAA;AAC3E,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAA;AAarD,IAAM,mBAAmB,GAAG,UAAC,MAAe;;IAC1C,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,mDAAG,UAAU,CAAC,IAAG,CAAC,CAAC,CAAA;AAC1D,CAAC,CAAA;AAED,IAAM,gBAAgB,GAAG,UAAC,MAAe;;IACvC,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,mDAAG,OAAO,CAAC,IAAG,CAAC,CAAC,CAAA;AACvD,CAAC,CAAA;AAED,IAAM,iBAAiB,GAAG,UAAC,MAAe;;IACxC,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,mDAAG,QAAQ,CAAC,IAAG,CAAC,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,IAAM,iBAAiB,GAAG,UAAC,MAAe;;IACxC,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,mDAAG,QAAQ,CAAC,IAAG,CAAC,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,IAAM,mBAAmB,GAAG,UAAC,MAAe;;IAC1C,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,mDAAG,UAAU,CAAC,IAAG,CAAC,CAAC,CAAA;AAC1D,CAAC,CAAA;AAED,IAAM,oBAAoB,GAAG,UAAC,MAAe;IAC3C,OAAO,CACL,mBAAmB,CAAC,MAAM,CAAC;QAC3B,iBAAiB,CAAC,MAAM,CAAC;QACzB,mBAAmB,CAAC,MAAM,CAAC;QAC3B,iBAAiB,CAAC,MAAM,CAAC,CAC1B,CAAA;AACH,CAAC,CAAA;AAED,IAAM,KAAK,GAAG,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,EAA9C,CAA8C,CAAA;AAE/E,IAAM,uBAAuB,GAAG,UAC9B,gBAAwB,EACxB,qBAA6B;IAE7B,IAAI,gBAAgB,GAAG,qBAAqB;QAAE,OAAO,KAAK,CAAC,gBAAgB,CAAC,CAAA;IAC5E,OAAO,KAAK,CAAC,qBAAqB,CAAC,CAAA;AACrC,CAAC,CAAA;AAED,IAAM,kBAAkB,GAAG,UAAC,YAAsB,EAAE,KAAa;IAC/D,IAAI,YAAY,CAAC,MAAM,IAAI,KAAK;QAAE,OAAO,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACnE,OAAO,YAAY,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;QAClC,IAAI,GAAG,GAAG,KAAK;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACvC,IAAI,GAAG,KAAK,KAAK;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;QACpD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA;IAC5B,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,aAAa,GAA0B,QAAQ,CAC1D,UAAC,EAAmC;IAAjC,IAAA,qBAAqB,2BAAA,EAAK,KAAK,cAAjC,yBAAmC,CAAF;IAChC,IAAM,KAAK,GAAG,QAAQ,EAAc,CAAA;IACpC,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;IAE1D,IAAA,KAAA,OAA8B,QAAQ,CAC1C,uBAAuB,CAAC,UAAU,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAClE,IAAA,EAFM,UAAU,QAAA,EAAE,aAAa,QAE/B,CAAA;IACD,IAAM,MAAM,GAAG,cAAc,EAAE,CAAA;IAC/B,IAAM,SAAS,GAAG,YAAY,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAA;IAC/D,SAAS,CAAC;QACR,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,EAAE;YACxC,aAAa,CACX,uBAAuB,CAAC,UAAU,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAClE,CAAA;SACF;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAA;IAC9B,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IACnD,IAAA,KAAK,GAA6C,KAAK,MAAlD,EAAE,MAAM,GAAqC,KAAK,OAA1C,EAAE,QAAQ,GAA2B,KAAK,SAAhC,EAAE,UAAU,GAAe,KAAK,WAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAU;IAE/D,IAAM,cAAc,GAAG;QACrB,OAAO,MAAM,CAAC,gBAAgB,CAAC,UAAC,QAAQ,EAAE,MAAM,EAAE,GAAG;YACnD,IAAI,mBAAmB,CAAC,MAAM,CAAC,EAAE;gBAC/B,OAAO,oBAAC,cAAc,IAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAI,CAAA;aACrD;YACD,OAAO,QAAQ,CAAA;QACjB,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC,CAAA;IACD,IAAM,WAAW,GAAG;QAClB,IAAI,UAAU,CAAC,MAAM;YAAE,OAAM;QAC7B,OAAO,CACL,oBAAC,IAAI,IAAC,SAAS,EAAE,GAAG,CAAC,UAAG,SAAS,UAAO,EAAE,KAAK,CAAC,SAAS,CAAC;YACxD,oBAAC,KAAK,OAAG,CACJ,CACR,CAAA;IACH,CAAC,CAAA;IAED,IAAM,WAAW,GAAG;QAClB,OAAO,CACL,oBAAC,QAAQ,eACH,KAAK,IACT,QAAQ,EAAE,cAAO,CAAC,EAClB,YAAY,EAAE,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EACpC,QAAQ,EAAE,UAAC,IAAc,IAAK,OAAA,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAtC,CAAsC,EACpE,SAAS,EAAE,GAAG,CAAC,UAAG,SAAS,UAAO,EAAE,KAAK,CAAC,SAAS,CAAC,KAEnD,UAAU,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK;YAC1B,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;gBACvC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAA;YAChB,IAAM,UAAU,GAAG,KAAK;iBACrB,KAAK,CAAC,UAAG,KAAK,CAAC,OAAO,cAAI,KAAK,CAAE,CAAC;iBAClC,GAAG,CAAC,gBAAgB,CAAC,CAAA;YACxB,IAAM,KAAK,GAAe,KAAK,CAAC,mBAAmB,CAAC,CAAA;YACpD,IAAM,KAAK,GAAG;gBACZ,IAAM,KAAK,GAAG,UACZ,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,KAAK,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,CAAA,IAAI,KAAK,CAAC,KAAK,CAChD,CAAA;gBACF,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;gBACxC,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC;oBACvC,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,UAAG,IAAI,QAAK;iBACtB,CAAC,CAAA;gBACF,OAAO,CACL,oBAAC,SAAS,CAAC,IAAI,IAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI;oBACxC,6BACE,SAAS,EAAE,GAAG,CAAC,UAAG,SAAS,gBAAa,EAAE,KAAK,CAAC,SAAS,CAAC;wBAE1D;4BACE,oBAAC,cAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;oCACvB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;wCAAE,OAAO,KAAK,CAAA;oCAC3C,OAAO,IAAI,CAAA;gCACb,CAAC,EACD,oBAAoB,SACpB;4BACD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CACf,oBAAC,KAAK,IAAC,SAAS,EAAC,cAAc,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,IACjD,KAAK,CACA,CACT,CAAC,CAAC,CAAC,CACF,KAAK,CACN,CACG;wBACN;4BACE,oBAAC,cAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;oCACvB,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC;wCAAE,OAAO,KAAK,CAAA;oCAC/C,OAAO,IAAI,CAAA;gCACb,CAAC,EACD,oBAAoB,SACpB,CACE,CACF,CACS,CAClB,CAAA;YACH,CAAC,CAAA;YAED,IAAM,OAAO,GAAG,CACd,oBAAC,cAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;oBACvB,IAAI,gBAAgB,CAAC,MAAM,CAAC;wBAAE,OAAO,KAAK,CAAA;oBAC1C,IAAI,oBAAoB,CAAC,MAAM,CAAC;wBAAE,OAAO,KAAK,CAAA;oBAC9C,OAAO,IAAI,CAAA;gBACb,CAAC,GACD,CACH,CAAA;YACD,OAAO,CACL,oBAAC,QAAQ,CAAC,KAAK,eACT,KAAK,EACL,UAAU,IACd,QAAQ,EAAE,cAAO,CAAC,EAClB,GAAG,EAAE,KAAK,EACV,KAAK,EAAE,KAAK,EAAE;gBAEd,oBAAC,SAAS,CAAC,IAAI,IACb,KAAK,EAAE,KAAK,EACZ,GAAG,EAAE,KAAK,EACV,MAAM,EAAE,sBAAM,OAAA,MAAA,KAAK,CAAC,KAAK,0CAAG,KAAK,CAAC,CAAA,EAAA,IAEjC,OAAO,CACO,CACF,CAClB,CAAA;QACH,CAAC,CAAC,CACO,CACZ,CAAA;IACH,CAAC,CAAA;IACD,OAAO,CACL,oBAAC,SAAS,IACR,KAAK,EAAE,UAAC,KAAK;YACX,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,KAAK,CAAC,CAAA;YACd,aAAa,CAAC,kBAAkB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAA;QACtD,CAAC,EACD,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,UAAU;QAErB,WAAW,EAAE;QACb,WAAW,EAAE;QACb,cAAc,EAAE,CACP,CACb,CAAA;AACH,CAAC,CACF,CAAA;AAED,IAAM,aAAa,GAAkD,UAAC,EAErE;QADC,QAAQ,cAAA;IAER,OAAO,oBAAC,QAAQ,QAAE,QAAQ,CAAY,CAAA;AACxC,CAAC,CAAA;AAED,aAAa,CAAC,WAAW,GAAG,eAAe,CAAA;AAE3C,aAAa,CAAC,YAAY,GAAG;IAC3B,qBAAqB,EAAE,CAAC;CACzB,CAAA;AACD,aAAa,CAAC,WAAW,GAAG,eAAe,CAAA;AAC3C,aAAa,CAAC,aAAa,GAAG,aAAa,CAAA;AAE3C,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;AAE9B,eAAe,aAAa,CAAA","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport { Badge, Card, Collapse } from '@alifd/next'\nimport { ArrayField } from '@formily/core'\nimport {\n  RecursionField,\n  useField,\n  useFieldSchema,\n  observer,\n  ISchema,\n} from '@formily/react'\nimport { toArr } from '@formily/shared'\nimport cls from 'classnames'\nimport ArrayBase, { ArrayBaseMixins, IArrayBaseProps } from '../array-base'\nimport { usePrefixCls, Empty } from '../__builtins__'\nimport { CollapseProps, PanelProps } from '@alifd/next/lib/collapse'\n\nexport interface IArrayCollapseProps extends CollapseProps {\n  defaultOpenPanelCount?: number\n}\ntype ComposedArrayCollapse = React.FC<\n  React.PropsWithChildren<IArrayCollapseProps & IArrayBaseProps>\n> &\n  ArrayBaseMixins & {\n    CollapsePanel?: React.FC<React.PropsWithChildren<PanelProps>>\n  }\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf?.('Addition') > -1\n}\n\nconst isIndexComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf?.('Index') > -1\n}\n\nconst isRemoveComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf?.('Remove') > -1\n}\n\nconst isMoveUpComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf?.('MoveUp') > -1\n}\n\nconst isMoveDownComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf?.('MoveDown') > -1\n}\n\nconst isOperationComponent = (schema: ISchema) => {\n  return (\n    isAdditionComponent(schema) ||\n    isRemoveComponent(schema) ||\n    isMoveDownComponent(schema) ||\n    isMoveUpComponent(schema)\n  )\n}\n\nconst range = (count: number) => Array.from({ length: count }).map((_, i) => i)\n\nconst takeDefaultExpandedKeys = (\n  dataSourceLength: number,\n  defaultOpenPanelCount: number\n) => {\n  if (dataSourceLength < defaultOpenPanelCount) return range(dataSourceLength)\n  return range(defaultOpenPanelCount)\n}\n\nconst insertExpandedKeys = (expandedKeys: number[], index: number) => {\n  if (expandedKeys.length <= index) return expandedKeys.concat(index)\n  return expandedKeys.reduce((buf, key) => {\n    if (key < index) return buf.concat(key)\n    if (key === index) return buf.concat([key, key + 1])\n    return buf.concat(key + 1)\n  }, [])\n}\n\nexport const ArrayCollapse: ComposedArrayCollapse = observer(\n  ({ defaultOpenPanelCount, ...props }) => {\n    const field = useField<ArrayField>()\n    const dataSource = Array.isArray(field.value) ? field.value : []\n\n    const [expandKeys, setExpandKeys] = useState<number[]>(\n      takeDefaultExpandedKeys(dataSource.length, defaultOpenPanelCount)\n    )\n    const schema = useFieldSchema()\n    const prefixCls = usePrefixCls('formily-array-collapse', props)\n    useEffect(() => {\n      if (!field.modified && dataSource.length) {\n        setExpandKeys(\n          takeDefaultExpandedKeys(dataSource.length, defaultOpenPanelCount)\n        )\n      }\n    }, [dataSource.length, field])\n    if (!schema) throw new Error('can not found schema object')\n    const { onAdd, onCopy, onRemove, onMoveDown, onMoveUp } = props\n\n    const renderAddition = () => {\n      return schema.reduceProperties((addition, schema, key) => {\n        if (isAdditionComponent(schema)) {\n          return <RecursionField schema={schema} name={key} />\n        }\n        return addition\n      }, null)\n    }\n    const renderEmpty = () => {\n      if (dataSource.length) return\n      return (\n        <Card className={cls(`${prefixCls}-item`, props.className)}>\n          <Empty />\n        </Card>\n      )\n    }\n\n    const renderItems = () => {\n      return (\n        <Collapse\n          {...props}\n          onChange={() => {}}\n          expandedKeys={expandKeys.map(String)}\n          onExpand={(keys: string[]) => setExpandKeys(toArr(keys).map(Number))}\n          className={cls(`${prefixCls}-item`, props.className)}\n        >\n          {dataSource.map((item, index) => {\n            const items = Array.isArray(schema.items)\n              ? schema.items[index] || schema.items[0]\n              : schema.items\n            const panelProps = field\n              .query(`${field.address}.${index}`)\n              .get('componentProps')\n            const props: PanelProps = items['x-component-props']\n            const title = () => {\n              const title = `${\n                panelProps?.title || props?.title || field.title\n              }`\n              const path = field.address.concat(index)\n              const errors = field.form.queryFeedbacks({\n                type: 'error',\n                address: `${path}.**`,\n              })\n              return (\n                <ArrayBase.Item index={index} record={item}>\n                  <div\n                    className={cls(`${prefixCls}-item-title`, props.className)}\n                  >\n                    <div>\n                      <RecursionField\n                        schema={items}\n                        name={index}\n                        filterProperties={(schema) => {\n                          if (!isIndexComponent(schema)) return false\n                          return true\n                        }}\n                        onlyRenderProperties\n                      />\n                      {errors.length ? (\n                        <Badge className=\"errors-badge\" count={errors.length}>\n                          {title}\n                        </Badge>\n                      ) : (\n                        title\n                      )}\n                    </div>\n                    <div>\n                      <RecursionField\n                        schema={items}\n                        name={index}\n                        filterProperties={(schema) => {\n                          if (!isOperationComponent(schema)) return false\n                          return true\n                        }}\n                        onlyRenderProperties\n                      />\n                    </div>\n                  </div>\n                </ArrayBase.Item>\n              )\n            }\n\n            const content = (\n              <RecursionField\n                schema={items}\n                name={index}\n                filterProperties={(schema) => {\n                  if (isIndexComponent(schema)) return false\n                  if (isOperationComponent(schema)) return false\n                  return true\n                }}\n              />\n            )\n            return (\n              <Collapse.Panel\n                {...props}\n                {...panelProps}\n                onChange={() => {}}\n                key={index}\n                title={title()}\n              >\n                <ArrayBase.Item\n                  index={index}\n                  key={index}\n                  record={() => field.value?.[index]}\n                >\n                  {content}\n                </ArrayBase.Item>\n              </Collapse.Panel>\n            )\n          })}\n        </Collapse>\n      )\n    }\n    return (\n      <ArrayBase\n        onAdd={(index) => {\n          onAdd?.(index)\n          setExpandKeys(insertExpandedKeys(expandKeys, index))\n        }}\n        onCopy={onCopy}\n        onRemove={onRemove}\n        onMoveUp={onMoveUp}\n        onMoveDown={onMoveDown}\n      >\n        {renderEmpty()}\n        {renderItems()}\n        {renderAddition()}\n      </ArrayBase>\n    )\n  }\n)\n\nconst CollapsePanel: React.FC<React.PropsWithChildren<PanelProps>> = ({\n  children,\n}) => {\n  return <Fragment>{children}</Fragment>\n}\n\nCollapsePanel.displayName = 'CollapsePanel'\n\nArrayCollapse.defaultProps = {\n  defaultOpenPanelCount: 5,\n}\nArrayCollapse.displayName = 'ArrayCollapse'\nArrayCollapse.CollapsePanel = CollapsePanel\n\nArrayBase.mixin(ArrayCollapse)\n\nexport default ArrayCollapse\n"]}