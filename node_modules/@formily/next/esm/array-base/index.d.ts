import React from 'react';
import { Button } from '@alifd/next';
import { ButtonProps } from '@alifd/next/lib/button';
import { ArrayField } from '@formily/core';
import { Schema, JSXComponent } from '@formily/react';
export interface IArrayBaseAdditionProps extends ButtonProps {
    title?: string;
    method?: 'push' | 'unshift';
    defaultValue?: any;
    icon?: React.ReactNode;
}
export interface IArrayBaseOperationProps extends ButtonProps {
    title?: string;
    index?: number;
    ref?: React.Ref<Button>;
    icon?: React.ReactNode;
}
export interface IArrayBaseContext {
    props: IArrayBaseProps;
    field: ArrayField;
    schema: Schema;
}
export interface IArrayBaseItemProps {
    index: number;
    record: ((index: number) => Record<string, any>) | Record<string, any>;
}
export declare type ArrayBaseMixins = {
    Addition?: React.FC<React.PropsWithChildren<IArrayBaseAdditionProps>>;
    Remove?: React.FC<React.PropsWithChildren<IArrayBaseOperationProps & {
        index?: number;
    }>>;
    Copy?: React.FC<React.PropsWithChildren<IArrayBaseAdditionProps & IArrayBaseOperationProps & {
        index?: number;
    }>>;
    MoveUp?: React.FC<React.PropsWithChildren<IArrayBaseOperationProps & {
        index?: number;
    }>>;
    MoveDown?: React.FC<React.PropsWithChildren<IArrayBaseOperationProps & {
        index?: number;
    }>>;
    SortHandle?: React.FC<React.PropsWithChildren<IArrayBaseOperationProps & {
        index?: number;
    }>>;
    Index?: React.FC;
    useArray?: () => IArrayBaseContext;
    useIndex?: (index?: number) => number;
    useRecord?: (record?: number) => any;
};
export interface IArrayBaseProps {
    disabled?: boolean;
    onCopy?: (index: number) => void;
    onAdd?: (index: number) => void;
    onRemove?: (index: number) => void;
    onMoveDown?: (index: number) => void;
    onMoveUp?: (index: number) => void;
}
declare type ComposedArrayBase = React.FC<React.PropsWithChildren<IArrayBaseProps>> & ArrayBaseMixins & {
    Item?: React.FC<React.PropsWithChildren<IArrayBaseItemProps>>;
    mixin?: <T extends JSXComponent>(target: T) => T & ArrayBaseMixins;
};
export declare const ArrayBase: ComposedArrayBase;
export default ArrayBase;
