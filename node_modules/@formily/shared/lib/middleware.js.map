{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../src/middleware.ts"],"names":[],"mappings":";;;AAIO,IAAM,eAAe,GAAG,UAAC,OAAY,EAAE,GAAuB;IAAvB,oBAAA,EAAA,QAAuB;IACnE,IAAM,OAAO,GAAG,UAAC,OAAY,EAAE,GAAkB;QAC/C,IAAM,WAAW,GAAG,OAAO,CAAA;QAC3B,OAAO,OAAO,CAAC,OAAO,CACpB,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,UAAC,OAAO;YACtB,OAAA,OAAO,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,WAAW,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAA7C,CAA6C,CAC9C,CACF,CAAA;IACH,CAAC,CAAA;IACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,OAAO,CACL,OAAO,EACP,GAAG,CAAC,MAAM,CAAC,UAAC,OAAO;YACjB,OAAO,CAAC,OAAO,CAAC,CAAA;QAClB,CAAC,CAAC,CACH,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IACjB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAjBY,QAAA,eAAe,mBAiB3B","sourcesContent":["export interface IMiddleware<Payload = any, Result = any> {\n  (payload: Payload, next: (payload?: Payload) => Result): Result\n}\n\nexport const applyMiddleware = (payload: any, fns: IMiddleware[] = []) => {\n  const compose = (payload: any, fns: IMiddleware[]): Promise<any> => {\n    const prevPayload = payload\n    return Promise.resolve(\n      fns[0](payload, (payload) =>\n        compose(payload ?? prevPayload, fns.slice(1))\n      )\n    )\n  }\n  return new Promise((resolve, reject) => {\n    compose(\n      payload,\n      fns.concat((payload) => {\n        resolve(payload)\n      })\n    ).catch(reject)\n  })\n}\n"]}