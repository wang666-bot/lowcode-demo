{"version":3,"file":"clone.js","sourceRoot":"","sources":["../src/clone.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,uCAA6C;AAEtC,IAAM,YAAY,GAAG,UAAC,MAAW;IACtC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACzB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;KACvB;SAAM,IAAI,IAAA,qBAAU,EAAC,MAAM,CAAC,EAAE;QAC7B,IAAI,UAAU,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;YAC9C,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;YAC1B,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;YAC9B,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;YACjC,OAAO,MAAM,CAAA;SACd;QACD,IAAI,IAAA,eAAI,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;YACxB,OAAO,MAAM,CAAA;SACd;QACD,IAAI,IAAA,eAAI,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC1B,OAAO,MAAM,CAAA;SACd;QACD,oBACK,MAAM,EACV;KACF;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACrC,OAAO,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;KACtC;IACD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AA7BY,QAAA,YAAY,gBA6BxB;AAEM,IAAM,KAAK,GAAG,UAAC,MAAW;IAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACzB,IAAM,KAAG,GAAG,EAAE,CAAA;QACd,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI;YAClB,KAAG,CAAC,IAAI,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC,CAAA;QACvB,CAAC,CAAC,CAAA;QACF,OAAO,KAAG,CAAA;KACX;SAAM,IAAI,IAAA,qBAAU,EAAC,MAAM,CAAC,EAAE;QAC7B,IAAI,UAAU,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;YAC9C,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;YAC1B,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;YAC9B,OAAO,MAAM,CAAA;SACd;QACD,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;YACjC,OAAO,MAAM,CAAA;SACd;QACD,IAAI,IAAA,eAAI,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;YACxB,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAA;SACxB;QACD,IAAI,IAAA,eAAI,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC1B,OAAO,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAA;SAC1B;QACD,IAAM,GAAG,GAAG,EAAE,CAAA;QACd,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBAC3C,GAAG,CAAC,GAAG,CAAC,GAAG,IAAA,aAAK,EAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;aAC9B;SACF;QACD,OAAO,GAAG,CAAA;KACX;SAAM;QACL,OAAO,MAAM,CAAA;KACd;AACH,CAAC,CAAA;AApCY,QAAA,KAAK,SAoCjB","sourcesContent":["import { isFn, isPlainObj } from './checkers'\n\nexport const shallowClone = (values: any) => {\n  if (Array.isArray(values)) {\n    return values.slice(0)\n  } else if (isPlainObj(values)) {\n    if ('$$typeof' in values && '_owner' in values) {\n      return values\n    }\n    if (values['_isBigNumber']) {\n      return values\n    }\n    if (values['_isAMomentObject']) {\n      return values\n    }\n    if (values['_isJSONSchemaObject']) {\n      return values\n    }\n    if (isFn(values['toJS'])) {\n      return values\n    }\n    if (isFn(values['toJSON'])) {\n      return values\n    }\n    return {\n      ...values,\n    }\n  } else if (typeof values === 'object') {\n    return new values.constructor(values)\n  }\n  return values\n}\n\nexport const clone = (values: any) => {\n  if (Array.isArray(values)) {\n    const res = []\n    values.forEach((item) => {\n      res.push(clone(item))\n    })\n    return res\n  } else if (isPlainObj(values)) {\n    if ('$$typeof' in values && '_owner' in values) {\n      return values\n    }\n    if (values['_isBigNumber']) {\n      return values\n    }\n    if (values['_isAMomentObject']) {\n      return values\n    }\n    if (values['_isJSONSchemaObject']) {\n      return values\n    }\n    if (isFn(values['toJS'])) {\n      return values['toJS']()\n    }\n    if (isFn(values['toJSON'])) {\n      return values['toJSON']()\n    }\n    const res = {}\n    for (const key in values) {\n      if (Object.hasOwnProperty.call(values, key)) {\n        res[key] = clone(values[key])\n      }\n    }\n    return res\n  } else {\n    return values\n  }\n}\n"]}