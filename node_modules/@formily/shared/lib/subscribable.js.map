{"version":3,"file":"subscribable.js","sourceRoot":"","sources":["../src/subscribable.ts"],"names":[],"mappings":";;;AAAA,uCAA2D;AAC3D,iCAA8B;AAE9B;IAAA;QAAA,iBAgDC;QA/CC,gBAAW,GAGP;YACF,KAAK,EAAE,CAAC;SACT,CAAA;QAID,cAAS,GAAG,UAAC,QAA8B;YACzC,IAAI,IAAA,eAAI,EAAC,QAAQ,CAAC,EAAE;gBAClB,IAAM,KAAK,GAAW,KAAI,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAA;gBAChD,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAA;gBAClC,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;gBACxB,OAAO,KAAK,CAAA;aACb;QACH,CAAC,CAAA;QAED,gBAAW,GAAG,UAAC,KAAc;YAC3B,IAAI,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;gBAC3B,OAAO,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;aAC/B;iBAAM,IAAI,CAAC,KAAK,EAAE;gBACjB,KAAI,CAAC,WAAW,GAAG;oBACjB,KAAK,EAAE,CAAC;iBACT,CAAA;aACF;QACH,CAAC,CAAA;QAED,WAAM,GAAG,UAAC,OAAiB,EAAE,MAAgB;YAC3C,IAAI,KAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,KAAI,CAAC,YAAY,IAAI,IAAA,eAAI,EAAC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;oBACvD,IAAI,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,EAAE,OAAO,CAAC,KAAK,KAAK,EAAE;wBAC1D,OAAM;qBACP;iBACF;aACF;YACD,IAAI,MAAM;gBAAE,OAAM;YAClB,IAAM,MAAM,GAAG,UAAC,OAAgB;gBAC9B,IAAI,KAAI,CAAC,YAAY,IAAI,IAAA,eAAI,EAAC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;oBACvD,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,EAAE,OAAO,CAAC,CAAA;iBACpD;gBACD,OAAO,OAAO,CAAA;YAChB,CAAC,CAAA;YACD,IAAA,YAAI,EAAC,KAAI,CAAC,WAAW,EAAE,UAAC,QAAa;gBACnC,IAAI,IAAA,eAAI,EAAC,QAAQ,CAAC;oBAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA;YAC/C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;IACH,CAAC;IAAD,mBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,oCAAY","sourcesContent":["import { isFn, Subscriber, Subscription } from './checkers'\nimport { each } from './array'\n\nexport class Subscribable<Payload = any> {\n  subscribers: {\n    index?: number\n    [key: number]: Subscriber<Payload>\n  } = {\n    index: 0,\n  }\n\n  subscription: Subscription<Payload>\n\n  subscribe = (callback?: Subscriber<Payload>): number => {\n    if (isFn(callback)) {\n      const index: number = this.subscribers.index + 1\n      this.subscribers[index] = callback\n      this.subscribers.index++\n      return index\n    }\n  }\n\n  unsubscribe = (index?: number) => {\n    if (this.subscribers[index]) {\n      delete this.subscribers[index]\n    } else if (!index) {\n      this.subscribers = {\n        index: 0,\n      }\n    }\n  }\n\n  notify = (payload?: Payload, silent?: boolean) => {\n    if (this.subscription) {\n      if (this.subscription && isFn(this.subscription.notify)) {\n        if (this.subscription.notify.call(this, payload) === false) {\n          return\n        }\n      }\n    }\n    if (silent) return\n    const filter = (payload: Payload) => {\n      if (this.subscription && isFn(this.subscription.filter)) {\n        return this.subscription.filter.call(this, payload)\n      }\n      return payload\n    }\n    each(this.subscribers, (callback: any) => {\n      if (isFn(callback)) callback(filter(payload))\n    })\n  }\n}\n"]}