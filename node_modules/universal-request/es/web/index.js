import { ERROR_REQUEST_TIMEOUT, ERROR_REQUEST_ABORT } from '../types';
import { applyParamToURL, object2json, checkIsApplyDataToURL, isObject, isPlainObject } from '../utils';
export default function requestXHR(options) {
  options.headers = Object.assign({
    'Accept': 'application/json, text/plain, */*'
  }, options.headers);

  var _Object$assign = Object.assign({
    withCredentials: true,
    method: 'GET',
    validateStatus: function (status) {
      return status >= 200 && status < 300 || status === 304;
    }
  }, options),
      validateStatus = _Object$assign.validateStatus,
      url = _Object$assign.url,
      method = _Object$assign.method,
      withCredentials = _Object$assign.withCredentials,
      headers = _Object$assign.headers,
      data = _Object$assign.data,
      timeout = _Object$assign.timeout,
      dataType = _Object$assign.dataType;

  return new Promise(function (resolve, reject) {
    var timer;
    var requestData;
    var xhr = new XMLHttpRequest();

    var clean = function () {
      clearTimeout(timer);
    };

    timer = window.setTimeout(function () {
      clean();
      reject(ERROR_REQUEST_TIMEOUT);
      xhr.abort();
    }, timeout);

    xhr.onreadystatechange = function () {
      if (!xhr || xhr.readyState !== 4) {
        return;
      }

      clean();

      if (!validateStatus(xhr.status)) {
        // TODO Detailed error message
        return reject({
          code: ERROR_REQUEST_ABORT.code,
          message: "" + JSON.stringify({
            status: xhr.status
          })
        });
      }

      var headers = xhr.getAllResponseHeaders();
      var arr = headers.trim().split(/[\r\n]+/);
      var headerMap = {};
      arr.forEach(function (line) {
        var parts = line.split(': ');
        var header = parts.shift();
        var value = parts.join(': ');
        headerMap[header] = value;
      });
      resolve({
        data: xhr.response,
        status: xhr.status,
        headers: headerMap
      });
    };

    xhr.responseType = dataType || '';

    if (method === 'GET' || checkIsApplyDataToURL(headers)) {
      xhr.open(method, applyParamToURL(data, url), true);
    } else {
      xhr.open(method, url, true);
    }

    xhr.withCredentials = withCredentials;

    if (headers) {
      Object.keys(headers || []).forEach(function (key) {
        xhr.setRequestHeader(key, String(headers[key]));
      });
    }

    if (method === 'GET') {
      requestData = null;
    } else {
      requestData = data;
    }

    if (isObject(requestData) && isPlainObject(requestData)) {
      requestData = object2json(requestData);
    }

    xhr.send(requestData);
  });
}