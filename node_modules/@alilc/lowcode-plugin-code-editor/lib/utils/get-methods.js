"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.getMethods = void 0;
var _traverse = _interopRequireDefault(require("@babel/traverse"));
var _parser = require("@babel/parser");
var _core = require("@babel/core");
var _types = require("@babel/types");
var _transform = require("./transform");
var _defaultBabelConfig = require("../config/default-babel-config");
/**
 * get all methods from code-editor-pane
 */
var getMethods = exports.getMethods = function getMethods(ast) {
  var methods = {};
  var errorsByMethods = {};
  (0, _traverse["default"])(ast, {
    enter: function enter(path) {
      if (!path.isClassMethod()) {
        return;
      }
      var node = path.node;
      var name = node.key.name;
      var params = node.params;
      var body = node.body;
      // creat empty AST
      var code = (0, _parser.parse)('');
      code.program.body.push((0, _types.functionDeclaration)((0, _types.identifier)(name), params.map(function (p) {
        if (p.type === 'Identifier') {
          return (0, _types.identifier)(p.name);
        } else {
          // 解构语法，或者 ...args
          // 直接返回 ...args，不需要额外的构造
          return p;
        }
      }), body, node.generator, node.async));
      var codeStr = (0, _core.transformFromAst)(code).code;
      var _transformJS = (0, _transform.transformJS)(codeStr, _defaultBabelConfig.defaultBabelConfig),
        hasError = _transformJS.hasError,
        errorInfo = _transformJS.errorInfo,
        _transformJS$code = _transformJS.code,
        compiledCode = _transformJS$code === void 0 ? '' : _transformJS$code;
      if (hasError && errorInfo) {
        errorsByMethods[name] = errorInfo;
      }
      methods[name] = {
        type: 'JSFunction',
        value: compiledCode,
        source: codeStr
      };
    }
  });
  return {
    methods: methods,
    errorsByMethods: errorsByMethods
  };
};