"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.stateParser = void 0;
var _traverse = _interopRequireDefault(require("@babel/traverse"));
var t = _interopRequireWildcard(require("@babel/types"));
var _parser = require("@babel/parser");
var _core = require("@babel/core");
var _transform = require("./transform");
var _defaultBabelConfig = require("../config/default-babel-config");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var stateParser = exports.stateParser = function stateParser(ast) {
  var state = {};
  (0, _traverse["default"])(ast, {
    enter: function enter(path) {
      // get state identifier or literal
      if (path.isIdentifier({
        name: 'state'
      }) || path.isLiteral({
        value: 'state'
      })) {
        var _path$container, _path$container$value;
        var properties = (_path$container = path.container) === null || _path$container === void 0 ? void 0 : (_path$container$value = _path$container.value) === null || _path$container$value === void 0 ? void 0 : _path$container$value.properties;
        if (properties) {
          properties.forEach(function (property) {
            // creat empty AST
            var code = (0, _parser.parse)('');
            code.program.body.push(t.variableDeclaration('var', [t.variableDeclarator(t.identifier('name'), property.value)]));
            var codeStr = (0, _core.transformFromAst)(code).code;
            var compiledCode = (0, _transform.transformJS)(codeStr, _defaultBabelConfig.defaultBabelConfig).code;
            if (compiledCode) {
              var _property$key$name;
              state[(_property$key$name = property.key.name) !== null && _property$key$name !== void 0 ? _property$key$name : property.key.extra.rawValue] = {
                type: 'JSExpression',
                value: compiledCode.replace('var name = ', '').replace(/;$/, '')
                // 这里的 originalCode 直接放在全局，不挂在局部
                // originCode: codeStr.replace('var name = ', '').replace(/;$/, ''),
              };
            }
          });
        }
      }
    }
  });

  return state;
};