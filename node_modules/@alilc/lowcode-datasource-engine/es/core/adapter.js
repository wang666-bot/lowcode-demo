import { getRuntimeValueFromConfig, getRuntimeJsValue, buildOptions, buildShouldFetch } from './../utils';
import { defaultDataHandler, defaultWillFetch } from '../helpers';
var adapt2Runtime = function (dataSource, context, extraConfig) {
    var interpretConfigList = dataSource.list, interpretDataHandler = dataSource.dataHandler;
    var dataHandler = interpretDataHandler
        ? getRuntimeJsValue(interpretDataHandler, context)
        : undefined;
    // 为空判断
    if (!interpretConfigList || !interpretConfigList.length) {
        return {
            list: [],
            dataHandler: dataHandler,
        };
    }
    var list = interpretConfigList.map(function (el) {
        var customDataHandler = extraConfig.defaultDataHandler;
        var finalDataHandler = customDataHandler || defaultDataHandler;
        return {
            id: el.id,
            isInit: getRuntimeValueFromConfig('boolean', el.isInit, context),
            isSync: getRuntimeValueFromConfig('boolean', el.isSync, context),
            type: el.type || 'fetch',
            willFetch: el.willFetch ? getRuntimeJsValue(el.willFetch, context) : defaultWillFetch,
            shouldFetch: buildShouldFetch(el, context),
            dataHandler: el.dataHandler ? getRuntimeJsValue(el.dataHandler, context) : finalDataHandler,
            errorHandler: el.errorHandler ? getRuntimeJsValue(el.errorHandler, context) : undefined,
            requestHandler: el.requestHandler ? getRuntimeJsValue(el.requestHandler, context) : undefined,
            options: buildOptions(el, context),
        };
    });
    return {
        list: list,
        dataHandler: dataHandler,
    };
};
export { adapt2Runtime };
