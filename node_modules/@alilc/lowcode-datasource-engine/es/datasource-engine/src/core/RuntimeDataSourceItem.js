import { __awaiter, __generator } from "tslib";
/* eslint-disable @typescript-eslint/indent */
import merge from 'lodash/merge';
import { RuntimeDataSourceStatus, } from '@alilc/lowcode-types';
var RuntimeDataSourceItem = /** @class */ (function () {
    function RuntimeDataSourceItem(dataSourceConfig, request, context) {
        this._status = RuntimeDataSourceStatus.Initial;
        this._dataSourceConfig = dataSourceConfig;
        this._request = request;
        this._context = context;
    }
    Object.defineProperty(RuntimeDataSourceItem.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RuntimeDataSourceItem.prototype, "error", {
        get: function () {
            return this._error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RuntimeDataSourceItem.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RuntimeDataSourceItem.prototype, "isLoading", {
        get: function () {
            return this._status === RuntimeDataSourceStatus.Loading;
        },
        enumerable: false,
        configurable: true
    });
    RuntimeDataSourceItem.prototype.load = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, shouldFetch, fetchOptions, error_1, dataHandler, errorHandler, result, error_2;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this._dataSourceConfig)
                            return [2 /*return*/];
                        // 考虑没有绑定对应的 handler 的情况
                        if (!this._request) {
                            this._error = new Error("no ".concat(this._dataSourceConfig.type, " handler provide"));
                            this._status = RuntimeDataSourceStatus.Error;
                            throw this._error;
                        }
                        if (!(this._dataSourceConfig.type === 'urlParams')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._request(this._context)];
                    case 1:
                        response = _d.sent();
                        this._context.setState((_a = {},
                            _a[this._dataSourceConfig.id] = response,
                            _a));
                        this._data = response;
                        this._status = RuntimeDataSourceStatus.Loaded;
                        return [2 /*return*/, response];
                    case 2:
                        if (!this._dataSourceConfig.options) {
                            throw new Error("".concat(this._dataSourceConfig.id, " has no options"));
                        }
                        if (typeof this._dataSourceConfig.options === 'function') {
                            this._options = this._dataSourceConfig.options();
                        }
                        // 考虑转换之后是 null 的场景
                        if (!this._options) {
                            throw new Error("".concat(this._dataSourceConfig.id, " options transform error"));
                        }
                        shouldFetch = true;
                        fetchOptions = this._options;
                        // 如果load存在参数则采取合并的策略合并参数，合并后再一起参与shouldFetch，willFetch的计算
                        if (params) {
                            fetchOptions.params = merge(fetchOptions.params, params);
                        }
                        if (this._dataSourceConfig.shouldFetch) {
                            if (typeof this._dataSourceConfig.shouldFetch === 'function') {
                                shouldFetch = this._dataSourceConfig.shouldFetch(fetchOptions);
                            }
                            else if (typeof this._dataSourceConfig.shouldFetch === 'boolean') {
                                shouldFetch = this._dataSourceConfig.shouldFetch;
                            }
                        }
                        if (!shouldFetch) {
                            this._status = RuntimeDataSourceStatus.Error;
                            this._error = new Error("the ".concat(this._dataSourceConfig.id, " request should not fetch, please check the condition"));
                            console.warn(this.error);
                            return [2 /*return*/];
                        }
                        if (!this._dataSourceConfig.willFetch) return [3 /*break*/, 6];
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this._dataSourceConfig.willFetch(this._options)];
                    case 4:
                        fetchOptions = _d.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _d.sent();
                        console.error(error_1);
                        return [3 /*break*/, 6];
                    case 6:
                        dataHandler = this._dataSourceConfig.dataHandler;
                        errorHandler = this._dataSourceConfig.errorHandler;
                        _d.label = 7;
                    case 7:
                        _d.trys.push([7, 9, , 10]);
                        this._status = RuntimeDataSourceStatus.Loading;
                        return [4 /*yield*/, this._request(fetchOptions, this._context).then(dataHandler, errorHandler)];
                    case 8:
                        result = _d.sent();
                        // 结果赋值
                        this._data = result;
                        this._status = RuntimeDataSourceStatus.Loaded;
                        // setState
                        this._context.setState((_b = {
                                UNSTABLE_dataSourceUpdatedAt: Date.now()
                            },
                            _b[this._dataSourceConfig.id] = result,
                            _b));
                        return [2 /*return*/, this._data];
                    case 9:
                        error_2 = _d.sent();
                        this._error = error_2;
                        this._status = RuntimeDataSourceStatus.Error;
                        // setState
                        this._context.setState((_c = {
                                UNSTABLE_dataSourceUpdatedAt: Date.now()
                            },
                            _c["UNSTABLE_".concat(this._dataSourceConfig.id, "_error")] = error_2,
                            _c));
                        throw error_2;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    return RuntimeDataSourceItem;
}());
export { RuntimeDataSourceItem };
