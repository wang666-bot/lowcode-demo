/* eslint-disable no-new-func */
import { isJSExpression, isJSFunction, } from '@alilc/lowcode-types';
function isObject(obj) {
    return Object.prototype.toString.call(obj).indexOf('Object') !== -1;
}
export var transformExpression = function (code, context) {
    // 补充异常情况兼容性
    if (code === undefined) {
        return function () { };
    }
    if (code === '') {
        return function () { return ''; };
    }
    try {
        return new Function("return (".concat(code, ")")).call(context);
    }
    catch (error) {
        console.error("transformExpression error, code is ".concat(code, ", context is ").concat(context, ", error is ").concat(error));
    }
};
export var transformFunction = function (code, context) {
    if (code === undefined) {
        return function () { };
    }
    if (code === '') {
        return function () { return ''; };
    }
    try {
        return new Function("return (".concat(code, ")")).call(context).bind(context);
    }
    catch (error) {
        console.error("transformFunction error, code is ".concat(code, ", context is ").concat(context, ", error is ").concat(error));
    }
};
export var transformBoolStr = function (str) {
    return str !== 'false';
};
export var getRuntimeJsValue = function (value, context) {
    if (!['JSExpression', 'JSFunction'].includes(value.type)) {
        console.error("translate error, value is ".concat(JSON.stringify(value)));
        return '';
    }
    // TODO: 类型修复
    var code = value.compiled || value.value;
    return value.type === 'JSFunction' ? transformFunction(code, context) : transformExpression(code, context);
};
export var getRuntimeBaseValue = function (type, value) {
    switch (type) {
        case 'string':
            return "".concat(value);
        case 'boolean':
            return typeof value === 'string' ? transformBoolStr(value) : !!value;
        case 'number':
            return Number(value);
        default:
            return value;
    }
};
export var getRuntimeValueFromConfig = function (type, value, context) {
    if (value === undefined) {
        return undefined;
    }
    if (isJSExpression(value) || isJSFunction(value)) {
        return getRuntimeBaseValue(type, getRuntimeJsValue(value, context));
    }
    return value;
};
export var buildJsonObj = function (params, context) {
    if (isJSExpression(params)) {
        return transformExpression(params.value, context);
    }
    else if (isObject(params)) { // 处理params内部为JSExpression的问题
        var newParams = {};
        for (var _i = 0, _a = Object.entries(params); _i < _a.length; _i++) {
            var _b = _a[_i], name_1 = _b[0], param = _b[1];
            if (isJSExpression(param)) {
                newParams[name_1] = transformExpression(param === null || param === void 0 ? void 0 : param.value, context);
            }
            else if (isObject(param)) {
                newParams[name_1] = buildJsonObj(param, context);
            }
            else {
                newParams[name_1] = param;
            }
        }
        return newParams;
    }
    return params;
};
export var buildShouldFetch = function (ds, context) {
    if (!ds.options || !ds.shouldFetch) {
        return true; // 默认为 true
    }
    if (isJSExpression(ds.shouldFetch) || isJSFunction(ds.shouldFetch)) {
        return getRuntimeJsValue(ds.shouldFetch, context);
    }
    return getRuntimeBaseValue('boolean', ds.shouldFetch);
};
export var buildOptions = function (ds, context) {
    var options = ds.options;
    if (!options)
        return undefined;
    // eslint-disable-next-line space-before-function-paren
    return function () {
        // 默认值
        var fetchOptions = {
            uri: '',
            params: {},
            method: 'GET',
            isCors: true,
            timeout: 5000,
            headers: undefined,
            v: '1.0',
        };
        Object.keys(options).forEach(function (key) {
            switch (key) {
                case 'uri':
                    fetchOptions.uri = getRuntimeValueFromConfig('string', options.uri, context);
                    break;
                case 'params':
                    fetchOptions.params = buildJsonObj(options.params, context);
                    break;
                case 'method':
                    fetchOptions.method = getRuntimeValueFromConfig('string', options.method, context);
                    break;
                case 'isCors':
                    fetchOptions.isCors = getRuntimeValueFromConfig('boolean', options.isCors, context);
                    break;
                case 'timeout':
                    fetchOptions.timeout = getRuntimeValueFromConfig('number', options.timeout, context);
                    break;
                case 'headers':
                    fetchOptions.headers = buildJsonObj(options.headers, context);
                    break;
                case 'v':
                    fetchOptions.v = getRuntimeValueFromConfig('string', options.v, context);
                    break;
                default:
                    // 其余的除了做表达式或者 function 的转换，直接透传
                    fetchOptions[key] = getRuntimeValueFromConfig('unknown', options[key], context);
            }
        });
        return fetchOptions;
    };
};
