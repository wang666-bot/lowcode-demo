"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promiseSettled = exports.getRequestHandler = exports.defaultShouldFetch = exports.defaultWillFetch = exports.defaultDataHandler = void 0;
var tslib_1 = require("tslib");
// 默认的 dataSourceItem 的 dataHandler
var defaultDataHandler = function (response) { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    return [2 /*return*/, response.data];
}); }); };
exports.defaultDataHandler = defaultDataHandler;
// 默认的 dataSourceItem 的 willFetch
var defaultWillFetch = function (options) { return options; };
exports.defaultWillFetch = defaultWillFetch;
// 默认的 dataSourceItem 的 shouldFetch
var defaultShouldFetch = function () { return true; };
exports.defaultShouldFetch = defaultShouldFetch;
// 从当前 dataSourceItem 中获取 requestHandler
var getRequestHandler = function (ds, requestHandlersMap) {
    if (ds.type === 'custom') {
        // 自定义类型处理
        return ds.requestHandler; // 理论上这里应该是能强转的，就算为空，应该在 request 请求的时候触发失败
    }
    // type 协议默认值 fetch
    return requestHandlersMap[ds.type || 'fetch'];
};
exports.getRequestHandler = getRequestHandler;
exports.promiseSettled = (Promise.allSettled ? Promise.allSettled.bind(Promise) : null) ||
    (function (promises) {
        return Promise.all(promises.map(function (p) {
            return p
                .then(function (v) { return ({
                status: 'fulfilled',
                value: v,
            }); })
                .catch(function (e) { return ({
                status: 'rejected',
                reason: e,
            }); });
        }));
    });
