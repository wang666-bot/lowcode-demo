"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reloadDataSourceFactory = void 0;
var tslib_1 = require("tslib");
var helpers_1 = require("../helpers");
var reloadDataSourceFactory = function (dataSource, dataSourceMap, dataHandler) {
    return function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var allAsyncLoadings, remainRuntimeDataSourceList, _i, remainRuntimeDataSourceList_1, ds, _a, remainRuntimeDataSourceList_2, ds, e_1;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    allAsyncLoadings = [];
                    // TODO: 那么，如果有新的类型过来，这个地方怎么处理???
                    // 单独处理 urlParams 类型的
                    dataSource.list
                        .filter(function (el) {
                        // eslint-disable-next-line implicit-arrow-linebreak
                        return el.type === 'urlParams' && isInit(el);
                    })
                        .forEach(function (el) {
                        dataSourceMap[el.id].load();
                    });
                    remainRuntimeDataSourceList = dataSource.list.filter(function (el) { return el.type !== 'urlParams'; });
                    // 处理并行
                    for (_i = 0, remainRuntimeDataSourceList_1 = remainRuntimeDataSourceList; _i < remainRuntimeDataSourceList_1.length; _i++) {
                        ds = remainRuntimeDataSourceList_1[_i];
                        if (!ds.options) {
                            continue;
                        }
                        if (
                        // 需要考虑出码直接不传值的情况
                        isInit(ds) &&
                            !ds.isSync) {
                            allAsyncLoadings.push(dataSourceMap[ds.id].load());
                        }
                    }
                    _a = 0, remainRuntimeDataSourceList_2 = remainRuntimeDataSourceList;
                    _b.label = 1;
                case 1:
                    if (!(_a < remainRuntimeDataSourceList_2.length)) return [3 /*break*/, 6];
                    ds = remainRuntimeDataSourceList_2[_a];
                    if (!ds.options) {
                        return [3 /*break*/, 5];
                    }
                    if (!
                    // 需要考虑出码直接不传值的情况
                    (isInit(ds) &&
                        ds.isSync)) 
                    // 需要考虑出码直接不传值的情况
                    return [3 /*break*/, 5];
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 5]);
                    // eslint-disable-next-line no-await-in-loop
                    return [4 /*yield*/, dataSourceMap[ds.id].load()];
                case 3:
                    // eslint-disable-next-line no-await-in-loop
                    _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _b.sent();
                    // TODO: 这个错误直接吃掉？
                    console.error(e_1);
                    return [3 /*break*/, 5];
                case 5:
                    _a++;
                    return [3 /*break*/, 1];
                case 6: return [4 /*yield*/, (0, helpers_1.promiseSettled)(allAsyncLoadings)];
                case 7:
                    _b.sent();
                    // 所有的初始化请求都结束之后，调用钩子函数
                    if (dataHandler) {
                        dataHandler(dataSourceMap);
                    }
                    return [2 /*return*/];
            }
        });
    }); };
};
exports.reloadDataSourceFactory = reloadDataSourceFactory;
function isInit(ds) {
    var _a;
    return typeof ds.isInit === 'function' ? ds.isInit() : (_a = ds.isInit) !== null && _a !== void 0 ? _a : true;
}
