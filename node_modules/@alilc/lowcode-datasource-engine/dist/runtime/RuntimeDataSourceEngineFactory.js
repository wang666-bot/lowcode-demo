"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
var reloadDataSourceFactory_1 = require("../core/reloadDataSourceFactory");
var helpers_1 = require("../helpers");
/**
 * @param dataSource
 * @param context
 * @param extraConfig: { requestHandlersMap }
 */
exports.default = (function (dataSource, context, extraConfig) {
    if (extraConfig === void 0) { extraConfig = { requestHandlersMap: {} }; }
    var requestHandlersMap = extraConfig.requestHandlersMap;
    // TODO: 对于出码类型，需要做一层数据兼容，给一些必要的值设置默认值,先兜底几个必要的
    dataSource.list.forEach(function (ds) {
        var _a, _b;
        ds.isInit = (typeof ds.isInit === 'function'
            ? ds.isInit.bind(context)
            : (_a = ds.isInit) !== null && _a !== void 0 ? _a : true);
        ds.isSync = (_b = ds.isSync) !== null && _b !== void 0 ? _b : false;
        // eslint-disable-next-line no-nested-ternary
        ds.shouldFetch = !ds.shouldFetch
            ? helpers_1.defaultShouldFetch
            : typeof ds.shouldFetch === 'function'
                ? ds.shouldFetch.bind(context)
                : ds.shouldFetch;
        ds.willFetch = ds.willFetch ? ds.willFetch.bind(context) : helpers_1.defaultWillFetch;
        var finalDataHandler = extraConfig.defaultDataHandler || helpers_1.defaultDataHandler;
        ds.dataHandler = ds.dataHandler ? ds.dataHandler.bind(context) : finalDataHandler;
    });
    var dataSourceMap = dataSource.list.reduce(function (prev, current) {
        prev[current.id] = new core_1.RuntimeDataSourceItem(current, (0, helpers_1.getRequestHandler)(current, requestHandlersMap), context);
        return prev;
    }, {});
    return {
        dataSourceMap: dataSourceMap,
        reloadDataSource: (0, reloadDataSourceFactory_1.reloadDataSourceFactory)(dataSource, dataSourceMap, dataSource.dataHandler),
    };
});
