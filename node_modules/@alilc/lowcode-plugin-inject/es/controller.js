import _extends from "@babel/runtime/helpers/extends";
import _createClass from "@babel/runtime/helpers/createClass";
import { set as _set, get as _get, has as _has } from 'lodash';
import { EventEmitter } from 'events';
export var InjectConfig = /*#__PURE__*/function () {
  function InjectConfig() {
    this._config = JSON.parse(localStorage.getItem('___inject_config___') || '{}');
    this.event = new EventEmitter();
  }
  var _proto = InjectConfig.prototype;
  _proto.onChange = function onChange(fn) {
    var _this = this;
    this.event.on('changeConfig', fn);
    return function () {
      _this.event.off('changeConfig', fn);
    };
  };
  _proto.set = function set(pluginName, resourceName, viewName, injected) {
    if (!viewName) {
      _set(this._config, [pluginName, resourceName], injected);
      this._config = _extends({}, this._config);
      this.event.emit('changeConfig', this.config);
      return;
    }
    _set(this._config, [pluginName, resourceName, viewName], injected);
    this._config = _extends({}, this._config);
    this.event.emit('changeConfig', this.config);
  };
  _proto.get = function get(pluginName, resourceName, viewName) {
    if (!viewName) {
      return _get(this._config, [pluginName, resourceName], false);
    }
    return _get(this._config, [pluginName, resourceName, viewName], false);
  };
  _proto.has = function has(pluginName, resourceName, viewName) {
    if (!viewName) {
      return _has(this._config, [pluginName, resourceName]);
    }
    return _has(this._config, [pluginName, resourceName, viewName]);
  };
  _proto.clearAll = function clearAll() {
    this._config = {};
  };
  _proto.save = function save() {
    localStorage.setItem('___inject_config___', JSON.stringify(this._config));
  };
  _createClass(InjectConfig, [{
    key: "config",
    get: function get() {
      return this._config;
    }
  }]);
  return InjectConfig;
}();