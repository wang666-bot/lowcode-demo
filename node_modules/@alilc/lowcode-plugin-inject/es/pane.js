import _Checkbox from "@alifd/next/es/checkbox";
import _Table from "@alifd/next/es/table";
import _Button from "@alifd/next/es/button";
import * as React from 'react';
import './pane.scss';
export function Pane(props) {
  var _React$useState = React.useState({}),
    injectInfo = _React$useState[0],
    setInjectInfo = _React$useState[1];
  var _React$useState2 = React.useState([]),
    dataSource = _React$useState2[0],
    setDataSource = _React$useState2[1];
  var workspace = props.pluginContext.workspace;
  var options = workspace.resourceTypeList.map(function (resource) {
    var _resource$editorViews;
    return {
      label: resource.description || resource.resourceName,
      value: resource.resourceName,
      children: (_resource$editorViews = resource.editorViews) === null || _resource$editorViews === void 0 ? void 0 : _resource$editorViews.map(function (view) {
        return {
          label: view.viewName + '视图',
          value: view.viewName
        };
      })
    };
  });
  options.unshift({
    label: '全局',
    value: 'global'
  });
  var updateConfig = React.useCallback(function (config) {
    var newDataSource = Object.entries(config).map(function (_ref) {
      var key = _ref[0],
        value = _ref[1];
      return {
        pluginName: key
      };
    }).filter(function (d) {
      return props.injectedPluginConfigMap[d.pluginName];
    });
    setDataSource(newDataSource);
    props.getInjectInfo().then(function (res) {
      setInjectInfo(res);
    });
  }, []);
  React.useEffect(function () {
    updateConfig(props.injectConfig.config);
    props.injectConfig.onChange(function (config) {
      updateConfig(config);
    });
  }, []);
  var injectedSetters = injectInfo.injectedSetters;
  if (!(dataSource !== null && dataSource !== void 0 && dataSource.length) && !(injectedSetters !== null && injectedSetters !== void 0 && injectedSetters.length)) {
    return /*#__PURE__*/React.createElement("div", {
      className: "inject-setting-panel-empty"
    }, /*#__PURE__*/React.createElement("div", {
      className: "inject-setting-panel-empty-title"
    }, "\u672A\u68C0\u6D4B\u5230\u8C03\u8BD5\u63D2\u4EF6/\u7EC4\u4EF6"));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "inject-setting-panel"
  }, /*#__PURE__*/React.createElement("span", {
    className: "inject-setting-panel-title"
  }, "\u8BBE\u8BA1\u5668\u63D2\u4EF6\uFF1A"), /*#__PURE__*/React.createElement("span", {
    style: {
      "float": 'right'
    }
  }, /*#__PURE__*/React.createElement(_Button, {
    size: "small",
    onClick: function onClick() {
      props.injectConfig.clearAll();
      props.injectConfig.save();
      window.location.reload();
    }
  }, "\u91CD\u7F6E\u63D2\u4EF6\u914D\u7F6E")), /*#__PURE__*/React.createElement(_Table, {
    className: "inject-setting-panel-table",
    dataSource: dataSource
  }, /*#__PURE__*/React.createElement(_Table.Column, {
    title: "\u63D2\u4EF6\u540D\u5B57",
    htmlTitle: "\u63D2\u4EF6",
    dataIndex: "pluginName"
  }), /*#__PURE__*/React.createElement(_Table.Column, {
    title: "\u8C03\u8BD5\u6CE8\u518C\u89C6\u56FE",
    dataIndex: "pluginName",
    cell: function cell(pluginName, index, record) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, options.map(function (resource) {
        if (resource.children) {
          return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
            className: "inject-setting-panel-label"
          }, resource.label), resource.children.map(function (view) {
            return /*#__PURE__*/React.createElement(_Checkbox, {
              checked: props.injectConfig.get(pluginName, resource.value, view.value),
              onChange: function onChange(checked) {
                props.updateInjectConfig(record.pluginName, resource.value, view.value, checked);
              }
            }, view.label);
          }));
        }
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
          className: "inject-setting-panel-label"
        }, resource.label), /*#__PURE__*/React.createElement(_Checkbox, {
          checked: props.injectConfig.get(pluginName, resource.value),
          onChange: function onChange(checked) {
            props.updateInjectConfig(record.pluginName, resource.value, '', checked);
          }
        }));
      }));
    }
  })), /*#__PURE__*/React.createElement(InjectItem, {
    title: "Setter",
    injectItems: injectedSetters
  }));
}
function InjectItem(props) {
  if (!props.injectItems || !props.injectItems.length) {
    return null;
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    className: "inject-setting-panel-title"
  }, props.title, "\uFF1A"), /*#__PURE__*/React.createElement("div", {
    className: "inject-setting-panel-inject-item"
  }, props.injectItems && props.injectItems.map(function (item) {
    return /*#__PURE__*/React.createElement("span", null, item.name);
  })));
}