"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.filterPackages = filterPackages;
exports.getInjectedResource = getInjectedResource;
exports.injectAssets = injectAssets;
exports.injectComponents = injectComponents;
exports.needInject = void 0;
exports.setInjectServerHost = setInjectServerHost;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _notification = _interopRequireDefault(require("@alifd/next/lib/notification"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var queryString = _interopRequireWildcard(require("query-string"));
var _fetchJsonp = _interopRequireDefault(require("fetch-jsonp"));
var React = _interopRequireWildcard(require("react"));
var _case = require("case");
var _lowcodeUtils = require("@alilc/lowcode-utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var typeMap = {
  vc: ['prototype', 'view'],
  vs: ['setter'],
  vp: ['plugin'],
  ve: ['pane'],
  vu: ['utils'],
  plugin: ['designerPlugin'],
  component: ['meta', 'view']
};
var queryFlag = '__injectFrom'; // 不推荐
var injectTypeFlag = '__injectType'; // 不推荐
var injectEnvFlag = '__injectEnv'; // 不推荐
var debugFlag = 'debug'; // 推荐
var arrayFlag = '__components';
var jsonpFlag = '__injectComponent';
var prototypeKeyFlag = '__prototype';
var injectDeviceFlag = '__device';
window[arrayFlag] = [];
window[jsonpFlag] = function addComponents(component) {
  window[arrayFlag].push(component);
};
var injectServerHost = '127.0.0.1';
var searchParams = new URLSearchParams(window.location.search);
// 是否需要开启 inject 逻辑

var needInject = searchParams.get('__injectFrom') // 历史兼容
|| searchParams.get('__injectType') === 'auto' // 历史兼容
|| searchParams.has('debug') || window.injectConfig;
exports.needInject = needInject;
var urlCache = null;
function setInjectServerHost(finalInjectServerHost) {
  injectServerHost = finalInjectServerHost;
  console.log('inject server host', injectServerHost);
}

// 获取 inject 资源的 url，格式：['url1', 'url2']
function getInjectUrls(resourceType, type) {
  if (type === void 0) {
    type = 'url';
  }
  var filter = function filter(_urls) {
    if (!resourceType) {
      return type === 'url' ? _urls.map(function (item) {
        return item.url || item;
      }) : _urls;
    }
    var filteredUrls = _urls.filter(function (item) {
      if (typeof item === 'string') {
        return item.indexOf("name=@ali/" + resourceType + "-") >= 0;
      }
      if (item.type) {
        return typeMap[resourceType].indexOf(item.type) >= 0;
      }
      return false;
    });
    return type === 'url' ? filteredUrls.map(function (item) {
      return item.url || item;
    }) : filteredUrls;
  };
  return new Promise(function (resolve) {
    if (!urlCache) {
      var urlParams = queryString.parse(window.location.search);
      var urls = urlParams[queryFlag] || [];
      urls = Array.isArray(urls) ? urls : [urls];
      var _ref = window.injectConfig || {},
        _type = _ref.type,
        injects = _ref.injects;
      if (_type === 'auto' || urlParams[injectTypeFlag] === 'auto' || urlParams[debugFlag] !== undefined) {
        (0, _fetchJsonp["default"])("http://" + injectServerHost + ":8899/apis/injectInfo").then(function (res) {
          return res.json();
        }).then(function (data) {
          urls = envFilter(data.content);
          urlCache = urls;
          resolve(filter(urlCache));
        })["catch"](function (err) {
          urlCache = [];
          resolve([]);
          console.error(err);
        });
      } else if (_type === 'custom' && injects) {
        urls = urls.concat(injects);
        urlCache = urls;
        resolve(filter(urlCache));
      } else {
        urlCache = urls;
        resolve(filter(urlCache));
      }
    } else {
      resolve(filter(urlCache));
    }
  });
}
function loadScript(url, callback) {
  var src = function (_url) {
    var isInFileProtocol = _url.indexOf('//') === 0 && window.location.protocol === 'file:';
    return isInFileProtocol ? "//" + _url : _url;
  }(url);
  var scriptElement = document.createElement('script');
  scriptElement.crossOrigin = 'anonymous';
  scriptElement.src = src;
  scriptElement.async = true;
  if (callback) {
    scriptElement.onload = function () {
      return callback();
    };
    scriptElement.onerror = function () {
      return callback(new Error("Inject " + url + " failed"));
    };
  }
  document.body.insertBefore(scriptElement, document.body.firstChild);
}
function promiseLoadScript(url) {
  return new Promise(function (rs, rj) {
    loadScript(url, function (e) {
      return e ? rj(e) : rs({});
    });
  }).then(function () {
    console.info("%c Injected " + url, 'font-weight:bold; font-size: 20px; color: orange;');
  }, function (e) {
    console.error(e);
  });
}
function loadComponentFromSources(sources) {
  return Promise.all(sources.map(function (url) {
    return promiseLoadScript(url);
  }));
}

// 获取 inject 的资源，格式 [{name, module, pluginType}]
function getInjectedResource(_x) {
  return _getInjectedResource.apply(this, arguments);
}
function _getInjectedResource() {
  _getInjectedResource = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(type) {
    var urls;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return getInjectUrls(type);
        case 2:
          urls = _context.sent;
          _context.next = 5;
          return loadComponentFromSources(urls);
        case 5:
          return _context.abrupt("return", window[arrayFlag].filter(function (item) {
            var _item = item["default"] || item;
            if (!type) {
              return true;
            }
            if (_item.type && typeMap[type].indexOf(_item.type) < 0) {
              return false;
            }
            if (!_item.type && _item.name && _item.name.indexOf("@ali/" + type + "-") < 0) {
              return false;
            }
            return true;
          }).map(function (item) {
            var _item = item["default"] || item;
            _item.module = getModule(_item.module);
            return _item;
          }));
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getInjectedResource.apply(this, arguments);
}
function getModule(module) {
  if (Array.isArray(module)) {
    return module.map(function (item) {
      return getModule(item);
    });
  }
  return module["default"] || module;
}
function envFilter(injects) {
  if (!injects) {
    return [];
  }
  var urlParams = queryString.parse(window.location.search);

  // 从 window 或者 url 中获取当前是设计器还是预览环境；没有配置则读取 window 是否有 VisualEngine
  var env = window.injectEnv || urlParams[injectEnvFlag] || (window.VisualEngine || window.LowcodeEditor || window.AliLowCodeEngine ? 'design' : 'preview') || 'design';
  var device = urlParams[injectDeviceFlag] || window.g_config && window.g_config.device || window.pageConfig && window.pageConfig.device || 'web';
  if (device === 'both') {
    // 乐高有双端的能力，开启后 device 是 both
    device = /Mobile/.test(window.navigator.userAgent) ? 'mobile' : 'web';
  }
  var prototypeKey = urlParams[prototypeKeyFlag] || window.pageConfig && window.pageConfig.designerConfigs && window.pageConfig.designerConfigs.prototypeKey;
  prototypeKey = prototypeKey === 'default' ? '' : prototypeKey;
  return injects.filter(function (item) {
    if (env === 'design') {
      // 设计器不需要注入组件的 view 和 vu
      if (['utils'].indexOf(item.type) >= 0) {
        return false;
      }
      // 注入指定的 prototype
      if (item.type === 'prototype') {
        if (item.subType && item.subType !== prototypeKey) {
          return false;
        }
        if (!item.subType && prototypeKey) {
          // 看有没有对应的 prototype.js 如果没有则用默认的
          var proto = injects.find(function (item2) {
            return item2.packageName === item.packageName && item2.type === 'prototype' && item2.subType === prototypeKey;
          });
          if (proto) {
            return false;
          }
        }
      }
    }
    if (env === 'preview') {
      // 预览不需要注入 prototype、vp、setter、pane
      if (['prototype', 'plugin', 'setter', 'pane'].indexOf(item.type) >= 0) {
        return false;
      }
      // PC 端应用不需要加载 view.mobile
      if (device === 'web' && item.type === 'view' && item.subType === 'mobile') {
        return false;
      }
      // 移动端应用如果有 view.mobile 则不需要加载 view，否则还是加载 view
      if (device === 'mobile' && item.type === 'view' && item.subType !== 'mobile') {
        // 看当前组件有没有 view.mobile
        var viewMobile = injects.find(function (item2) {
          return item2.packageName === item.packageName && item2.type === 'view' && item2.subType === 'mobile';
        });
        if (viewMobile) {
          return false;
        }
      }
    }
    return true;
  });
}
function getComponentFromUrlItems(items) {
  var map = {};
  items.forEach(function (item) {
    var packageName = item.packageName,
      type = item.type,
      url = item.url,
      library = item.library;
    if (!map[packageName]) {
      map[packageName] = {
        packageName: packageName
      };
    }
    map[packageName][type] = url;
    map[packageName]['library'] = library;
  });
  return map;
}
function injectAssets(_x2) {
  return _injectAssets.apply(this, arguments);
}
function _injectAssets() {
  _injectAssets = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(assets) {
    var injectUrls, components;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (needInject) {
            _context2.next = 2;
            break;
          }
          return _context2.abrupt("return", assets);
        case 2:
          _context2.prev = 2;
          _context2.next = 5;
          return getInjectUrls('component', 'item');
        case 5:
          injectUrls = _context2.sent;
          components = getComponentFromUrlItems(injectUrls);
          Object.keys(components).forEach(function (name) {
            var item = components[name];
            var pascalCaseName = (0, _case.pascal)(name);
            if (!assets.packages) assets.packages = [];
            if (!assets.components) assets.components = [];
            assets.packages.push({
              "package": name,
              "version": '0.1.0',
              "library": item.library || pascalCaseName,
              "urls": [item.view],
              "editUrls": [item.view]
            });
            assets.components.push({
              exportName: pascalCaseName + "Meta",
              url: item.meta
            });
          });
          if (Object.keys(components).length > 0) {
            _notification["default"].success({
              title: '成功注入以下组件',
              content: /*#__PURE__*/React.createElement("div", null, Object.keys(components).map(function (name) {
                return /*#__PURE__*/React.createElement("p", null, "\u7EC4\u4EF6\uFF1A", /*#__PURE__*/React.createElement("b", null, name));
              }))
            });
          }
          _context2.next = 13;
          break;
        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](2);
        case 13:
          return _context2.abrupt("return", assets);
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[2, 11]]);
  }));
  return _injectAssets.apply(this, arguments);
}
function injectComponents(_x3) {
  return _injectComponents.apply(this, arguments);
}
function _injectComponents() {
  _injectComponents = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(components) {
    var injectUrls, injectedComponents, libraryMap, componentsMap, injectedComponentsForRenderer;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (needInject) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", components);
        case 2:
          _context3.next = 4;
          return getInjectUrls('component', 'item');
        case 4:
          injectUrls = _context3.sent;
          _context3.next = 7;
          return loadComponentFromSources(injectUrls.map(function (item) {
            return item.url || item;
          }));
        case 7:
          injectedComponents = getComponentFromUrlItems(injectUrls);
          libraryMap = {};
          componentsMap = {};
          Object.keys(injectedComponents).forEach(function (name) {
            var _window, _window$components;
            var library = injectedComponents[name].library;
            var pascalName = (0, _case.pascal)(name);
            libraryMap[name] = library || pascalName;
            (_window = window[pascalName + "Meta"]) === null || _window === void 0 ? void 0 : (_window$components = _window.components) === null || _window$components === void 0 ? void 0 : _window$components.forEach(function (item) {
              componentsMap[item.componentName] = item.npm;
            });
          });
          _context3.next = 13;
          return (0, _lowcodeUtils.buildComponents)(libraryMap, componentsMap, undefined);
        case 13:
          injectedComponentsForRenderer = _context3.sent;
          if (Object.keys(injectedComponents).length > 0) {
            _notification["default"].success({
              title: '成功注入以下组件',
              content: /*#__PURE__*/React.createElement("div", null, Object.keys(injectedComponents).map(function (name) {
                return /*#__PURE__*/React.createElement("p", null, "\u7EC4\u4EF6\uFF1A", /*#__PURE__*/React.createElement("b", null, name));
              }))
            });
          }
          return _context3.abrupt("return", (0, _extends2["default"])({}, components, injectedComponentsForRenderer));
        case 16:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _injectComponents.apply(this, arguments);
}
function filterPackages(_x4) {
  return _filterPackages.apply(this, arguments);
}
function _filterPackages() {
  _filterPackages = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(packages) {
    var injectUrls, injectedComponents;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (packages === void 0) {
            packages = [];
          }
          if (needInject) {
            _context4.next = 3;
            break;
          }
          return _context4.abrupt("return", packages);
        case 3:
          _context4.next = 5;
          return getInjectUrls('component', 'item');
        case 5:
          injectUrls = _context4.sent;
          injectedComponents = getComponentFromUrlItems(injectUrls);
          return _context4.abrupt("return", packages.filter(function (item) {
            return !(item["package"] in injectedComponents);
          }));
        case 8:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _filterPackages.apply(this, arguments);
}