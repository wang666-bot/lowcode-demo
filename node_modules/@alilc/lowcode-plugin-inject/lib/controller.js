"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.InjectConfig = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _lodash = require("lodash");
var _events = require("events");
var InjectConfig = /*#__PURE__*/function () {
  function InjectConfig() {
    this._config = JSON.parse(localStorage.getItem('___inject_config___') || '{}');
    this.event = new _events.EventEmitter();
  }
  var _proto = InjectConfig.prototype;
  _proto.onChange = function onChange(fn) {
    var _this = this;
    this.event.on('changeConfig', fn);
    return function () {
      _this.event.off('changeConfig', fn);
    };
  };
  _proto.set = function set(pluginName, resourceName, viewName, injected) {
    if (!viewName) {
      (0, _lodash.set)(this._config, [pluginName, resourceName], injected);
      this._config = (0, _extends2["default"])({}, this._config);
      this.event.emit('changeConfig', this.config);
      return;
    }
    (0, _lodash.set)(this._config, [pluginName, resourceName, viewName], injected);
    this._config = (0, _extends2["default"])({}, this._config);
    this.event.emit('changeConfig', this.config);
  };
  _proto.get = function get(pluginName, resourceName, viewName) {
    if (!viewName) {
      return (0, _lodash.get)(this._config, [pluginName, resourceName], false);
    }
    return (0, _lodash.get)(this._config, [pluginName, resourceName, viewName], false);
  };
  _proto.has = function has(pluginName, resourceName, viewName) {
    if (!viewName) {
      return (0, _lodash.has)(this._config, [pluginName, resourceName]);
    }
    return (0, _lodash.has)(this._config, [pluginName, resourceName, viewName]);
  };
  _proto.clearAll = function clearAll() {
    this._config = {};
  };
  _proto.save = function save() {
    localStorage.setItem('___inject_config___', JSON.stringify(this._config));
  };
  (0, _createClass2["default"])(InjectConfig, [{
    key: "config",
    get: function get() {
      return this._config;
    }
  }]);
  return InjectConfig;
}();
exports.InjectConfig = InjectConfig;