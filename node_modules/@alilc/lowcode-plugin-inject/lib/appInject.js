"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.AppInject = AppInject;
exports.getInjectedPlugin = getInjectedPlugin;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _lowcodeTypes = require("@alilc/lowcode-types");
var _utils = require("./utils");
var _icon = _interopRequireDefault(require("./icon"));
var _pane = require("./pane");
var _react = _interopRequireDefault(require("react"));
var _controller = require("./controller");
var injectConfig = new _controller.InjectConfig();
var injectedPluginConfigMap = null;
var injectedPlugins = [];
function getInjectedPlugin(_x, _x2) {
  return _getInjectedPlugin.apply(this, arguments);
}
function _getInjectedPlugin() {
  _getInjectedPlugin = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(name, ctx) {
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          if (injectedPluginConfigMap) {
            _context7.next = 6;
            break;
          }
          injectedPluginConfigMap = {};
          _context7.next = 4;
          return (0, _utils.getInjectedResource)('plugin');
        case 4:
          injectedPlugins = _context7.sent;
          if (injectedPlugins && injectedPlugins.length > 0) {
            injectedPlugins.forEach(function (item) {
              var config = item.module(ctx);
              injectedPluginConfigMap[config.name || item.module.pluginName] = item.module;
            });
          }
        case 6:
          return _context7.abrupt("return", injectedPluginConfigMap[name]);
        case 7:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _getInjectedPlugin.apply(this, arguments);
}
function AppInject(ctx, options) {
  var workspace = ctx.workspace;
  var getInjectPlugin = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(plugin, pluginOptions, ctx) {
      var _ctx$editorWindow, _ctx$editorWindow$res, _ctx$editorWindow2, _ctx$editorWindow2$cu;
      var pluginName, pluginConfig, injectedSameNamePlugin, resourceName, viewName, isGlobal;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            pluginName = plugin.pluginName;
            if (!pluginName) {
              pluginConfig = plugin(ctx, pluginOptions);
              pluginName = pluginConfig.name;
            }
            _context.next = 4;
            return getInjectedPlugin(pluginName, ctx);
          case 4:
            injectedSameNamePlugin = _context.sent;
            resourceName = (_ctx$editorWindow = ctx.editorWindow) === null || _ctx$editorWindow === void 0 ? void 0 : (_ctx$editorWindow$res = _ctx$editorWindow.resource) === null || _ctx$editorWindow$res === void 0 ? void 0 : _ctx$editorWindow$res.name;
            viewName = ctx === null || ctx === void 0 ? void 0 : (_ctx$editorWindow2 = ctx.editorWindow) === null || _ctx$editorWindow2 === void 0 ? void 0 : (_ctx$editorWindow2$cu = _ctx$editorWindow2.currentEditorView) === null || _ctx$editorWindow2$cu === void 0 ? void 0 : _ctx$editorWindow2$cu.viewName;
            isGlobal = (ctx === null || ctx === void 0 ? void 0 : ctx.registerLevel) === _lowcodeTypes.IPublicEnumPluginRegisterLevel.Workspace;
            if (injectedSameNamePlugin) {
              _context.next = 10;
              break;
            }
            return _context.abrupt("return", plugin);
          case 10:
            if (!isGlobal) {
              _context.next = 15;
              break;
            }
            if (!injectConfig.has(pluginName, 'global')) {
              _context.next = 13;
              break;
            }
            return _context.abrupt("return", injectConfig.get(pluginName, 'global') ? injectedSameNamePlugin : plugin);
          case 13:
            injectConfig.set(pluginName, 'global', undefined, true);
            return _context.abrupt("return", injectedSameNamePlugin);
          case 15:
            if (!(!viewName || !resourceName)) {
              _context.next = 17;
              break;
            }
            return _context.abrupt("return", injectedSameNamePlugin);
          case 17:
            if (!injectConfig.has(pluginName, resourceName, viewName)) {
              _context.next = 19;
              break;
            }
            return _context.abrupt("return", injectConfig.get(pluginName, resourceName, viewName) ? injectedSameNamePlugin : plugin);
          case 19:
            injectConfig.set(pluginName, resourceName, viewName, true);
            return _context.abrupt("return", injectedSameNamePlugin);
          case 21:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getInjectPlugin(_x3, _x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }();
  ctx.config.set('customPluginTransducer', /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(originPlugin, ctx, options) {
      var injectedSameNamePlugin;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getInjectPlugin(originPlugin, options, ctx);
          case 2:
            injectedSameNamePlugin = _context2.sent;
            return _context2.abrupt("return", injectedSameNamePlugin);
          case 4:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x6, _x7, _x8) {
      return _ref2.apply(this, arguments);
    };
  }());
  return {
    // 插件名，注册环境下唯一
    name: 'LowcodePluginInjectAlt',
    // 依赖的插件（插件名数组）
    dep: [],
    init: function init() {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        var subPluginName, subPlugin;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              subPluginName = '___injectPlugins___';
              subPlugin = function subPlugin(ctx) {
                (0, _utils.injectAssets)(ctx);
                return {
                  init: function init() {
                    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) switch (_context3.prev = _context3.next) {
                          case 0:
                          case "end":
                            return _context3.stop();
                        }
                      }, _callee3);
                    }))();
                  }
                };
              };
              subPlugin.pluginName = subPluginName;
              subPlugin.meta = {
                dependencies: [],
                engines: {
                  lowcodeEngine: '^1.0.0' // 插件需要配合 ^1.0.0 的引擎才可运行
                }
              };

              workspace.onChangeActiveWindow( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
                var _workspace$window3, _workspace$window4, _workspace$window4$cu;
                var pluginName, _workspace$window, _workspace$window$res, _workspace$window2, injectedSameNamePlugin, resourceName, currentEditorView, viewName, _workspace$window5;
                return _regenerator["default"].wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.t0 = _regenerator["default"].keys(injectedPluginConfigMap);
                    case 1:
                      if ((_context4.t1 = _context4.t0()).done) {
                        _context4.next = 19;
                        break;
                      }
                      pluginName = _context4.t1.value;
                      _context4.next = 5;
                      return getInjectedPlugin(pluginName, ctx);
                    case 5:
                      injectedSameNamePlugin = _context4.sent;
                      if (injectedSameNamePlugin) {
                        _context4.next = 8;
                        break;
                      }
                      return _context4.abrupt("continue", 1);
                    case 8:
                      resourceName = (_workspace$window = workspace.window) === null || _workspace$window === void 0 ? void 0 : (_workspace$window$res = _workspace$window.resource) === null || _workspace$window$res === void 0 ? void 0 : _workspace$window$res.name;
                      currentEditorView = (_workspace$window2 = workspace.window) === null || _workspace$window2 === void 0 ? void 0 : _workspace$window2.currentEditorView;
                      viewName = currentEditorView === null || currentEditorView === void 0 ? void 0 : currentEditorView.viewName;
                      if (!(injectConfig.get(pluginName, resourceName, viewName) && !(currentEditorView !== null && currentEditorView !== void 0 && currentEditorView.plugins.has(pluginName)))) {
                        _context4.next = 14;
                        break;
                      }
                      _context4.next = 14;
                      return currentEditorView === null || currentEditorView === void 0 ? void 0 : currentEditorView.plugins.register(injectedPluginConfigMap[pluginName], {
                        autoInit: true
                      });
                    case 14:
                      if (!(injectConfig.get(pluginName, 'global') && !workspace.plugins.has(pluginName))) {
                        _context4.next = 17;
                        break;
                      }
                      _context4.next = 17;
                      return workspace.plugins.register(injectedPluginConfigMap[pluginName], {
                        autoInit: true
                      });
                    case 17:
                      _context4.next = 1;
                      break;
                    case 19:
                      if (!((_workspace$window3 = workspace.window) !== null && _workspace$window3 !== void 0 && _workspace$window3.currentEditorView && !((_workspace$window4 = workspace.window) !== null && _workspace$window4 !== void 0 && (_workspace$window4$cu = _workspace$window4.currentEditorView.plugins) !== null && _workspace$window4$cu !== void 0 && _workspace$window4$cu.has(subPlugin.pluginName)))) {
                        _context4.next = 22;
                        break;
                      }
                      _context4.next = 22;
                      return (_workspace$window5 = workspace.window) === null || _workspace$window5 === void 0 ? void 0 : _workspace$window5.currentEditorView.plugins.register(subPlugin);
                    case 22:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4);
              })));
              _context6.next = 7;
              return getInjectedPlugin(undefined, ctx);
            case 7:
              ctx.skeleton.add({
                area: 'leftArea',
                name: 'inject-pane',
                type: 'PanelDock',
                props: {
                  icon: /*#__PURE__*/_react["default"].createElement(_icon["default"], null),
                  description: '调试',
                  className: 'inject-pane-icon'
                },
                index: 2,
                panelProps: {
                  width: '600px',
                  canSetFixed: false
                },
                content: function content(props) {
                  return /*#__PURE__*/_react["default"].createElement(_pane.Pane, (0, _extends2["default"])({}, props, {
                    injectConfig: injectConfig
                  }));
                },
                contentProps: {
                  pluginContext: ctx,
                  injectConfig: injectConfig,
                  injectedPluginConfigMap: injectedPluginConfigMap,
                  getInjectInfo: function () {
                    var _getInjectInfo = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
                      var injectedSetters;
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.next = 2;
                            return (0, _utils.getInjectedResource)('vs');
                          case 2:
                            injectedSetters = _context5.sent;
                            return _context5.abrupt("return", {
                              injectedSetters: injectedSetters
                            });
                          case 4:
                          case "end":
                            return _context5.stop();
                        }
                      }, _callee5);
                    }));
                    function getInjectInfo() {
                      return _getInjectInfo.apply(this, arguments);
                    }
                    return getInjectInfo;
                  }(),
                  updateInjectConfig: function updateInjectConfig(pluginName, resourceName, viewName, check) {
                    injectConfig.set(pluginName, resourceName, viewName, check);
                    injectConfig.save();
                  }
                }
              });
            case 8:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }))();
    }
  };
}