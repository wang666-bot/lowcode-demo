"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var CodeGenerator = _interopRequireWildcard(require("@alilc/lowcode-code-generator/standalone-loader"));

var _CodeGenActionBtn = require("./components/CodeGenActionBtn");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var codeGeneratorPlugin = function codeGeneratorPlugin(ctx, options) {
  return {
    // 插件对外暴露的数据和方法
    exports: function exports() {
      return {
        generateCode: CodeGenerator.generateCode
      };
    },
    // 插件的初始化函数，在引擎初始化之后会立刻调用
    init: function init() {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;

                if (!(options !== null && options !== void 0 && options.disableCodeGenActionBtn)) {
                  ctx.skeleton.add({
                    type: 'Custom',
                    name: 'code-generator',
                    area: 'topArea',
                    props: {
                      align: 'right',
                      width: 100
                    },
                    content: _CodeGenActionBtn.CodeGenActionBtn,
                    contentProps: {
                      ctx: ctx
                    }
                  });
                } // 提前初始化下，这样后面用的时候更快


                CodeGenerator.init();
                _context.next = 9;
                break;

              case 5:
                _context.prev = 5;
                _context.t0 = _context["catch"](0);
                console.error('[plugin-code-geneator] failed to init: ', _context.t0);
                throw _context.t0;

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 5]]);
      }))();
    },
    destroy: function destroy() {}
  };
};

codeGeneratorPlugin.pluginName = 'codeGenerator';
codeGeneratorPlugin.meta = {
  dependencies: [],
  preferenceDeclaration: {
    title: 'codeGenerator 的参数定义',
    properties: [{
      key: 'disableCodeGenActionBtn',
      type: 'boolean',
      description: '是否要禁用出码的动作按钮'
    }]
  }
};
var _default = codeGeneratorPlugin;
exports["default"] = _default;