import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import './index.scss';
import React from 'react';
import { init, plugins } from '@alilc/lowcode-engine';
import ComponentsPane from '@alilc/lowcode-plugin-components-pane';
import Inject, { injectAssets } from '@alilc/lowcode-plugin-inject';
import CodeGenPlugin from '../';
var preference = new Map();
preference.set('DataSourcePane', {
  importPlugins: [],
  dataSourceTypes: [{
    type: 'fetch'
  }, {
    type: 'jsonp'
  }]
});
(function () {
  var _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var setterRegistry;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return plugins.register(Inject);

          case 2:
            _context4.next = 4;
            return plugins.register(Object.assign(function (ctx) {
              return {
                name: 'editor-init',
                init: function init() {
                  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                    var assets, schema;
                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return fetchJSON('/assets.json');

                          case 2:
                            assets = _context.sent;
                            _context.t0 = ctx.material;
                            _context.next = 6;
                            return injectAssets(assets);

                          case 6:
                            _context.t1 = _context.sent;

                            _context.t0.setAssets.call(_context.t0, _context.t1);

                            _context.next = 10;
                            return fetchJSON('/schema.json');

                          case 10:
                            schema = _context.sent;
                            // 加载 schema
                            ctx.project.openDocument(schema);

                          case 12:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }))();
                }
              };
            }, {
              pluginName: 'editorInit'
            }));

          case 4:
            _context4.next = 6;
            return plugins.register(Object.assign(function (ctx) {
              return {
                name: 'builtin-plugin-registry',
                init: function init() {
                  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
                    var _componentsPane$disab;

                    var skeleton, project, componentsPane;
                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            skeleton = ctx.skeleton, project = ctx.project; // 注册组件面板

                            // 注册组件面板
                            componentsPane = skeleton.add({
                              area: 'leftArea',
                              type: 'PanelDock',
                              name: 'componentsPane',
                              content: ComponentsPane,
                              contentProps: {},
                              props: {
                                align: 'top',
                                icon: 'zujianku',
                                description: '组件库'
                              }
                            });
                            componentsPane === null || componentsPane === void 0 ? void 0 : (_componentsPane$disab = componentsPane.disable) === null || _componentsPane$disab === void 0 ? void 0 : _componentsPane$disab.call(componentsPane);
                            project.onSimulatorRendererReady(function () {
                              var _componentsPane$enabl;

                              componentsPane === null || componentsPane === void 0 ? void 0 : (_componentsPane$enabl = componentsPane.enable) === null || _componentsPane$enabl === void 0 ? void 0 : _componentsPane$enabl.call(componentsPane);
                            }); // 注册 logo 面板

                            // 注册 logo 面板
                            skeleton.add({
                              area: 'topArea',
                              type: 'Widget',
                              name: 'logo',
                              content: /*#__PURE__*/React.createElement("div", {
                                className: "editor-logo"
                              }, /*#__PURE__*/React.createElement("img", {
                                width: "137",
                                height: "26",
                                src: "https://img.alicdn.com/imgextra/i4/O1CN013w2bmQ25WAIha4Hx9_!!6000000007533-55-tps-137-26.svg"
                              }), /*#__PURE__*/React.createElement("strong", {
                                style: {
                                  lineHeight: '26px',
                                  fontSize: '20px',
                                  verticalAlign: '6px',
                                  marginLeft: '4px'
                                }
                              }, "\u51FA\u7801\u793A\u4F8B")),
                              props: {
                                align: 'left'
                              }
                            });

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }))();
                }
              };
            }, {
              pluginName: 'builtinPluginRegistry'
            }));

          case 6:
            _context4.next = 8;
            return plugins.register(CodeGenPlugin);

          case 8:
            // 设置内置 setter 和事件绑定、插件绑定面板
            setterRegistry = function setterRegistry(ctx) {
              var _AliLowCodeEngineExt = window.AliLowCodeEngineExt,
                  setterMap = _AliLowCodeEngineExt.setterMap,
                  pluginMap = _AliLowCodeEngineExt.pluginMap;
              return {
                name: 'ext-setters-registry',
                init: function init() {
                  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
                    var setters, skeleton;
                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            setters = ctx.setters, skeleton = ctx.skeleton; // 注册setterMap

                            setters.registerSetter(setterMap); // 注册插件
                            // 注册事件绑定面板

                            skeleton.add({
                              area: 'centerArea',
                              type: 'Widget',
                              content: pluginMap.EventBindDialog,
                              name: 'eventBindDialog',
                              props: {}
                            }); // 注册变量绑定面板

                            skeleton.add({
                              area: 'centerArea',
                              type: 'Widget',
                              content: pluginMap.VariableBindDialog,
                              name: 'variableBindDialog',
                              props: {}
                            });

                          case 4:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }))();
                }
              };
            };

            setterRegistry.pluginName = 'setterRegistry';
            _context4.next = 12;
            return plugins.register(setterRegistry);

          case 12:
            // 初始化设计器
            init(document.getElementById('lce-container'), {
              // designMode: 'live',
              // locale: 'zh-CN',
              enableCondition: true,
              enableCanvasLock: true,
              // 默认绑定变量
              supportVariableGlobally: true,
              // simulatorUrl 在当 engine-core.js 同一个路径下时是不需要配置的！！！
              // 这里因为用的是 unpkg，在不同 npm 包，engine-core.js 和 react-simulator-renderer.js 是不同路径
              simulatorUrl: ['https://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@beta/dist/css/react-simulator-renderer.css', 'https://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@beta/dist/js/react-simulator-renderer.js']
            }, preference);

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  function main() {
    return _main.apply(this, arguments);
  }

  return main;
})()();

function fetchJSON(_x) {
  return _fetchJSON.apply(this, arguments);
}

function _fetchJSON() {
  _fetchJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(url) {
    var res;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return fetch(url);

          case 2:
            res = _context5.sent;
            return _context5.abrupt("return", res.json());

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _fetchJSON.apply(this, arguments);
}