import _extends from "@babel/runtime/helpers/extends";
import React, { useRef, useEffect } from 'react'; // const GRAVITY_PREFIX = 'lowcodeGravityPreview';
// const GRAVITY_PREFIX = 'gravityDemoSdk';

var GRAVITY_PREFIX = 'gravityRiddleSdk';
var defaultProps = {
  // src: "https://gw.alipayobjects.com/as/g/Gravity/gravity/5.0.0-beta.10/gravityDemoSdk/index.html"
  src: 'https://gw.alipayobjects.com/as/g/Gravity/gravity/5.0.0-beta.10/gravityRiddleSdk/index.html',
  code: {},
  target: null,
  style: {
    backgroundColor: '#fff',
    border: 'none',
    position: null,
    display: 'block',
    overflow: null
  },
  scrolling: null,
  importance: null,
  sandbox: null,
  loading: null,
  styles: null,
  name: null,
  className: null,
  referrerPolicy: null,
  title: null,
  allow: 'clipboard-read;clipboard-write;camera;microphone',
  id: null,
  'aria-labelledby': null,
  'aria-hidden': null,
  'aria-label': null,
  width: null,
  height: null,
  onLoad: null,
  onMouseOver: null,
  onMouseOut: null
};
var height;
var boostState;
var iframe;
var isPrivate;
export function getHeight() {
  return height;
}
export function refresh() {
  var channel = GRAVITY_PREFIX;

  if (iframe) {
    iframe.current.contentWindow.postMessage({
      type: channel + "_reload"
    }, '*');
  }
}
export function clear() {
  var channel = GRAVITY_PREFIX;

  if (iframe) {
    iframe.current.contentWindow.postMessage({
      type: channel + "_remove_cache"
    }, '*');
  }
}
export function getBoostState() {
  return boostState;
}
export function toggleBoostState() {
  var channel = GRAVITY_PREFIX;

  if (iframe) {
    iframe.current.contentWindow.postMessage({
      type: channel + "_toggle_boost_state"
    }, '*');
  }
}
export function isPrivateMode() {
  return isPrivate;
}
export function change(filename, content) {
  var channel = GRAVITY_PREFIX;

  if (iframe) {
    iframe.current.contentWindow.postMessage({
      type: channel + "_file_change",
      filename: filename,
      content: content
    }, '*');
  }
}
export default (function (props) {
  var iframeEl = useRef(null);
  iframe = iframeEl; // let iframeElOnload = useRef(false);

  useEffect(function () {
    // iframeEl.current.contentWindow.location.reload();
    var channel = GRAVITY_PREFIX;
    iframeEl.current.contentWindow.postMessage({
      type: channel + "_reload"
    }, '*');

    function handler(msg) {
      var channel = GRAVITY_PREFIX;
      var type = msg.data.type;

      if (type) {
        if (type === channel + "_force_update") {
          if (props.force) {
            props.force();
          }
        }

        if (type === channel + "_code_fetch") {
          if (props.code && props.code.modules) {
            var modules = props.code.modules;
            var imn = '';
            var im = Object.keys(modules).some(function (m) {
              if (modules[m].code === null || modules[m].code === undefined) {
                imn = m;
                return m;
              }

              return false;
            });

            if (!im) {
              iframeEl.current.contentWindow.postMessage({
                type: channel + "_code_fetch",
                code: props.code
              }, '*');
            } else {
              console.warn("\u6A21\u5757 " + imn + " \u4EE3\u7801\u5B58\u5728\u5F02\u5E38\uFF0Ccode \u4E3A " + modules[imn].code);
            }
          }
        }

        if (type === channel + "_get_height") {
          height = msg.data && msg.data.height || 0;
        }

        if (type === channel + "_boost_state") {
          boostState = msg.data && msg.data.boostState;
        }

        if (type === channel + "_is_private_mode") {
          isPrivate = msg.data && msg.data.isPrivateMode;
        }
      }
    }

    window.addEventListener('message', handler);
    return function () {
      window.removeEventListener('message', handler);
    }; // return iframeEl.current.addEventListener('load', () => {
    //   iframeElOnload = true;
    //   iframeEl.current.contentWindow.postMessage({
    //     type: 'demo_fetch_code',
    //     code,
    //   });
    // });
  }, [props.code]); // useEffect(() => {
  //   if (iframeElOnload) {
  //     iframeEl.current.contentWindow.postMessage({
  //       type: 'demo_fetch_code',
  //       code,
  //     });
  //   }
  // }, [
  //   props.code
  // ]);

  var newProps = _extends({}, defaultProps, props);

  var _final = Object.create(null);

  for (var _i = 0, _Object$keys = Object.keys(newProps); _i < _Object$keys.length; _i++) {
    var prop = _Object$keys[_i];

    if (newProps[prop] != null) {
      _final[prop] = newProps[prop];
    }
  }

  for (var _i2 = 0, _Object$keys2 = Object.keys(_final.style); _i2 < _Object$keys2.length; _i2++) {
    var i = _Object$keys2[_i2];

    if (_final.style[i] == null) {
      delete _final.style[i];
    }
  }

  return (
    /*#__PURE__*/
    // eslint-disable-next-line
    React.createElement("iframe", _extends({
      ref: iframeEl
    }, _final))
  );
});