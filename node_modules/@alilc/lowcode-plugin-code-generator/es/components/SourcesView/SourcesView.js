import _extends from "@babel/runtime/helpers/extends";
import './SourcesView.scss';
import React, { useMemo, useRef, useState } from 'react';
import naturalCompare from 'string-natural-compare';
import { Tree } from '@alifd/next';
import Editor from '@alilc/lowcode-plugin-base-monaco-editor';
import '@alilc/lowcode-plugin-base-monaco-editor/lib/style';
import { FileTypeIcon } from '../FileTypeIcon';
var FILE_TYPES_ICON_MAP = {
  js: 'js',
  jsx: 'jsx',
  ts: 'ts',
  tsx: 'ts',
  json: 'json'
};
var DEBOUNCE_UPDATE_INTERVAL_IN_MS = 500;
export function SourcesView(_ref) {
  var _state$currentFile, _state$currentFile2, _state$currentFile3;

  var height = _ref.height,
      code = _ref.code,
      onCodeChange = _ref.onCodeChange;

  var _useState = useState(function () {
    var allFiles = Object.values(code.modules);
    var currentFile = [allFiles.find(function (x) {
      return /pages.+(js|ts)x?$/.test(x.fpath);
    }), allFiles.find(function (m) {
      return m.entry;
    })].filter(Boolean)[0];
    return {
      currentFile: currentFile,
      selectedKeys: [currentFile === null || currentFile === void 0 ? void 0 : currentFile.fpath]
    };
  }),
      state = _useState[0],
      setState = _useState[1];

  var ref = useRef({
    debounceTimer: null
  });
  var fileTreeNodes = useMemo(function () {
    var files = Object.values(code.modules);
    var rootNodes = [];
    files.forEach(function (file) {
      var addFileToNodes = function addFileToNodes(currentNodes, basePath, path, file) {
        var _path$split$filter = path.split('/').filter(Boolean),
            head = _path$split$filter[0],
            tail = _path$split$filter.slice(1);

        if (tail.length === 0) {
          currentNodes.push({
            label: head,
            key: file.fpath,
            children: [],
            icon: getFileIcon(file.fpath)
          });
        } else {
          var parentNode = currentNodes.find(function (node) {
            return node.label === head;
          });

          if (!parentNode) {
            parentNode = {
              label: head,
              key: basePath + "/" + head,
              children: [],
              icon: /*#__PURE__*/React.createElement(FileTypeIcon, {
                type: "folder"
              })
            };
            currentNodes.push(parentNode);
          }

          parentNode.children = parentNode.children || [];
          addFileToNodes(parentNode.children, basePath + "/" + head, tail.join('/'), file);
        }
      };

      addFileToNodes(rootNodes, '/', file.fpath, file);
    });
    return sortNodes(rootNodes);
  }, [code]);
  var defaultExpandedKeys = useMemo(function () {
    return Array.from(new Set([].concat(fileTreeNodes.filter(function (node) {
      var _node$children;

      return (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length;
    }).map(function (node) {
      return node.key;
    }), state.selectedKeys, ['src', 'src/pages'])).values());
  }, [fileTreeNodes, state.selectedKeys]);
  return /*#__PURE__*/React.createElement("div", {
    className: "code-gen-sources-view",
    style: {
      height: height
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "sources-panes"
  }, /*#__PURE__*/React.createElement("div", {
    className: "file-tree-pane"
  }, /*#__PURE__*/React.createElement(Tree, {
    dataSource: fileTreeNodes,
    selectable: true,
    selectedKeys: state.selectedKeys,
    defaultExpandedKeys: defaultExpandedKeys,
    onSelect: function onSelect(keys) {
      setState(function (prev) {
        if (ref.current.debounceTimer) {
          ref.current.debounceTimer = null;
        }

        return {
          selectedKeys: keys,
          currentFile: code.modules[keys[0]] || prev.currentFile
        };
      });
    }
  })), /*#__PURE__*/React.createElement("div", {
    className: "source-code-pane",
    style: {
      height: height
    }
  }, /*#__PURE__*/React.createElement(Editor, {
    height: calcHeightInPx(height) - 2 // 注意：这里的编辑器会有边框所以要减掉一点
    ,
    language: getFileLanguage((_state$currentFile = state.currentFile) === null || _state$currentFile === void 0 ? void 0 : _state$currentFile.fpath),
    saveViewState: true,
    defaultValue: (_state$currentFile2 = state.currentFile) === null || _state$currentFile2 === void 0 ? void 0 : _state$currentFile2.code,
    path: (_state$currentFile3 = state.currentFile) === null || _state$currentFile3 === void 0 ? void 0 : _state$currentFile3.fpath,
    onChange: function onChange(value) {
      console.debug('[monaco editor] onChange: %o (currentFile: %o)', {
        value: value
      }, state.currentFile);
      var currentFile = state.currentFile;

      if (currentFile) {
        if (ref.current.debounceTimer) {
          clearTimeout(ref.current.debounceTimer);
        }

        ref.current.debounceTimer = setTimeout(function () {
          var _extends2;

          ref.current.debounceTimer = null;
          onCodeChange(_extends({}, code, {
            modules: _extends({}, code.modules, (_extends2 = {}, _extends2[currentFile.fpath] = _extends({}, currentFile, {
              code: value || ''
            }), _extends2))
          }));
        }, DEBOUNCE_UPDATE_INTERVAL_IN_MS);
      }
    }
  }))));
}

function getFileIcon(file) {
  var type = FILE_TYPES_ICON_MAP[(file || '').split('.').pop() || ''] || 'text';
  return /*#__PURE__*/React.createElement(FileTypeIcon, {
    type: type
  });
}

function getFileLanguage(file) {
  switch ((file || '').split('.').pop()) {
    case 'ts':
    case 'tsx':
      return 'typescript';

    case 'js':
    case 'jsx':
      return 'javascript';

    case 'css':
      return 'css';

    case 'scss':
      return 'scss';

    case 'less':
      return 'less';

    case 'json':
      return 'json';

    case 'md':
      return 'markdown';

    default:
      return 'text';
  }
}

function sortNodes(nodes) {
  return nodes.sort(function (a, b) {
    var _a$children, _b$children, _a$children2, _b$children2;

    if ((_a$children = a.children) !== null && _a$children !== void 0 && _a$children.length && !((_b$children = b.children) !== null && _b$children !== void 0 && _b$children.length)) {
      return -1;
    }

    if (!((_a$children2 = a.children) !== null && _a$children2 !== void 0 && _a$children2.length) && (_b$children2 = b.children) !== null && _b$children2 !== void 0 && _b$children2.length) {
      return 1;
    }

    return naturalCompare(a.label, b.label);
  }).map(function (node) {
    var _node$children2;

    if ((_node$children2 = node.children) !== null && _node$children2 !== void 0 && _node$children2.length) {
      return _extends({}, node, {
        children: sortNodes(node.children)
      });
    }

    return node;
  });
}

function calcHeightInPx(height) {
  var div = document.createElement('div');
  div.setAttribute('style', "position:fixed;top:0;left:0;width:0;height:" + height + ";");
  document.body.appendChild(div);
  return Number(div.getBoundingClientRect().height.toFixed(0));
}