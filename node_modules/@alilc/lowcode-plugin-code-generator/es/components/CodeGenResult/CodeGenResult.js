import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import './CodeGenResult.scss';
import React, { useEffect, useState } from 'react';
import FileSaver from 'file-saver';
import JSZip from 'jszip';
import { Collapse, Message } from '@alifd/next';
import { CodeGenPreview } from '../CodeGenPreview';
import { SourcesView } from '../SourcesView';
export function CodeGenResult(_ref) {
  var result = _ref.result,
      schema = _ref.schema;

  var _useState = useState({
    expandedKeys: ['sources', 'preview']
  }),
      paneState = _useState[0],
      setPaneState = _useState[1];

  var _useState2 = useState(null),
      gravityCode = _useState2[0],
      setGravityCode = _useState2[1];

  var _useState3 = useState(0),
      refresh = _useState3[0],
      setRefresh = _useState3[1];

  useEffect(function () {
    setGravityCode(convertCodeGenResult(result, schema));
  }, [result]);

  if (!result) {
    return null;
  }

  var sourcesViewHeight = paneState.expandedKeys.includes('preview') ? '40vh' : '80vh';
  var gravityDemoHeight = paneState.expandedKeys.includes('sources') ? '40vh' : '80vh';

  var handleDownloadSources = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {
      var zip;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              e.preventDefault();
              e.stopPropagation();
              zip = new JSZip();
              Object.values((gravityCode === null || gravityCode === void 0 ? void 0 : gravityCode.modules) || {}).forEach(function (file) {
                zip.file(file.fpath.replace(/^\/+/, ''), file.code);
              });
              _context.next = 7;
              return zip.generateAsync({
                type: 'blob'
              }).then(function (content) {
                FileSaver.saveAs(content, 'ali-lowcode-generated-sources.zip');
              });

            case 7:
              _context.next = 13;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              console.log('failed to download sources: ', _context.t0);
              Message.error('下载失败！');

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 9]]);
    }));

    return function handleDownloadSources(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement("div", {
    className: "code-gen-result"
  }, /*#__PURE__*/React.createElement(Collapse, {
    expandedKeys: paneState.expandedKeys,
    onExpand: function onExpand(expandedKeys) {
      setPaneState({
        expandedKeys: expandedKeys
      });
    }
  }, /*#__PURE__*/React.createElement(Collapse.Panel, {
    title: /*#__PURE__*/React.createElement("span", null, "\u51FA\u7801\u751F\u6210\u7684\u6E90\u4EE3\u7801", ' ', /*#__PURE__*/React.createElement("a", {
      href: "javascript:void(0)",
      onClick: handleDownloadSources
    }, "\u5BFC\u51FA/\u4E0B\u8F7D zip \u5305")),
    key: "sources"
  }, gravityCode != null && /*#__PURE__*/React.createElement(SourcesView, {
    height: sourcesViewHeight,
    code: gravityCode,
    onCodeChange: setGravityCode
  })), /*#__PURE__*/React.createElement(Collapse.Panel, {
    title: /*#__PURE__*/React.createElement("span", null, "\u5728\u7EBF\u9884\u89C8", ' ', /*#__PURE__*/React.createElement("a", {
      href: "#refresh",
      onClick: function onClick(e) {
        e.preventDefault();
        e.stopPropagation();
        setRefresh(Date.now());
      }
    }, "\u5237\u65B0")),
    key: "preview"
  }, /*#__PURE__*/React.createElement("div", {
    className: "code-gen-result-gravity-demo",
    style: {
      height: gravityDemoHeight
    }
  }, /*#__PURE__*/React.createElement(CodeGenPreview, {
    code: gravityCode,
    height: gravityDemoHeight,
    refresh: refresh
  })))));
}

function convertCodeGenResult(result, schema) {
  var schemaFiles = {
    '/.project-schema.json': {
      fpath: '/.project-schema.json',
      code: JSON.stringify(schema, null, 2) + "\n"
    }
  };

  if (!result || !Array.isArray(result) || !result.length) {
    return {
      type: 'demo',
      modules: schemaFiles
    };
  }

  var code = {
    type: 'demo',
    modules: result.reduce(function (acc, file) {
      var _extends2;

      return _extends({}, acc, (_extends2 = {}, _extends2["/" + file.pathName] = {
        fpath: "/" + file.pathName,
        code: file.content,
        entry: undefined,
        packagejson: ['package.json'].includes(file.pathName) ? 1 : undefined
      }, _extends2));
    }, {})
  };
  var foundEntry = false; // 设置入口文件

  ['index.js', 'index.ts', 'index.tsx', 'app.js', 'app.ts', 'app.tsx'].forEach(function (fileName) {
    if (!foundEntry) {
      var filePath = "/src/" + fileName;

      if (code.modules[filePath]) {
        foundEntry = true;

        if (fileName === 'index.js') {
          code.modules[filePath].entry = 1;
        } else {
          code.modules['/src/index.js'] = {
            fpath: '/src/index.js',
            entry: 1,
            code: "import \"./" + fileName.replace(/\.\w+$/, '') + "\""
          };
        }
      }
    }
  });

  if (!foundEntry) {
    console.warn('Failed to find entry file for demo.');
  } // 补充 schema 文件


  Object.assign(code.modules, schemaFiles);
  return code;
}