import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect } from 'react'; // 预先检测下是否在内网环境中

var isInIntranetPromise = detectIsInIntranet();
/**
 * 判断是否在内网环境中中
 */

export function useIsInIntranet() {
  var _React$useState = React.useState({
    isInIntranet: false
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  useEffect(function () {
    // 如果预加载失败了，可以尝试重试下
    isInIntranetPromise["catch"](function () {
      isInIntranetPromise = detectIsInIntranet();
      return isInIntranetPromise;
    }).then(function (isInIntranet) {
      setState({
        isInIntranet: isInIntranet
      });
    });
  }, []);
  return state.isInIntranet;
}
/**
 * 判断是否在内网环境中中
 */

function detectIsInIntranet() {
  return _detectIsInIntranet.apply(this, arguments);
}

function _detectIsInIntranet() {
  _detectIsInIntranet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var res;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fetch('https://dev.g.alicdn.com/ali-lowcode/ali-lowcode-materials/1.1.0/schema.json');

          case 3:
            res = _context.sent;

            if (!res.ok) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", true);

          case 6:
            return _context.abrupt("return", false);

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", false);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  }));
  return _detectIsInIntranet.apply(this, arguments);
}