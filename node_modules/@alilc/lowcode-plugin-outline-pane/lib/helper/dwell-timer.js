"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _lowcodeUtils = require("@alilc/lowcode-utils");
/**
 * 停留检查计时器
 */
var DwellTimer = exports["default"] = /*#__PURE__*/function () {
  function DwellTimer(decide, timeout) {
    if (timeout === void 0) {
      timeout = 500;
    }
    this.timer = void 0;
    this.previous = void 0;
    this.event = void 0;
    this.decide = void 0;
    this.timeout = 500;
    this.decide = decide;
    this.timeout = timeout;
  }
  var _proto = DwellTimer.prototype;
  _proto.focus = function focus(node, event) {
    var _this = this;
    this.event = event;
    if (this.previous === node) {
      return;
    }
    this.reset();
    this.previous = node;
    this.timer = setTimeout(function () {
      _this.previous && _this.decide(_this.previous, _this.event);
      _this.reset();
    }, this.timeout);
  };
  _proto.tryFocus = function tryFocus(loc) {
    var _loc$detail$focus;
    if (!loc || !(0, _lowcodeUtils.isLocationChildrenDetail)(loc.detail)) {
      this.reset();
      return;
    }
    if (((_loc$detail$focus = loc.detail.focus) === null || _loc$detail$focus === void 0 ? void 0 : _loc$detail$focus.type) === 'node') {
      this.focus(loc.detail.focus.node, loc.event);
    } else {
      this.reset();
    }
  };
  _proto.reset = function reset() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = undefined;
    }
    this.previous = undefined;
  };
  return DwellTimer;
}();