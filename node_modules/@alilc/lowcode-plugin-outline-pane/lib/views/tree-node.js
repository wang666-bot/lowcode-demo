"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _treeTitle = _interopRequireDefault(require("./tree-title"));
var _treeBranches = _interopRequireDefault(require("./tree-branches"));
var _eyeClose = require("../icons/eye-close");
var ModalTreeNodeView = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(ModalTreeNodeView, _PureComponent);
  function ModalTreeNodeView(props) {
    var _project$currentDocum;
    var _this;
    _this = _PureComponent.call(this, props) || this;

    // 模态管理对象
    _this.modalNodesManager = void 0;
    _this.pluginContext = void 0;
    _this.pluginContext = props.treeNode.pluginContext;
    var project = _this.pluginContext.project;
    _this.modalNodesManager = (_project$currentDocum = project.currentDocument) === null || _project$currentDocum === void 0 ? void 0 : _project$currentDocum.modalNodesManager;
    _this.state = {
      treeChildren: _this.rootTreeNode.children
    };
    return _this;
  }
  var _proto = ModalTreeNodeView.prototype;
  _proto.hideAllNodes = function hideAllNodes() {
    var _this$modalNodesManag;
    (_this$modalNodesManag = this.modalNodesManager) === null || _this$modalNodesManag === void 0 ? void 0 : _this$modalNodesManag.hideModalNodes();
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var rootTreeNode = this.rootTreeNode;
    rootTreeNode.onExpandableChanged(function () {
      _this2.setState({
        treeChildren: rootTreeNode.children
      });
    });
  };
  _proto.render = function render() {
    var _this$modalNodesManag2;
    var rootTreeNode = this.rootTreeNode;
    var expanded = rootTreeNode.expanded;
    var hasVisibleModalNode = !!((_this$modalNodesManag2 = this.modalNodesManager) !== null && _this$modalNodesManag2 !== void 0 && _this$modalNodesManag2.getVisibleModalNode());
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-modal"
    }, /*#__PURE__*/React.createElement("div", {
      className: "tree-node-modal-title"
    }, /*#__PURE__*/React.createElement("span", null, this.pluginContext.intlNode('Modal View')), /*#__PURE__*/React.createElement("div", {
      className: "tree-node-modal-title-visible-icon",
      onClick: this.hideAllNodes.bind(this)
    }, hasVisibleModalNode ? /*#__PURE__*/React.createElement(_eyeClose.IconEyeClose, null) : null)), /*#__PURE__*/React.createElement("div", {
      className: "tree-pane-modal-content"
    }, /*#__PURE__*/React.createElement(_treeBranches["default"], {
      treeNode: rootTreeNode,
      treeChildren: this.state.treeChildren,
      expanded: expanded,
      isModal: true
    })));
  };
  (0, _createClass2["default"])(ModalTreeNodeView, [{
    key: "rootTreeNode",
    get: function get() {
      var _project$currentDocum2;
      var treeNode = this.props.treeNode;
      // 当指定了新的根节点时，要从原始的根节点去获取模态节点
      var project = this.pluginContext.project;
      var rootNode = (_project$currentDocum2 = project.currentDocument) === null || _project$currentDocum2 === void 0 ? void 0 : _project$currentDocum2.root;
      var rootTreeNode = treeNode.tree.getTreeNode(rootNode);
      return rootTreeNode;
    }
  }]);
  return ModalTreeNodeView;
}(_react.PureComponent);
var TreeNodeView = exports["default"] = /*#__PURE__*/function (_PureComponent2) {
  (0, _inheritsLoose2["default"])(TreeNodeView, _PureComponent2);
  function TreeNodeView(props) {
    var _treeNode$dropDetail;
    var _this3;
    _this3 = _PureComponent2.call(this, props) || this;
    _this3.state = {
      expanded: false,
      selected: false,
      hidden: false,
      locked: false,
      detecting: false,
      isRoot: false,
      highlight: false,
      dropping: false,
      conditionFlow: false,
      expandable: false,
      treeChildren: [],
      filterWorking: false,
      matchChild: false,
      matchSelf: false
    };
    _this3.eventOffCallbacks = [];
    var _this3$props = _this3.props,
      treeNode = _this3$props.treeNode,
      isRootNode = _this3$props.isRootNode;
    _this3.state = {
      expanded: isRootNode ? true : treeNode.expanded,
      selected: treeNode.selected,
      hidden: treeNode.hidden,
      locked: treeNode.locked,
      detecting: treeNode.detecting,
      isRoot: treeNode.isRoot(),
      // 是否投放响应
      dropping: ((_treeNode$dropDetail = treeNode.dropDetail) === null || _treeNode$dropDetail === void 0 ? void 0 : _treeNode$dropDetail.index) != null,
      conditionFlow: treeNode.node.conditionGroup != null,
      highlight: treeNode.isFocusingNode(),
      expandable: treeNode.expandable,
      treeChildren: treeNode.children
    };
    return _this3;
  }
  var _proto2 = TreeNodeView.prototype;
  _proto2.componentDidMount = function componentDidMount() {
    var _this4 = this,
      _doc$selection,
      _doc$detecting;
    var treeNode = this.props.treeNode;
    var project = treeNode.pluginContext.project;
    var doc = project.currentDocument;
    treeNode.onExpandedChanged(function (expanded) {
      _this4.setState({
        expanded: expanded
      });
    });
    treeNode.onHiddenChanged(function (hidden) {
      _this4.setState({
        hidden: hidden
      });
    });
    treeNode.onLockedChanged(function (locked) {
      _this4.setState({
        locked: locked
      });
    });
    treeNode.onExpandableChanged(function (expandable) {
      _this4.setState({
        expandable: expandable,
        treeChildren: treeNode.children
      });
    });
    treeNode.onFilterResultChanged(function () {
      var _treeNode$filterReult = treeNode.filterReult,
        newFilterWorking = _treeNode$filterReult.filterWorking,
        newMatchChild = _treeNode$filterReult.matchChild,
        newMatchSelf = _treeNode$filterReult.matchSelf;
      _this4.setState({
        filterWorking: newFilterWorking,
        matchChild: newMatchChild,
        matchSelf: newMatchSelf
      });
    });
    this.eventOffCallbacks.push(doc === null || doc === void 0 ? void 0 : doc.onDropLocationChanged(function () {
      var _treeNode$dropDetail2;
      _this4.setState({
        dropping: ((_treeNode$dropDetail2 = treeNode.dropDetail) === null || _treeNode$dropDetail2 === void 0 ? void 0 : _treeNode$dropDetail2.index) != null
      });
    }));
    var offSelectionChange = doc === null || doc === void 0 ? void 0 : (_doc$selection = doc.selection) === null || _doc$selection === void 0 ? void 0 : _doc$selection.onSelectionChange(function () {
      _this4.setState({
        selected: treeNode.selected
      });
    });
    this.eventOffCallbacks.push(offSelectionChange);
    var offDetectingChange = doc === null || doc === void 0 ? void 0 : (_doc$detecting = doc.detecting) === null || _doc$detecting === void 0 ? void 0 : _doc$detecting.onDetectingChange(function () {
      _this4.setState({
        detecting: treeNode.detecting
      });
    });
    this.eventOffCallbacks.push(offDetectingChange);
  };
  _proto2.componentWillUnmount = function componentWillUnmount() {
    var _this$eventOffCallbac;
    (_this$eventOffCallbac = this.eventOffCallbacks) === null || _this$eventOffCallbac === void 0 ? void 0 : _this$eventOffCallbac.forEach(function (offFun) {
      offFun && offFun();
    });
  };
  _proto2.shouldShowModalTreeNode = function shouldShowModalTreeNode() {
    var _project$currentDocum3, _rootTreeNode$childre;
    var _this$props = this.props,
      treeNode = _this$props.treeNode,
      isRootNode = _this$props.isRootNode;
    if (!isRootNode) {
      // 只在 当前树 的根节点展示模态节点
      return false;
    }

    // 当指定了新的根节点时，要从原始的根节点去获取模态节点
    var project = treeNode.pluginContext.project;
    var rootNode = (_project$currentDocum3 = project.currentDocument) === null || _project$currentDocum3 === void 0 ? void 0 : _project$currentDocum3.root;
    var rootTreeNode = treeNode.tree.getTreeNode(rootNode);
    var modalNodes = (_rootTreeNode$childre = rootTreeNode.children) === null || _rootTreeNode$childre === void 0 ? void 0 : _rootTreeNode$childre.filter(function (item) {
      var _item$node$componentM;
      return (_item$node$componentM = item.node.componentMeta) === null || _item$node$componentM === void 0 ? void 0 : _item$node$componentM.isModal;
    });
    return !!(modalNodes && modalNodes.length > 0);
  };
  _proto2.render = function render() {
    var _this$props2 = this.props,
      treeNode = _this$props2.treeNode,
      isModal = _this$props2.isModal,
      isRootNode = _this$props2.isRootNode;
    var className = (0, _classnames["default"])('tree-node', {
      // 是否展开
      expanded: this.state.expanded,
      // 是否选中的
      selected: this.state.selected,
      // 是否隐藏的
      hidden: this.state.hidden,
      // 是否锁定的
      locked: this.state.locked,
      // 是否悬停中
      detecting: this.state.detecting,
      // 是否投放响应
      dropping: this.state.dropping,
      'is-root': this.state.isRoot,
      'condition-flow': this.state.conditionFlow,
      highlight: this.state.highlight
    });
    var shouldShowModalTreeNode = this.shouldShowModalTreeNode();

    // filter 处理
    var _this$state = this.state,
      filterWorking = _this$state.filterWorking,
      matchChild = _this$state.matchChild,
      matchSelf = _this$state.matchSelf;
    if (!isRootNode && filterWorking && !matchChild && !matchSelf) {
      // 条件过滤生效时，如果未命中本节点或子节点，则不展示该节点
      // 根节点始终展示
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      "data-id": treeNode.nodeId
    }, /*#__PURE__*/React.createElement(_treeTitle["default"], {
      treeNode: treeNode,
      isModal: isModal,
      expanded: this.state.expanded,
      hidden: this.state.hidden,
      locked: this.state.locked,
      expandable: this.state.expandable
    }), shouldShowModalTreeNode && /*#__PURE__*/React.createElement(ModalTreeNodeView, {
      treeNode: treeNode
    }), /*#__PURE__*/React.createElement(_treeBranches["default"], {
      treeNode: treeNode,
      isModal: false,
      expanded: this.state.expanded,
      treeChildren: this.state.treeChildren
    }));
  };
  return TreeNodeView;
}(_react.PureComponent);