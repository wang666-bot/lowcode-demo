import { IPublicTypeTitleContent, IPublicTypeLocationChildrenDetail, IPublicModelNode, IPublicTypeDisposable } from '@alilc/lowcode-types';
import { Tree } from './tree';
import { IOutlinePanelPluginContext } from './tree-master';
/**
 * 大纲树过滤结果
 */
export interface FilterResult {
    filterWorking: boolean;
    matchChild: boolean;
    matchSelf: boolean;
    keywords: string;
}
export default class TreeNode {
    readonly pluginContext: IOutlinePanelPluginContext;
    event: any;
    private _node;
    readonly tree: Tree;
    private _filterResult;
    /**
     * 默认为折叠状态
     * 在初始化根节点时，设置为展开状态
     */
    private _expanded;
    id: string;
    get nodeId(): string;
    /**
     * 是否可以展开
     */
    get expandable(): boolean;
    get expanded(): boolean;
    /**
     * 插入"线"位置信息
     */
    get dropDetail(): IPublicTypeLocationChildrenDetail | undefined | null;
    get depth(): number;
    get detecting(): boolean;
    get hidden(): boolean;
    get locked(): boolean;
    get selected(): boolean;
    get title(): IPublicTypeTitleContent;
    get titleLabel(): any;
    get icon(): import("@alilc/lowcode-types").IPublicTypeIconType;
    get parent(): TreeNode | null;
    get slots(): TreeNode[];
    get condition(): boolean;
    get children(): TreeNode[] | null;
    get node(): IPublicModelNode;
    constructor(tree: Tree, node: IPublicModelNode);
    setLocked(flag: boolean): void;
    deleteNode(node: IPublicModelNode): void;
    onFilterResultChanged(fn: () => void): IPublicTypeDisposable;
    onExpandedChanged(fn: (expanded: boolean) => void): IPublicTypeDisposable;
    onHiddenChanged(fn: (hidden: boolean) => void): IPublicTypeDisposable;
    onLockedChanged(fn: (locked: boolean) => void): IPublicTypeDisposable;
    onTitleLabelChanged(fn: (treeNode: TreeNode) => void): IPublicTypeDisposable;
    onConditionChanged(fn: (treeNode: TreeNode) => void): IPublicTypeDisposable;
    onExpandableChanged(fn: (expandable: boolean) => void): IPublicTypeDisposable;
    /**
     * 触发 onExpandableChanged 回调
     */
    notifyExpandableChanged(): void;
    notifyTitleLabelChanged(): void;
    notifyConditionChanged(): void;
    setHidden(flag: boolean): void;
    isFocusingNode(): boolean;
    setExpanded(value: boolean): void;
    isRoot(includeOriginalRoot?: boolean): boolean;
    /**
     * 是否是响应投放区
     */
    isResponseDropping(): boolean;
    setTitleLabel(label: string): void;
    /**
     * 是否是容器，允许子节点拖入
     */
    isContainer(): boolean;
    /**
     * 判断是否有"插槽"
     */
    hasSlots(): boolean;
    hasChildren(): boolean;
    select(isMulti: boolean): void;
    /**
     * 展开节点，支持依次展开父节点
     */
    expand(tryExpandParents?: boolean): void;
    expandParents(): void;
    setNode(node: IPublicModelNode): void;
    get filterReult(): FilterResult;
    setFilterReult(val: FilterResult): void;
}
