import { IPublicModelPluginContext } from '@alilc/lowcode-types';
import TreeNode from './tree-node';
import { Tree } from './tree';
import { ReactNode } from 'react';
export interface ITreeBoard {
    readonly at: string | symbol;
    scrollToNode(treeNode: TreeNode, detail?: any): void;
}
export interface IOutlinePanelPluginContext extends IPublicModelPluginContext {
    extraTitle?: string;
    intlNode(id: string, params?: object): ReactNode;
    intl(id: string, params?: object): string;
    getLocale(): string;
}
export declare class TreeMaster {
    readonly options: {
        extraTitle?: string;
    };
    pluginContext: IOutlinePanelPluginContext;
    private boards;
    private treeMap;
    private disposeEvents;
    event: any;
    constructor(pluginContext: IPublicModelPluginContext, options: {
        extraTitle?: string;
    });
    private setPluginContext;
    private disposeEvent;
    private initEvent;
    private toVision;
    addBoard(board: ITreeBoard): void;
    removeBoard(board: ITreeBoard): void;
    purge(): void;
    onPluginContextChange(fn: () => void): void;
    emitPluginContextChange(): void;
    get currentTree(): Tree | null;
}
