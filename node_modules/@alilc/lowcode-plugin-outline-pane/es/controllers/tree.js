import _createClass from "@babel/runtime/helpers/createClass";
import TreeNode from './tree-node';
export var Tree = /*#__PURE__*/function () {
  function Tree(treeMaster) {
    var _this = this;
    this.treeNodesMap = new Map();
    this.id = void 0;
    this.pluginContext = void 0;
    this.treeMaster = void 0;
    this.treeMaster = treeMaster;
    this.pluginContext = treeMaster.pluginContext;
    var doc = this.pluginContext.project.currentDocument;
    this.id = doc === null || doc === void 0 ? void 0 : doc.id;
    doc === null || doc === void 0 ? void 0 : doc.onChangeNodeChildren(function (info) {
      var node = info.node;
      var treeNode = _this.getTreeNodeById(node.id);
      treeNode === null || treeNode === void 0 ? void 0 : treeNode.notifyExpandableChanged();
    });
    doc === null || doc === void 0 ? void 0 : doc.history.onChangeCursor(function () {
      var _this$root;
      (_this$root = _this.root) === null || _this$root === void 0 ? void 0 : _this$root.notifyExpandableChanged();
    });
    doc === null || doc === void 0 ? void 0 : doc.onChangeNodeProp(function (info) {
      var node = info.node,
        key = info.key;
      if (key === '___title___') {
        var treeNode = _this.getTreeNodeById(node.id);
        treeNode === null || treeNode === void 0 ? void 0 : treeNode.notifyTitleLabelChanged();
      } else if (key === '___condition___') {
        var _treeNode = _this.getTreeNodeById(node.id);
        _treeNode === null || _treeNode === void 0 ? void 0 : _treeNode.notifyConditionChanged();
      }
    });
    doc === null || doc === void 0 ? void 0 : doc.onChangeNodeVisible(function (node, visible) {
      var treeNode = _this.getTreeNodeById(node.id);
      treeNode === null || treeNode === void 0 ? void 0 : treeNode.setHidden(!visible);
    });
    doc === null || doc === void 0 ? void 0 : doc.onImportSchema(function () {
      _this.treeNodesMap = new Map();
    });
  }
  var _proto = Tree.prototype;
  _proto.setNodeSelected = function setNodeSelected(nodeId) {
    // 目标节点选中，其他节点展开
    var treeNode = this.treeNodesMap.get(nodeId);
    if (!treeNode) {
      return;
    }
    this.expandAllAncestors(treeNode);
  };
  _proto.getTreeNode = function getTreeNode(node) {
    if (this.treeNodesMap.has(node.id)) {
      var tnode = this.treeNodesMap.get(node.id);
      tnode.setNode(node);
      return tnode;
    }
    var treeNode = new TreeNode(this, node);
    this.treeNodesMap.set(node.id, treeNode);
    return treeNode;
  };
  _proto.getTreeNodeById = function getTreeNodeById(id) {
    return this.treeNodesMap.get(id);
  };
  _proto.expandAllAncestors = function expandAllAncestors(treeNode) {
    if (!treeNode) {
      return;
    }
    if (treeNode.isRoot()) {
      return;
    }
    var ancestors = [];
    var currentNode = treeNode;
    while (!treeNode.isRoot()) {
      var _currentNode;
      currentNode = (_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : _currentNode.parent;
      if (currentNode) {
        ancestors.unshift(currentNode);
      } else {
        break;
      }
    }
    ancestors.forEach(function (ancestor) {
      ancestor.setExpanded(true);
    });
  };
  _proto.expandAllDecendants = function expandAllDecendants(treeNode) {
    var _this2 = this;
    if (!treeNode) {
      return;
    }
    treeNode.setExpanded(true);
    var children = treeNode && treeNode.children;
    if (children) {
      children.forEach(function (child) {
        _this2.expandAllDecendants(child);
      });
    }
  };
  _proto.collapseAllDecendants = function collapseAllDecendants(treeNode) {
    var _this3 = this;
    if (!treeNode) {
      return;
    }
    treeNode.setExpanded(false);
    var children = treeNode && treeNode.children;
    if (children) {
      children.forEach(function (child) {
        _this3.collapseAllDecendants(child);
      });
    }
  };
  _createClass(Tree, [{
    key: "root",
    get: function get() {
      var _this$pluginContext$p;
      if ((_this$pluginContext$p = this.pluginContext.project.currentDocument) !== null && _this$pluginContext$p !== void 0 && _this$pluginContext$p.focusNode) {
        return this.getTreeNode(this.pluginContext.project.currentDocument.focusNode);
      }
      return null;
    }
  }]);
  return Tree;
}();