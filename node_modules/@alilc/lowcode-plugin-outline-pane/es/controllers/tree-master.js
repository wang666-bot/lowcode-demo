import _createClass from "@babel/runtime/helpers/createClass";
import { isLocationChildrenDetail } from '@alilc/lowcode-utils';
import { IPublicEnumPluginRegisterLevel } from '@alilc/lowcode-types';
import { Tree } from './tree';
import EventEmitter from 'events';
import { enUS, zhCN } from '../locale';
var EVENT_NAMES = /*#__PURE__*/function (EVENT_NAMES) {
  EVENT_NAMES["pluginContextChanged"] = "pluginContextChanged";
  return EVENT_NAMES;
}(EVENT_NAMES || {});
export var TreeMaster = /*#__PURE__*/function () {
  function TreeMaster(pluginContext, options) {
    var _this = this;
    this.options = options;
    this.pluginContext = void 0;
    this.boards = new Set();
    this.treeMap = new Map();
    this.disposeEvents = [];
    this.event = new EventEmitter();
    this.setPluginContext(pluginContext);
    var workspace = this.pluginContext.workspace;
    this.initEvent();
    if (pluginContext.registerLevel === IPublicEnumPluginRegisterLevel.Workspace) {
      var _workspace$window;
      this.setPluginContext((_workspace$window = workspace.window) === null || _workspace$window === void 0 ? void 0 : _workspace$window.currentEditorView);
      var dispose;
      var windowViewTypeChangeEvent = function windowViewTypeChangeEvent() {
        var _workspace$window2;
        dispose = (_workspace$window2 = workspace.window) === null || _workspace$window2 === void 0 ? void 0 : _workspace$window2.onChangeViewType(function () {
          var _workspace$window3;
          _this.setPluginContext((_workspace$window3 = workspace.window) === null || _workspace$window3 === void 0 ? void 0 : _workspace$window3.currentEditorView);
        });
      };
      windowViewTypeChangeEvent();
      workspace.onChangeActiveWindow(function () {
        var _workspace$window4;
        _this.setPluginContext((_workspace$window4 = workspace.window) === null || _workspace$window4 === void 0 ? void 0 : _workspace$window4.currentEditorView);
        dispose && dispose();
        windowViewTypeChangeEvent();
      });
    }
  }
  var _proto = TreeMaster.prototype;
  _proto.setPluginContext = function setPluginContext(pluginContext) {
    if (!pluginContext) {
      return;
    }
    var _pluginContext$common = pluginContext.common.utils.createIntl({
        'en-US': enUS,
        'zh-CN': zhCN
      }),
      intl = _pluginContext$common.intl,
      intlNode = _pluginContext$common.intlNode,
      getLocale = _pluginContext$common.getLocale;
    var _pluginContext = Object.assign(pluginContext, {
      intl: intl,
      intlNode: intlNode,
      getLocale: getLocale
    });
    _pluginContext.extraTitle = this.options && this.options['extraTitle'];
    this.pluginContext = _pluginContext;
    this.disposeEvent();
    this.initEvent();
    this.emitPluginContextChange();
  };
  _proto.disposeEvent = function disposeEvent() {
    this.disposeEvents.forEach(function (d) {
      d && d();
    });
  };
  _proto.initEvent = function initEvent() {
    var _this2 = this,
      _canvas$dragon,
      _canvas$activeTracker,
      _canvas$dragon2,
      _canvas$activeTracker2;
    var startTime;
    var _this$pluginContext = this.pluginContext,
      event = _this$pluginContext.event,
      project = _this$pluginContext.project,
      canvas = _this$pluginContext.canvas;
    var setExpandByActiveTracker = function setExpandByActiveTracker(target) {
      var node = target.node,
        detail = target.detail;
      var tree = _this2.currentTree;
      if (!tree /* || node.document !== tree.document */) {
        return;
      }
      var treeNode = tree.getTreeNode(node);
      if (detail && isLocationChildrenDetail(detail)) {
        treeNode.expand(true);
      } else {
        treeNode.expandParents();
      }
      _this2.boards.forEach(function (board) {
        board.scrollToNode(treeNode, detail);
      });
    };
    this.disposeEvents = [(_canvas$dragon = canvas.dragon) === null || _canvas$dragon === void 0 ? void 0 : _canvas$dragon.onDragstart(function () {
      startTime = Date.now() / 1000;
      // needs?
      _this2.toVision();
    }), (_canvas$activeTracker = canvas.activeTracker) === null || _canvas$activeTracker === void 0 ? void 0 : _canvas$activeTracker.onChange(setExpandByActiveTracker), (_canvas$dragon2 = canvas.dragon) === null || _canvas$dragon2 === void 0 ? void 0 : _canvas$dragon2.onDragend(function () {
      var _project$currentDocum, _project$currentDocum2;
      var endTime = Date.now() / 1000;
      var nodes = (_project$currentDocum = project.currentDocument) === null || _project$currentDocum === void 0 ? void 0 : (_project$currentDocum2 = _project$currentDocum.selection) === null || _project$currentDocum2 === void 0 ? void 0 : _project$currentDocum2.getNodes();
      event.emit('outlinePane.dragend', {
        selected: nodes === null || nodes === void 0 ? void 0 : nodes.map(function (n) {
          var _n$componentMeta, _n$componentMeta2;
          if (!n) {
            return;
          }
          var npm = n === null || n === void 0 ? void 0 : (_n$componentMeta = n.componentMeta) === null || _n$componentMeta === void 0 ? void 0 : _n$componentMeta.npm;
          return [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
            return !!item;
          }).join('-') || (n === null || n === void 0 ? void 0 : (_n$componentMeta2 = n.componentMeta) === null || _n$componentMeta2 === void 0 ? void 0 : _n$componentMeta2.componentName);
        }).join('&'),
        time: (endTime - startTime).toFixed(2)
      });
    }), project.onRemoveDocument(function (data) {
      var id = data.id;
      _this2.treeMap["delete"](id);
    })];
    if ((_canvas$activeTracker2 = canvas.activeTracker) !== null && _canvas$activeTracker2 !== void 0 && _canvas$activeTracker2.target) {
      var _canvas$activeTracker3;
      setExpandByActiveTracker((_canvas$activeTracker3 = canvas.activeTracker) === null || _canvas$activeTracker3 === void 0 ? void 0 : _canvas$activeTracker3.target);
    }
  };
  _proto.toVision = function toVision() {
    var tree = this.currentTree;
    if (tree) {
      var _this$pluginContext$p;
      var selection = (_this$pluginContext$p = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p === void 0 ? void 0 : _this$pluginContext$p.selection;
      selection === null || selection === void 0 ? void 0 : selection.getTopNodes().forEach(function (node) {
        tree.getTreeNode(node).setExpanded(false);
      });
    }
  };
  _proto.addBoard = function addBoard(board) {
    this.boards.add(board);
  };
  _proto.removeBoard = function removeBoard(board) {
    this.boards["delete"](board);
  };
  _proto.purge = function purge() {
    // todo others purge
  };
  _proto.onPluginContextChange = function onPluginContextChange(fn) {
    this.event.on(EVENT_NAMES.pluginContextChanged, fn);
  };
  _proto.emitPluginContextChange = function emitPluginContextChange() {
    this.event.emit(EVENT_NAMES.pluginContextChanged);
  };
  _createClass(TreeMaster, [{
    key: "currentTree",
    get: function get() {
      var doc = this.pluginContext.project.getCurrentDocument();
      if (doc) {
        var _id = doc.id;
        if (this.treeMap.has(_id)) {
          return this.treeMap.get(_id);
        }
        var tree = new Tree(this);
        this.treeMap.set(_id, tree);
        return tree;
      }
      return null;
    }
  }]);
  return TreeMaster;
}();