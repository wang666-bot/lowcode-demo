import _createClass from "@babel/runtime/helpers/createClass";
import { isI18nData, isLocationChildrenDetail, uniqueId } from '@alilc/lowcode-utils';
import EventEmitter from 'events';

/**
 * 大纲树过滤结果
 */
var EVENT_NAMES = /*#__PURE__*/function (EVENT_NAMES) {
  EVENT_NAMES["filterResultChanged"] = "filterResultChanged";
  EVENT_NAMES["expandedChanged"] = "expandedChanged";
  EVENT_NAMES["hiddenChanged"] = "hiddenChanged";
  EVENT_NAMES["lockedChanged"] = "lockedChanged";
  EVENT_NAMES["titleLabelChanged"] = "titleLabelChanged";
  EVENT_NAMES["expandableChanged"] = "expandableChanged";
  EVENT_NAMES["conditionChanged"] = "conditionChanged";
  return EVENT_NAMES;
}(EVENT_NAMES || {});
var TreeNode = /*#__PURE__*/function () {
  function TreeNode(tree, node) {
    this.pluginContext = void 0;
    this.event = new EventEmitter();
    this._node = void 0;
    this.tree = void 0;
    this._filterResult = {
      filterWorking: false,
      matchChild: false,
      matchSelf: false,
      keywords: ''
    };
    /**
     * 默认为折叠状态
     * 在初始化根节点时，设置为展开状态
     */
    this._expanded = false;
    this.id = uniqueId('treeNode');
    this.tree = tree;
    this.pluginContext = tree.pluginContext;
    this._node = node;
  }
  var _proto = TreeNode.prototype;
  _proto.setLocked = function setLocked(flag) {
    this.node.lock(flag);
    this.event.emit(EVENT_NAMES.lockedChanged, flag);
  };
  _proto.deleteNode = function deleteNode(node) {
    node && node.remove();
  };
  _proto.onFilterResultChanged = function onFilterResultChanged(fn) {
    var _this = this;
    this.event.on(EVENT_NAMES.filterResultChanged, fn);
    return function () {
      _this.event.off(EVENT_NAMES.filterResultChanged, fn);
    };
  };
  _proto.onExpandedChanged = function onExpandedChanged(fn) {
    var _this2 = this;
    this.event.on(EVENT_NAMES.expandedChanged, fn);
    return function () {
      _this2.event.off(EVENT_NAMES.expandedChanged, fn);
    };
  };
  _proto.onHiddenChanged = function onHiddenChanged(fn) {
    var _this3 = this;
    this.event.on(EVENT_NAMES.hiddenChanged, fn);
    return function () {
      _this3.event.off(EVENT_NAMES.hiddenChanged, fn);
    };
  };
  _proto.onLockedChanged = function onLockedChanged(fn) {
    var _this4 = this;
    this.event.on(EVENT_NAMES.lockedChanged, fn);
    return function () {
      _this4.event.off(EVENT_NAMES.lockedChanged, fn);
    };
  };
  _proto.onTitleLabelChanged = function onTitleLabelChanged(fn) {
    var _this5 = this;
    this.event.on(EVENT_NAMES.titleLabelChanged, fn);
    return function () {
      _this5.event.off(EVENT_NAMES.titleLabelChanged, fn);
    };
  };
  _proto.onConditionChanged = function onConditionChanged(fn) {
    var _this6 = this;
    this.event.on(EVENT_NAMES.conditionChanged, fn);
    return function () {
      _this6.event.off(EVENT_NAMES.conditionChanged, fn);
    };
  };
  _proto.onExpandableChanged = function onExpandableChanged(fn) {
    var _this7 = this;
    this.event.on(EVENT_NAMES.expandableChanged, fn);
    return function () {
      _this7.event.off(EVENT_NAMES.expandableChanged, fn);
    };
  }

  /**
   * 触发 onExpandableChanged 回调
   */;
  _proto.notifyExpandableChanged = function notifyExpandableChanged() {
    this.event.emit(EVENT_NAMES.expandableChanged, this.expandable);
  };
  _proto.notifyTitleLabelChanged = function notifyTitleLabelChanged() {
    this.event.emit(EVENT_NAMES.titleLabelChanged, this.title);
  };
  _proto.notifyConditionChanged = function notifyConditionChanged() {
    this.event.emit(EVENT_NAMES.conditionChanged, this.condition);
  };
  _proto.setHidden = function setHidden(flag) {
    if (this.node.conditionGroup) {
      return;
    }
    if (this.node.visible !== !flag) {
      this.node.visible = !flag;
    }
    this.event.emit(EVENT_NAMES.hiddenChanged, flag);
  };
  _proto.isFocusingNode = function isFocusingNode() {
    var _this$pluginContext$p, _loc$detail$focus, _loc$detail, _loc$detail$focus2;
    var loc = (_this$pluginContext$p = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p === void 0 ? void 0 : _this$pluginContext$p.dropLocation;
    if (!loc) {
      return false;
    }
    return isLocationChildrenDetail(loc.detail) && ((_loc$detail$focus = loc.detail.focus) === null || _loc$detail$focus === void 0 ? void 0 : _loc$detail$focus.type) === 'node' && ((_loc$detail = loc.detail) === null || _loc$detail === void 0 ? void 0 : (_loc$detail$focus2 = _loc$detail.focus) === null || _loc$detail$focus2 === void 0 ? void 0 : _loc$detail$focus2.node.id) === this.nodeId;
  };
  _proto.setExpanded = function setExpanded(value) {
    this._expanded = value;
    this.event.emit(EVENT_NAMES.expandedChanged, value);
  };
  _proto.isRoot = function isRoot(includeOriginalRoot) {
    var _this$pluginContext$p2;
    if (includeOriginalRoot === void 0) {
      includeOriginalRoot = false;
    }
    var rootNode = (_this$pluginContext$p2 = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p2 === void 0 ? void 0 : _this$pluginContext$p2.root;
    return this.tree.root === this || includeOriginalRoot && rootNode === this.node;
  }

  /**
   * 是否是响应投放区
   */;
  _proto.isResponseDropping = function isResponseDropping() {
    var _this$pluginContext$p3, _loc$target;
    var loc = (_this$pluginContext$p3 = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p3 === void 0 ? void 0 : _this$pluginContext$p3.dropLocation;
    if (!loc) {
      return false;
    }
    return ((_loc$target = loc.target) === null || _loc$target === void 0 ? void 0 : _loc$target.id) === this.nodeId;
  };
  _proto.setTitleLabel = function setTitleLabel(label) {
    var origLabel = this.titleLabel;
    if (label === origLabel) {
      return;
    }
    if (label === '') {
      var _this$node$getExtraPr;
      (_this$node$getExtraPr = this.node.getExtraProp('title', false)) === null || _this$node$getExtraPr === void 0 ? void 0 : _this$node$getExtraPr.remove();
    } else {
      var _this$node$getExtraPr2;
      (_this$node$getExtraPr2 = this.node.getExtraProp('title', true)) === null || _this$node$getExtraPr2 === void 0 ? void 0 : _this$node$getExtraPr2.setValue(label);
    }
    this.event.emit(EVENT_NAMES.titleLabelChanged, this);
  }

  /**
   * 是否是容器，允许子节点拖入
   */;
  _proto.isContainer = function isContainer() {
    return this.node.isContainerNode;
  }

  /**
   * 判断是否有"插槽"
   */;
  _proto.hasSlots = function hasSlots() {
    return this.node.hasSlots();
  };
  _proto.hasChildren = function hasChildren() {
    var _this$node$children;
    return !!(this.isContainer() && (_this$node$children = this.node.children) !== null && _this$node$children !== void 0 && _this$node$children.notEmptyNode);
  };
  _proto.select = function select(isMulti) {
    var _this$pluginContext$p4;
    var node = this.node;
    var selection = (_this$pluginContext$p4 = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p4 === void 0 ? void 0 : _this$pluginContext$p4.selection;
    if (isMulti) {
      selection === null || selection === void 0 ? void 0 : selection.add(node.id);
    } else {
      selection === null || selection === void 0 ? void 0 : selection.select(node.id);
    }
  }

  /**
   * 展开节点，支持依次展开父节点
   */;
  _proto.expand = function expand(tryExpandParents) {
    if (tryExpandParents === void 0) {
      tryExpandParents = false;
    }
    // 这边不能直接使用 expanded，需要额外判断是否可以展开
    // 如果只使用 expanded，会漏掉不可以展开的情况，即在不可以展开的情况下，会触发展开
    if (this.expandable && !this._expanded) {
      this.setExpanded(true);
    }
    if (tryExpandParents) {
      this.expandParents();
    }
  };
  _proto.expandParents = function expandParents() {
    var p = this.node.parent;
    while (p) {
      this.tree.getTreeNode(p).setExpanded(true);
      p = p.parent;
    }
  };
  _proto.setNode = function setNode(node) {
    if (this._node !== node) {
      this._node = node;
    }
  };
  _proto.setFilterReult = function setFilterReult(val) {
    this._filterResult = val;
    this.event.emit(EVENT_NAMES.filterResultChanged);
  };
  _createClass(TreeNode, [{
    key: "nodeId",
    get: function get() {
      return this.node.id;
    }

    /**
     * 是否可以展开
     */
  }, {
    key: "expandable",
    get: function get() {
      var _this$dropDetail;
      if (this.locked) return false;
      return this.hasChildren() || this.hasSlots() || ((_this$dropDetail = this.dropDetail) === null || _this$dropDetail === void 0 ? void 0 : _this$dropDetail.index) != null;
    }
  }, {
    key: "expanded",
    get: function get() {
      return this.isRoot(true) || this.expandable && this._expanded;
    }

    /**
     * 插入"线"位置信息
     */
  }, {
    key: "dropDetail",
    get: function get() {
      var _this$pluginContext$p5;
      var loc = (_this$pluginContext$p5 = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p5 === void 0 ? void 0 : _this$pluginContext$p5.dropLocation;
      return loc && this.isResponseDropping() && isLocationChildrenDetail(loc.detail) ? loc.detail : null;
    }
  }, {
    key: "depth",
    get: function get() {
      return this.node.zLevel;
    }
  }, {
    key: "detecting",
    get: function get() {
      var doc = this.pluginContext.project.currentDocument;
      return !!(doc !== null && doc !== void 0 && doc.isDetectingNode(this.node));
    }
  }, {
    key: "hidden",
    get: function get() {
      var cv = this.node.isConditionalVisible();
      if (cv == null) {
        return !this.node.visible;
      }
      return !cv;
    }
  }, {
    key: "locked",
    get: function get() {
      return this.node.isLocked;
    }
  }, {
    key: "selected",
    get: function get() {
      var _this$pluginContext$p6;
      // TODO: check is dragging
      var selection = (_this$pluginContext$p6 = this.pluginContext.project.getCurrentDocument()) === null || _this$pluginContext$p6 === void 0 ? void 0 : _this$pluginContext$p6.selection;
      if (!selection) {
        return false;
      }
      return selection === null || selection === void 0 ? void 0 : selection.has(this.node.id);
    }
  }, {
    key: "title",
    get: function get() {
      return this.node.title;
    }
  }, {
    key: "titleLabel",
    get: function get() {
      var title = this.title;
      if (!title) {
        return '';
      }
      if (title.label) {
        title = title.label;
      }
      if (typeof title === 'string') {
        return title;
      }
      if (isI18nData(title)) {
        var currentLocale = this.pluginContext.getLocale();
        var currentTitle = title[currentLocale];
        return currentTitle;
      }
      return this.node.componentName;
    }
  }, {
    key: "icon",
    get: function get() {
      var _this$node$componentM;
      return (_this$node$componentM = this.node.componentMeta) === null || _this$node$componentM === void 0 ? void 0 : _this$node$componentM.icon;
    }
  }, {
    key: "parent",
    get: function get() {
      var parent = this.node.parent;
      if (parent) {
        return this.tree.getTreeNode(parent);
      }
      return null;
    }
  }, {
    key: "slots",
    get: function get() {
      var _this8 = this;
      // todo: shallowEqual
      return this.node.slots.map(function (node) {
        return _this8.tree.getTreeNode(node);
      });
    }
  }, {
    key: "condition",
    get: function get() {
      return this.node.hasCondition() && !this.node.conditionGroup;
    }
  }, {
    key: "children",
    get: function get() {
      var _this$node$children2,
        _this9 = this;
      return ((_this$node$children2 = this.node.children) === null || _this$node$children2 === void 0 ? void 0 : _this$node$children2.map(function (node) {
        return _this9.tree.getTreeNode(node);
      })) || null;
    }
  }, {
    key: "node",
    get: function get() {
      return this._node;
    }
  }, {
    key: "filterReult",
    get: function get() {
      return this._filterResult;
    }
  }]);
  return TreeNode;
}();
export { TreeNode as default };