import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { PureComponent } from 'react';
import classNames from 'classnames';
import TreeNodeView from './tree-node';
var TreeBranches = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TreeBranches, _PureComponent);
  function TreeBranches(props) {
    var _this;
    _this = _PureComponent.call(this, props) || this;
    _this.state = {
      filterWorking: false,
      matchChild: false
    };
    _this.offExpandedChanged = void 0;
    var treeNode = _this.props.treeNode;
    var _treeNode$filterReult = treeNode.filterReult,
      filterWorking = _treeNode$filterReult.filterWorking,
      matchChild = _treeNode$filterReult.matchChild;
    _this.setState({
      filterWorking: filterWorking,
      matchChild: matchChild
    });
    return _this;
  }
  var _proto = TreeBranches.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var treeNode = this.props.treeNode;
    treeNode.onFilterResultChanged(function () {
      var _treeNode$filterReult2 = treeNode.filterReult,
        newFilterWorking = _treeNode$filterReult2.filterWorking,
        newMatchChild = _treeNode$filterReult2.matchChild;
      _this2.setState({
        filterWorking: newFilterWorking,
        matchChild: newMatchChild
      });
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.offExpandedChanged) {
      this.offExpandedChanged();
    }
  };
  _proto.render = function render() {
    var _this$props = this.props,
      treeNode = _this$props.treeNode,
      isModal = _this$props.isModal,
      expanded = _this$props.expanded;
    var _this$state = this.state,
      filterWorking = _this$state.filterWorking,
      matchChild = _this$state.matchChild;
    // 条件过滤生效时，如果命中了子节点，需要将该节点展开
    var expandInFilterResult = filterWorking && matchChild;
    if (!expandInFilterResult && !expanded) {
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-branches"
    }, !isModal && /*#__PURE__*/React.createElement(TreeNodeSlots, {
      treeNode: treeNode
    }), /*#__PURE__*/React.createElement(TreeNodeChildren, {
      treeNode: treeNode,
      isModal: isModal || false,
      treeChildren: this.props.treeChildren
    }));
  };
  return TreeBranches;
}(PureComponent);
export { TreeBranches as default };
var TreeNodeChildren = /*#__PURE__*/function (_PureComponent2) {
  _inheritsLoose(TreeNodeChildren, _PureComponent2);
  function TreeNodeChildren() {
    var _this3;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this3 = _PureComponent2.call.apply(_PureComponent2, [this].concat(args)) || this;
    _this3.state = {
      filterWorking: false,
      matchSelf: false,
      keywords: null,
      dropDetail: null
    };
    _this3.offLocationChanged = void 0;
    return _this3;
  }
  var _proto2 = TreeNodeChildren.prototype;
  _proto2.componentDidMount = function componentDidMount() {
    var _this4 = this,
      _project$currentDocum;
    var treeNode = this.props.treeNode;
    var project = treeNode.pluginContext.project;
    var _treeNode$filterReult3 = treeNode.filterReult,
      filterWorking = _treeNode$filterReult3.filterWorking,
      matchSelf = _treeNode$filterReult3.matchSelf,
      keywords = _treeNode$filterReult3.keywords;
    var dropDetail = treeNode.dropDetail;
    this.setState({
      filterWorking: filterWorking,
      matchSelf: matchSelf,
      keywords: keywords,
      dropDetail: dropDetail
    });
    treeNode.onFilterResultChanged(function () {
      var _treeNode$filterReult4 = treeNode.filterReult,
        newFilterWorking = _treeNode$filterReult4.filterWorking,
        newMatchChild = _treeNode$filterReult4.matchSelf,
        newKeywords = _treeNode$filterReult4.keywords;
      _this4.setState({
        filterWorking: newFilterWorking,
        matchSelf: newMatchChild,
        keywords: newKeywords
      });
    });
    this.offLocationChanged = (_project$currentDocum = project.currentDocument) === null || _project$currentDocum === void 0 ? void 0 : _project$currentDocum.onDropLocationChanged(function () {
      _this4.setState({
        dropDetail: treeNode.dropDetail
      });
    });
  };
  _proto2.componentWillUnmount = function componentWillUnmount() {
    this.offLocationChanged && this.offLocationChanged();
  };
  _proto2.render = function render() {
    var _this$props$treeChild, _this$props$treeChild2;
    var isModal = this.props.isModal;
    var children = [];
    var groupContents = [];
    var currentGrp;
    var _this$state2 = this.state,
      filterWorking = _this$state2.filterWorking,
      matchSelf = _this$state2.matchSelf,
      keywords = _this$state2.keywords;
    var Title = this.props.treeNode.pluginContext.common.editorCabin.Title;
    var endGroup = function endGroup() {
      if (groupContents.length > 0) {
        var _currentGrp$firstNode;
        children.push( /*#__PURE__*/React.createElement("div", {
          key: currentGrp.id,
          className: "condition-group-container",
          "data-id": (_currentGrp$firstNode = currentGrp.firstNode) === null || _currentGrp$firstNode === void 0 ? void 0 : _currentGrp$firstNode.id
        }, /*#__PURE__*/React.createElement("div", {
          className: "condition-group-title"
        }, /*#__PURE__*/React.createElement(Title, {
          title: currentGrp.title,
          match: filterWorking && matchSelf,
          keywords: keywords
        })), groupContents));
        groupContents = [];
      }
    };
    var dropDetail = this.state.dropDetail;
    var dropIndex = dropDetail === null || dropDetail === void 0 ? void 0 : dropDetail.index;
    var insertion = /*#__PURE__*/React.createElement("div", {
      key: "insertion",
      className: classNames('insertion', {
        invalid: (dropDetail === null || dropDetail === void 0 ? void 0 : dropDetail.valid) === false
      })
    });
    (_this$props$treeChild = this.props.treeChildren) === null || _this$props$treeChild === void 0 ? void 0 : _this$props$treeChild.forEach(function (child, index) {
      var _child$node$component;
      var childIsModal = ((_child$node$component = child.node.componentMeta) === null || _child$node$component === void 0 ? void 0 : _child$node$component.isModal) || false;
      if (isModal != childIsModal) {
        return;
      }
      var conditionGroup = child.node.conditionGroup;
      if (conditionGroup !== currentGrp) {
        endGroup();
      }
      if (conditionGroup) {
        currentGrp = conditionGroup;
        if (index === dropIndex) {
          if (groupContents.length > 0) {
            groupContents.push(insertion);
          } else {
            children.push(insertion);
          }
        }
        groupContents.push( /*#__PURE__*/React.createElement(TreeNodeView, {
          key: child.nodeId,
          treeNode: child,
          isModal: isModal
        }));
      } else {
        if (index === dropIndex) {
          children.push(insertion);
        }
        children.push( /*#__PURE__*/React.createElement(TreeNodeView, {
          key: child.nodeId,
          treeNode: child,
          isModal: isModal
        }));
      }
    });
    endGroup();
    var length = ((_this$props$treeChild2 = this.props.treeChildren) === null || _this$props$treeChild2 === void 0 ? void 0 : _this$props$treeChild2.length) || 0;
    if (dropIndex != null && dropIndex >= length) {
      children.push(insertion);
    }
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-children"
    }, children);
  };
  return TreeNodeChildren;
}(PureComponent);
var TreeNodeSlots = /*#__PURE__*/function (_PureComponent3) {
  _inheritsLoose(TreeNodeSlots, _PureComponent3);
  function TreeNodeSlots() {
    return _PureComponent3.apply(this, arguments) || this;
  }
  var _proto3 = TreeNodeSlots.prototype;
  _proto3.render = function render() {
    var _treeNode$dropDetail, _treeNode$dropDetail$;
    var treeNode = this.props.treeNode;
    if (!treeNode.hasSlots()) {
      return null;
    }
    var Title = this.props.treeNode.pluginContext.common.editorCabin.Title;
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('tree-node-slots', {
        'insertion-at-slots': ((_treeNode$dropDetail = treeNode.dropDetail) === null || _treeNode$dropDetail === void 0 ? void 0 : (_treeNode$dropDetail$ = _treeNode$dropDetail.focus) === null || _treeNode$dropDetail$ === void 0 ? void 0 : _treeNode$dropDetail$.type) === 'slots'
      }),
      "data-id": treeNode.nodeId
    }, /*#__PURE__*/React.createElement("div", {
      className: "tree-node-slots-title"
    }, /*#__PURE__*/React.createElement(Title, {
      title: {
        type: 'i18n',
        intl: this.props.treeNode.pluginContext.intlNode('Slots')
      }
    })), treeNode.slots.map(function (tnode) {
      return /*#__PURE__*/React.createElement(TreeNodeView, {
        key: tnode.nodeId,
        treeNode: tnode
      });
    }));
  };
  return TreeNodeSlots;
}(PureComponent);