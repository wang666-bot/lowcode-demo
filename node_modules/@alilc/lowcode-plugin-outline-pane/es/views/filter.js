import _Balloon from "@alifd/next/lib/balloon";
import _Divider from "@alifd/next/lib/divider";
import _Checkbox from "@alifd/next/lib/checkbox";
import _Search from "@alifd/next/lib/search";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import './style.less';
import { IconFilter } from '../icons/filter';
import { matchTreeNode, FILTER_OPTIONS } from './filter-tree';
var Filter = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Filter, _PureComponent);
  function Filter() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      keywords: '',
      filterOps: []
    };
    _this.handleSearchChange = function (val) {
      _this.setState({
        keywords: val.trim()
      }, _this.filterTree);
    };
    _this.handleOptionChange = function (val) {
      _this.setState({
        filterOps: val
      }, _this.filterTree);
    };
    _this.handleCheckAll = function () {
      var filterOps = _this.state.filterOps;
      var _final = filterOps.length === FILTER_OPTIONS.length ? [] : FILTER_OPTIONS.map(function (op) {
        return op.value;
      });
      _this.handleOptionChange(_final);
    };
    return _this;
  }
  var _proto = Filter.prototype;
  _proto.filterTree = function filterTree() {
    var tree = this.props.tree;
    var _this$state = this.state,
      keywords = _this$state.keywords,
      filterOps = _this$state.filterOps;
    matchTreeNode(tree.root, keywords, filterOps);
  };
  _proto.render = function render() {
    var _this2 = this;
    var _this$state2 = this.state,
      keywords = _this$state2.keywords,
      filterOps = _this$state2.filterOps;
    var indeterminate = filterOps.length > 0 && filterOps.length < FILTER_OPTIONS.length;
    var checkAll = filterOps.length === FILTER_OPTIONS.length;
    return /*#__PURE__*/React.createElement("div", {
      className: "lc-outline-filter"
    }, /*#__PURE__*/React.createElement(_Search, {
      hasClear: true,
      shape: "simple",
      placeholder: this.props.tree.pluginContext.intl('Filter Node'),
      className: "lc-outline-filter-search-input",
      value: keywords,
      onChange: this.handleSearchChange
    }), /*#__PURE__*/React.createElement(_Balloon, {
      v2: true,
      align: "br",
      closable: false,
      triggerType: "hover",
      trigger: /*#__PURE__*/React.createElement("div", {
        className: "lc-outline-filter-icon"
      }, /*#__PURE__*/React.createElement(IconFilter, null))
    }, /*#__PURE__*/React.createElement(_Checkbox, {
      checked: checkAll,
      indeterminate: indeterminate,
      onChange: this.handleCheckAll
    }, this.props.tree.pluginContext.intlNode('Check All')), /*#__PURE__*/React.createElement(_Divider, null), /*#__PURE__*/React.createElement(_Checkbox.Group, {
      value: filterOps,
      direction: "ver",
      onChange: this.handleOptionChange
    }, FILTER_OPTIONS.map(function (op) {
      return /*#__PURE__*/React.createElement(_Checkbox, {
        id: op.value,
        value: op.value,
        key: op.value
      }, _this2.props.tree.pluginContext.intlNode(op.label));
    }))));
  };
  return Filter;
}(PureComponent);
export { Filter as default };