import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _extends from "@babel/runtime/helpers/extends";
import { Fragment, PureComponent } from 'react';
import classNames from 'classnames';
import { createIcon } from '@alilc/lowcode-utils';
import { IconLock, IconUnlock, IconArrowRight, IconEyeClose, IconEye, IconCond, IconLoop, IconRadioActive, IconRadio, IconSetting, IconDelete } from '../icons';
function emitOutlineEvent(event, type, treeNode, rest) {
  var _node$componentMeta, _node$componentMeta2;
  var node = treeNode === null || treeNode === void 0 ? void 0 : treeNode.node;
  var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.npm;
  var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
    return !!item;
  }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.componentName) || '';
  event.emit("outlinePane." + type, _extends({
    selected: selected
  }, rest));
}
var TreeTitle = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TreeTitle, _PureComponent);
  function TreeTitle() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      editing: false,
      title: '',
      filterWorking: false,
      keywords: '',
      matchSelf: false
    };
    _this.lastInput = void 0;
    _this.enableEdit = function (e) {
      e.preventDefault();
      _this.setState({
        editing: true
      });
    };
    _this.saveEdit = function (e) {
      var treeNode = _this.props.treeNode;
      var value = e.target.value || '';
      treeNode.setTitleLabel(value);
      emitOutlineEvent(_this.props.treeNode.pluginContext.event, 'rename', treeNode, {
        value: value
      });
      _this.cancelEdit();
    };
    _this.handleKeyUp = function (e) {
      if (e.keyCode === 13) {
        _this.saveEdit(e);
      }
      if (e.keyCode === 27) {
        _this.cancelEdit();
      }
    };
    _this.setCaret = function (input) {
      if (!input || _this.lastInput === input) {
        return;
      }
      input.focus();
      input.select();
      // 光标定位最后一个
      // input.selectionStart = input.selectionEnd;
    };
    _this.deleteClick = function () {
      var treeNode = _this.props.treeNode;
      var node = treeNode.node;
      treeNode.deleteNode(node);
    };
    return _this;
  }
  var _proto = TreeTitle.prototype;
  _proto.cancelEdit = function cancelEdit() {
    this.setState({
      editing: false
    });
    this.lastInput = undefined;
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var treeNode = this.props.treeNode;
    this.setState({
      editing: false,
      title: treeNode.titleLabel,
      condition: treeNode.condition,
      visible: !treeNode.hidden
    });
    treeNode.onTitleLabelChanged(function () {
      _this2.setState({
        title: treeNode.titleLabel
      });
    });
    treeNode.onConditionChanged(function () {
      _this2.setState({
        condition: treeNode.condition
      });
    });
    treeNode.onHiddenChanged(function (hidden) {
      _this2.setState({
        visible: !hidden
      });
    });
    treeNode.onFilterResultChanged(function () {
      var _treeNode$filterReult = treeNode.filterReult,
        newFilterWorking = _treeNode$filterReult.filterWorking,
        newKeywords = _treeNode$filterReult.keywords,
        newMatchSelf = _treeNode$filterReult.matchSelf;
      _this2.setState({
        filterWorking: newFilterWorking,
        keywords: newKeywords,
        matchSelf: newMatchSelf
      });
    });
  };
  _proto.render = function render() {
    var _this3 = this;
    var _this$props = this.props,
      treeNode = _this$props.treeNode,
      isModal = _this$props.isModal;
    var pluginContext = treeNode.pluginContext;
    var _this$state = this.state,
      editing = _this$state.editing,
      filterWorking = _this$state.filterWorking,
      matchSelf = _this$state.matchSelf,
      keywords = _this$state.keywords;
    var isCNode = !treeNode.isRoot();
    var node = treeNode.node;
    var componentMeta = node.componentMeta;
    var availableActions = componentMeta ? componentMeta.availableActions.map(function (availableAction) {
      return availableAction.name;
    }) : [];
    var isNodeParent = node.isParentalNode;
    var isContainer = node.isContainerNode;
    var style;
    if (isCNode) {
      var depth = treeNode.depth;
      var indent = depth * 12;
      style = {
        paddingLeft: indent + (isModal ? 12 : 0),
        marginLeft: -indent
      };
    }
    var Extra = pluginContext.extraTitle;
    var intlNode = pluginContext.intlNode,
      common = pluginContext.common,
      config = pluginContext.config;
    var _common$editorCabin = common.editorCabin,
      Tip = _common$editorCabin.Tip,
      Title = _common$editorCabin.Title;
    var couldHide = availableActions.includes('hide');
    var couldLock = availableActions.includes('lock');
    var couldUnlock = availableActions.includes('unlock');
    var shouldShowHideBtn = isCNode && isNodeParent && !isModal && couldHide;
    var shouldShowLockBtn = config.get('enableCanvasLock', false) && isContainer && isCNode && isNodeParent && (couldLock && !node.isLocked || couldUnlock && node.isLocked);
    var shouldEditBtn = isCNode && isNodeParent;
    var shouldDeleteBtn = isCNode && isNodeParent && (node === null || node === void 0 ? void 0 : node.canPerformAction('remove'));
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('tree-node-title', {
        editing: editing
      }),
      style: style,
      "data-id": treeNode.nodeId,
      onClick: function onClick() {
        if (isModal) {
          if (_this3.state.visible) {
            var _node$document, _node$document$modalN;
            (_node$document = node.document) === null || _node$document === void 0 ? void 0 : (_node$document$modalN = _node$document.modalNodesManager) === null || _node$document$modalN === void 0 ? void 0 : _node$document$modalN.setInvisible(node);
          } else {
            var _node$document2, _node$document2$modal;
            (_node$document2 = node.document) === null || _node$document2 === void 0 ? void 0 : (_node$document2$modal = _node$document2.modalNodesManager) === null || _node$document2$modal === void 0 ? void 0 : _node$document2$modal.setVisible(node);
          }
          return;
        }
        if (node.conditionGroup) {
          node.setConditionalVisible();
        }
      }
    }, isModal && this.state.visible && /*#__PURE__*/React.createElement("div", {
      onClick: function onClick() {
        var _node$document3, _node$document3$modal;
        (_node$document3 = node.document) === null || _node$document3 === void 0 ? void 0 : (_node$document3$modal = _node$document3.modalNodesManager) === null || _node$document3$modal === void 0 ? void 0 : _node$document3$modal.setInvisible(node);
      }
    }, /*#__PURE__*/React.createElement(IconRadioActive, {
      className: "tree-node-modal-radio-active"
    })), isModal && !this.state.visible && /*#__PURE__*/React.createElement("div", {
      onClick: function onClick() {
        var _node$document4, _node$document4$modal;
        (_node$document4 = node.document) === null || _node$document4 === void 0 ? void 0 : (_node$document4$modal = _node$document4.modalNodesManager) === null || _node$document4$modal === void 0 ? void 0 : _node$document4$modal.setVisible(node);
      }
    }, /*#__PURE__*/React.createElement(IconRadio, {
      className: "tree-node-modal-radio"
    })), isCNode && /*#__PURE__*/React.createElement(ExpandBtn, {
      expandable: this.props.expandable,
      expanded: this.props.expanded,
      treeNode: treeNode
    }), /*#__PURE__*/React.createElement("div", {
      className: "tree-node-icon"
    }, createIcon(treeNode.icon)), /*#__PURE__*/React.createElement("div", {
      className: "tree-node-title-label"
    }, editing ? /*#__PURE__*/React.createElement("input", {
      className: "tree-node-title-input",
      defaultValue: this.state.title,
      onBlur: this.saveEdit,
      ref: this.setCaret,
      onKeyUp: this.handleKeyUp
    }) : /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Title, {
      title: this.state.title,
      match: filterWorking && matchSelf,
      keywords: keywords
    }), Extra && /*#__PURE__*/React.createElement(Extra, {
      node: treeNode === null || treeNode === void 0 ? void 0 : treeNode.node
    }), node.slotFor && /*#__PURE__*/React.createElement("a", {
      className: "tree-node-tag slot"
    }, /*#__PURE__*/React.createElement(Tip, null, intlNode('Slot for {prop}', {
      prop: node.slotFor.key
    }))), node.hasLoop() && /*#__PURE__*/React.createElement("a", {
      className: "tree-node-tag loop"
    }, /*#__PURE__*/React.createElement(IconLoop, null), /*#__PURE__*/React.createElement(Tip, null, intlNode('Loop'))), this.state.condition && /*#__PURE__*/React.createElement("a", {
      className: "tree-node-tag cond"
    }, /*#__PURE__*/React.createElement(IconCond, null), /*#__PURE__*/React.createElement(Tip, null, intlNode('Conditional'))))), shouldShowHideBtn && /*#__PURE__*/React.createElement(HideBtn, {
      hidden: this.props.hidden,
      treeNode: treeNode
    }), shouldShowLockBtn && /*#__PURE__*/React.createElement(LockBtn, {
      locked: this.props.locked,
      treeNode: treeNode
    }), shouldEditBtn && /*#__PURE__*/React.createElement(RenameBtn, {
      treeNode: treeNode,
      onClick: this.enableEdit
    }), shouldDeleteBtn && /*#__PURE__*/React.createElement(DeleteBtn, {
      treeNode: treeNode,
      onClick: this.deleteClick
    }));
  };
  return TreeTitle;
}(PureComponent);
export { TreeTitle as default };
var DeleteBtn = /*#__PURE__*/function (_PureComponent2) {
  _inheritsLoose(DeleteBtn, _PureComponent2);
  function DeleteBtn() {
    return _PureComponent2.apply(this, arguments) || this;
  }
  var _proto2 = DeleteBtn.prototype;
  _proto2.render = function render() {
    var _this$props$treeNode$ = this.props.treeNode.pluginContext,
      intl = _this$props$treeNode$.intl,
      common = _this$props$treeNode$.common;
    var Tip = common.editorCabin.Tip;
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-delete-btn",
      onClick: this.props.onClick
    }, /*#__PURE__*/React.createElement(IconDelete, null), /*#__PURE__*/React.createElement(Tip, null, intl('Delete')));
  };
  return DeleteBtn;
}(PureComponent);
var RenameBtn = /*#__PURE__*/function (_PureComponent3) {
  _inheritsLoose(RenameBtn, _PureComponent3);
  function RenameBtn() {
    return _PureComponent3.apply(this, arguments) || this;
  }
  var _proto3 = RenameBtn.prototype;
  _proto3.render = function render() {
    var _this$props$treeNode$2 = this.props.treeNode.pluginContext,
      intl = _this$props$treeNode$2.intl,
      common = _this$props$treeNode$2.common;
    var Tip = common.editorCabin.Tip;
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-rename-btn",
      onClick: this.props.onClick
    }, /*#__PURE__*/React.createElement(IconSetting, null), /*#__PURE__*/React.createElement(Tip, null, intl('Rename')));
  };
  return RenameBtn;
}(PureComponent);
var LockBtn = /*#__PURE__*/function (_PureComponent4) {
  _inheritsLoose(LockBtn, _PureComponent4);
  function LockBtn() {
    return _PureComponent4.apply(this, arguments) || this;
  }
  var _proto4 = LockBtn.prototype;
  _proto4.render = function render() {
    var _this$props2 = this.props,
      treeNode = _this$props2.treeNode,
      locked = _this$props2.locked;
    var _this$props$treeNode$3 = this.props.treeNode.pluginContext,
      intl = _this$props$treeNode$3.intl,
      common = _this$props$treeNode$3.common;
    var Tip = common.editorCabin.Tip;
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-lock-btn",
      onClick: function onClick(e) {
        e.stopPropagation();
        treeNode.setLocked(!locked);
      }
    }, locked ? /*#__PURE__*/React.createElement(IconUnlock, null) : /*#__PURE__*/React.createElement(IconLock, null), /*#__PURE__*/React.createElement(Tip, null, locked ? intl('Unlock') : intl('Lock')));
  };
  return LockBtn;
}(PureComponent);
var HideBtn = /*#__PURE__*/function (_PureComponent5) {
  _inheritsLoose(HideBtn, _PureComponent5);
  function HideBtn() {
    return _PureComponent5.apply(this, arguments) || this;
  }
  var _proto5 = HideBtn.prototype;
  _proto5.render = function render() {
    var _this$props3 = this.props,
      treeNode = _this$props3.treeNode,
      hidden = _this$props3.hidden;
    var _treeNode$pluginConte = treeNode.pluginContext,
      intl = _treeNode$pluginConte.intl,
      common = _treeNode$pluginConte.common;
    var Tip = common.editorCabin.Tip;
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-hide-btn",
      onClick: function onClick(e) {
        e.stopPropagation();
        emitOutlineEvent(treeNode.pluginContext.event, hidden ? 'show' : 'hide', treeNode);
        treeNode.setHidden(!hidden);
      }
    }, hidden ? /*#__PURE__*/React.createElement(IconEye, null) : /*#__PURE__*/React.createElement(IconEyeClose, null), /*#__PURE__*/React.createElement(Tip, null, hidden ? intl('Show') : intl('Hide')));
  };
  return HideBtn;
}(PureComponent);
var ExpandBtn = /*#__PURE__*/function (_PureComponent6) {
  _inheritsLoose(ExpandBtn, _PureComponent6);
  function ExpandBtn() {
    return _PureComponent6.apply(this, arguments) || this;
  }
  var _proto6 = ExpandBtn.prototype;
  _proto6.render = function render() {
    var _this$props4 = this.props,
      treeNode = _this$props4.treeNode,
      expanded = _this$props4.expanded,
      expandable = _this$props4.expandable;
    if (!expandable) {
      return /*#__PURE__*/React.createElement("i", {
        className: "tree-node-expand-placeholder"
      });
    }
    return /*#__PURE__*/React.createElement("div", {
      className: "tree-node-expand-btn",
      onClick: function onClick(e) {
        if (expanded) {
          e.stopPropagation();
        }
        emitOutlineEvent(treeNode.pluginContext.event, expanded ? 'collapse' : 'expand', treeNode);
        treeNode.setExpanded(!expanded);
      }
    }, /*#__PURE__*/React.createElement(IconArrowRight, {
      size: "small"
    }));
  };
  return ExpandBtn;
}(PureComponent);