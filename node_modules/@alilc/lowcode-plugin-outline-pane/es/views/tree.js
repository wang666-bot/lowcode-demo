import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { PureComponent } from 'react';
import { isFormEvent, canClickNode, isShaken } from '@alilc/lowcode-utils';
import TreeNodeView from './tree-node';
import { IPublicEnumDragObjectType } from '@alilc/lowcode-types';
function getTreeNodeIdByEvent(e, stop) {
  var target = e.target;
  if (!target || !stop.contains(target)) {
    return null;
  }
  target = target.closest('[data-id]');
  if (!target || !stop.contains(target)) {
    return null;
  }
  return target.dataset.id || null;
}
var TreeView = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TreeView, _PureComponent);
  function TreeView() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.shell = null;
    _this.ignoreUpSelected = false;
    _this.boostEvent = void 0;
    _this.state = {
      root: null
    };
    _this.onClick = function (e) {
      var _canvas$activeTracker;
      if (_this.ignoreUpSelected) {
        _this.boostEvent = undefined;
        return;
      }
      if (_this.boostEvent && isShaken(_this.boostEvent, e.nativeEvent)) {
        _this.boostEvent = undefined;
        return;
      }
      _this.boostEvent = undefined;
      var treeNode = _this.getTreeNodeFromEvent(e);
      if (!treeNode) {
        return;
      }
      var node = treeNode.node;
      if (!canClickNode(node, e)) {
        return;
      }
      var _this$props$tree$plug = _this.props.tree.pluginContext,
        project = _this$props$tree$plug.project,
        event = _this$props$tree$plug.event,
        canvas = _this$props$tree$plug.canvas;
      var doc = project.currentDocument;
      var selection = doc === null || doc === void 0 ? void 0 : doc.selection;
      var focusNode = doc === null || doc === void 0 ? void 0 : doc.focusNode;
      var id = node.id;
      var isMulti = e.metaKey || e.ctrlKey || e.shiftKey;
      (_canvas$activeTracker = canvas.activeTracker) === null || _canvas$activeTracker === void 0 ? void 0 : _canvas$activeTracker.track(node);
      if (isMulti && focusNode && !node.contains(focusNode) && selection !== null && selection !== void 0 && selection.has(id)) {
        if (!isFormEvent(e.nativeEvent)) {
          selection.remove(id);
        }
      } else {
        var _selection$getNodes, _selectedNode$compone, _selectedNode$compone2;
        selection === null || selection === void 0 ? void 0 : selection.select(id);
        var selectedNode = selection === null || selection === void 0 ? void 0 : (_selection$getNodes = selection.getNodes()) === null || _selection$getNodes === void 0 ? void 0 : _selection$getNodes[0];
        var npm = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$compone = selectedNode.componentMeta) === null || _selectedNode$compone === void 0 ? void 0 : _selectedNode$compone.npm;
        var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
          return !!item;
        }).join('-') || (selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$compone2 = selectedNode.componentMeta) === null || _selectedNode$compone2 === void 0 ? void 0 : _selectedNode$compone2.componentName) || '';
        event.emit('outlinePane.select', {
          selected: selected
        });
      }
    };
    _this.onDoubleClick = function (e) {
      var _this$state$root;
      e.preventDefault();
      var treeNode = _this.getTreeNodeFromEvent(e);
      if ((treeNode === null || treeNode === void 0 ? void 0 : treeNode.nodeId) === ((_this$state$root = _this.state.root) === null || _this$state$root === void 0 ? void 0 : _this$state$root.nodeId)) {
        return;
      }
      if (!(treeNode !== null && treeNode !== void 0 && treeNode.expanded)) {
        _this.props.tree.expandAllDecendants(treeNode);
      } else {
        _this.props.tree.collapseAllDecendants(treeNode);
      }
    };
    _this.onMouseOver = function (e) {
      _this.hover(e);
    };
    _this.onMouseDown = function (e) {
      var _project$currentDocum, _project$currentDocum2;
      if (isFormEvent(e.nativeEvent)) {
        return;
      }
      var treeNode = _this.getTreeNodeFromEvent(e);
      if (!treeNode) {
        return;
      }
      var node = treeNode.node;
      if (!canClickNode(node, e)) {
        return;
      }
      var _this$props$tree$plug2 = _this.props.tree.pluginContext,
        project = _this$props$tree$plug2.project,
        canvas = _this$props$tree$plug2.canvas;
      var selection = (_project$currentDocum = project.currentDocument) === null || _project$currentDocum === void 0 ? void 0 : _project$currentDocum.selection;
      var focusNode = (_project$currentDocum2 = project.currentDocument) === null || _project$currentDocum2 === void 0 ? void 0 : _project$currentDocum2.focusNode;

      // TODO: shift selection
      var isMulti = e.metaKey || e.ctrlKey || e.shiftKey;
      var isLeftButton = e.button === 0;
      if (isLeftButton && focusNode && !node.contains(focusNode)) {
        var _canvas$dragon;
        var nodes = [node];
        _this.ignoreUpSelected = false;
        if (isMulti) {
          // multi select mode, directily add
          if (!(selection !== null && selection !== void 0 && selection.has(node.id))) {
            var _canvas$activeTracker2;
            (_canvas$activeTracker2 = canvas.activeTracker) === null || _canvas$activeTracker2 === void 0 ? void 0 : _canvas$activeTracker2.track(node);
            selection === null || selection === void 0 ? void 0 : selection.add(node.id);
            _this.ignoreUpSelected = true;
          }
          // todo: remove rootNodes id
          selection === null || selection === void 0 ? void 0 : selection.remove(focusNode.id);
          // 获得顶层 nodes
          if (selection) {
            nodes = selection.getTopNodes();
          }
        } else if (selection !== null && selection !== void 0 && selection.has(node.id)) {
          nodes = selection.getTopNodes();
        }
        _this.boostEvent = e.nativeEvent;
        (_canvas$dragon = canvas.dragon) === null || _canvas$dragon === void 0 ? void 0 : _canvas$dragon.boost({
          type: IPublicEnumDragObjectType.Node,
          nodes: nodes
        }, _this.boostEvent);
      }
    };
    _this.onMouseLeave = function () {
      var pluginContext = _this.props.tree.pluginContext;
      var project = pluginContext.project;
      var doc = project.currentDocument;
      doc === null || doc === void 0 ? void 0 : doc.detecting.leave();
    };
    return _this;
  }
  var _proto = TreeView.prototype;
  _proto.hover = function hover(e) {
    var _project$currentDocum3, _this$getTreeNodeFrom;
    var project = this.props.tree.pluginContext.project;
    var detecting = (_project$currentDocum3 = project.currentDocument) === null || _project$currentDocum3 === void 0 ? void 0 : _project$currentDocum3.detecting;
    if (detecting !== null && detecting !== void 0 && detecting.enable) {
      return;
    }
    var node = (_this$getTreeNodeFrom = this.getTreeNodeFromEvent(e)) === null || _this$getTreeNodeFrom === void 0 ? void 0 : _this$getTreeNodeFrom.node;
    (node === null || node === void 0 ? void 0 : node.id) && (detecting === null || detecting === void 0 ? void 0 : detecting.capture(node.id));
  };
  _proto.getTreeNodeFromEvent = function getTreeNodeFromEvent(e) {
    if (!this.shell) {
      return;
    }
    var id = getTreeNodeIdByEvent(e, this.shell);
    if (!id) {
      return;
    }
    var tree = this.props.tree;
    return tree.getTreeNodeById(id);
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var tree = this.props.tree;
    var root = tree.root;
    var project = tree.pluginContext.project;
    this.setState({
      root: root
    });
    var doc = project.currentDocument;
    doc === null || doc === void 0 ? void 0 : doc.onFocusNodeChanged(function () {
      _this2.setState({
        root: tree.root
      });
    });
    doc === null || doc === void 0 ? void 0 : doc.onImportSchema(function () {
      _this2.setState({
        root: tree.root
      });
    });
  };
  _proto.render = function render() {
    var _this3 = this,
      _this$state$root2;
    if (!this.state.root) {
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      className: "lc-outline-tree",
      ref: function ref(shell) {
        _this3.shell = shell;
      },
      onMouseDownCapture: this.onMouseDown,
      onMouseOver: this.onMouseOver,
      onClick: this.onClick,
      onDoubleClick: this.onDoubleClick,
      onMouseLeave: this.onMouseLeave
    }, /*#__PURE__*/React.createElement(TreeNodeView, {
      key: (_this$state$root2 = this.state.root) === null || _this$state$root2 === void 0 ? void 0 : _this$state$root2.id,
      treeNode: this.state.root,
      isRootNode: true
    }));
  };
  return TreeView;
}(PureComponent);
export { TreeView as default };