import { IDesigner, ILowCodePluginManager, LowCodePluginManager } from '@alilc/lowcode-designer';
import { Editor, IEditor } from '@alilc/lowcode-editor-core';
import { IPublicApiPlugins, IPublicApiWorkspace, IPublicResourceList, IPublicTypeDisposable, IPublicTypeResourceType, IShellModelFactory } from '@alilc/lowcode-types';
import { BasicContext } from './context/base-context';
import type { IEditorWindow } from './window';
import { IResource } from './resource';
import { IResourceType, ResourceType } from './resource-type';
import { ISkeleton } from '@alilc/lowcode-editor-skeleton';
export interface IWorkspace extends Omit<IPublicApiWorkspace<LowCodePluginManager, IEditorWindow>, 'resourceList' | 'plugins' | 'openEditorWindow' | 'removeEditorWindow'> {
    readonly registryInnerPlugin: (designer: IDesigner, editor: Editor, plugins: IPublicApiPlugins) => Promise<IPublicTypeDisposable>;
    readonly shellModelFactory: IShellModelFactory;
    enableAutoOpenFirstWindow: boolean;
    window: IEditorWindow;
    plugins: ILowCodePluginManager;
    skeleton: ISkeleton;
    resourceTypeMap: Map<string, ResourceType>;
    getResourceList(): IResource[];
    getResourceType(resourceName: string): IResourceType;
    checkWindowQueue(): void;
    emitWindowRendererReady(): void;
    initWindow(): void;
    setActive(active: boolean): void;
    onChangeActiveEditorView(fn: () => void): IPublicTypeDisposable;
    emitChangeActiveEditorView(): void;
    openEditorWindowByResource(resource: IResource, sleep: boolean): Promise<void>;
    /**
     * @deprecated
     */
    removeEditorWindow(resourceName: string, id: string): void;
    removeEditorWindowByResource(resource: IResource): void;
    /**
     * @deprecated
     */
    openEditorWindow(name: string, title: string, options: Object, viewName?: string, sleep?: boolean): Promise<void>;
}
export declare class Workspace implements IWorkspace {
    readonly registryInnerPlugin: (designer: IDesigner, editor: IEditor, plugins: IPublicApiPlugins) => Promise<IPublicTypeDisposable>;
    readonly shellModelFactory: any;
    context: BasicContext;
    enableAutoOpenFirstWindow: boolean;
    resourceTypeMap: Map<string, ResourceType>;
    private emitter;
    private _isActive;
    private resourceList;
    get skeleton(): ISkeleton;
    get plugins(): ILowCodePluginManager;
    get isActive(): boolean;
    get defaultResourceType(): ResourceType | null;
    windows: IEditorWindow[];
    editorWindowMap: Map<string, IEditorWindow>;
    window: IEditorWindow;
    windowQueue: ({
        name: string;
        title: string;
        options: Object;
        viewName?: string;
    } | IResource)[];
    constructor(registryInnerPlugin: (designer: IDesigner, editor: IEditor, plugins: IPublicApiPlugins) => Promise<IPublicTypeDisposable>, shellModelFactory: any);
    checkWindowQueue(): void;
    initWindow(): Promise<void>;
    setActive(value: boolean): void;
    registerResourceType(resourceTypeModel: IPublicTypeResourceType): Promise<void>;
    getResourceList(): IResource[];
    setResourceList(resourceList: IPublicResourceList): void;
    onResourceListChange(fn: (resourceList: IPublicResourceList) => void): () => void;
    onWindowRendererReady(fn: () => void): IPublicTypeDisposable;
    emitWindowRendererReady(): void;
    getResourceType(resourceName: string): IResourceType;
    removeResourceType(resourceName: string): void;
    removeEditorWindowById(id: string): void;
    private remove;
    removeEditorWindow(resourceName: string, id: string): void;
    removeEditorWindowByResource(resource: IResource): void;
    openEditorWindowById(id: string): Promise<void>;
    openEditorWindowByResource(resource: IResource, sleep?: boolean): Promise<void>;
    openEditorWindow(name: string, title: string, options: Object, viewName?: string, sleep?: boolean): Promise<void>;
    onChangeWindows(fn: () => void): () => void;
    onChangeActiveEditorView(fn: () => void): () => void;
    emitChangeActiveEditorView(): void;
    emitChangeWindow(): void;
    emitChangeActiveWindow(): void;
    onChangeActiveWindow(fn: () => void): () => void;
}
