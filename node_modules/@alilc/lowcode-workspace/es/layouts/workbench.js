import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
var _class;
import { Component } from 'react';
import { TipContainer, engineConfig, observer } from '@alilc/lowcode-editor-core';
import { WindowView } from '../view/window-view';
import classNames from 'classnames';
import { SkeletonContext } from '../skeleton-context';
import { BottomArea, LeftArea, LeftFixedPane, LeftFloatPane, MainArea, SubTopArea, TopArea } from '@alilc/lowcode-editor-skeleton';
export var Workbench = observer(_class = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Workbench, _Component);
  function Workbench(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    var _this$props = _this.props,
      config = _this$props.config,
      components = _this$props.components,
      workspace = _this$props.workspace;
    var skeleton = workspace.skeleton;
    skeleton.buildFromConfig(config, components);
    engineConfig.onGot('theme', function (theme) {
      _this.setState({
        theme: theme
      });
    });
    engineConfig.onGot('workspaceEmptyComponent', function (workspaceEmptyComponent) {
      _this.setState({
        workspaceEmptyComponent: workspaceEmptyComponent
      });
    });
    _this.state = {
      workspaceEmptyComponent: engineConfig.get('workspaceEmptyComponent'),
      theme: engineConfig.get('theme')
    };
    return _this;
  }
  var _proto = Workbench.prototype;
  _proto.render = function render() {
    var _this$props2 = this.props,
      workspace = _this$props2.workspace,
      className = _this$props2.className,
      topAreaItemClassName = _this$props2.topAreaItemClassName;
    var skeleton = workspace.skeleton;
    var _this$state = this.state,
      WorkspaceEmptyComponent = _this$state.workspaceEmptyComponent,
      theme = _this$state.theme;
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('lc-workspace-workbench', className, theme)
    }, /*#__PURE__*/React.createElement(SkeletonContext.Provider, {
      value: skeleton
    }, /*#__PURE__*/React.createElement(TopArea, {
      className: "lc-workspace-top-area",
      area: skeleton.topArea,
      itemClassName: topAreaItemClassName
    }), /*#__PURE__*/React.createElement("div", {
      className: "lc-workspace-workbench-body"
    }, /*#__PURE__*/React.createElement(LeftArea, {
      className: "lc-workspace-left-area lc-left-area",
      area: skeleton.leftArea
    }), /*#__PURE__*/React.createElement(LeftFloatPane, {
      area: skeleton.leftFloatArea
    }), /*#__PURE__*/React.createElement(LeftFixedPane, {
      area: skeleton.leftFixedArea
    }), /*#__PURE__*/React.createElement("div", {
      className: "lc-workspace-workbench-center"
    }, /*#__PURE__*/React.createElement("div", {
      className: "lc-workspace-workbench-center-content"
    }, /*#__PURE__*/React.createElement(SubTopArea, {
      area: skeleton.subTopArea,
      itemClassName: topAreaItemClassName
    }), /*#__PURE__*/React.createElement("div", {
      className: "lc-workspace-workbench-window"
    }, workspace.windows.map(function (d) {
      var _workspace$window;
      return /*#__PURE__*/React.createElement(WindowView, {
        active: d.id === ((_workspace$window = workspace.window) === null || _workspace$window === void 0 ? void 0 : _workspace$window.id),
        window: d,
        key: d.id
      });
    }), !workspace.windows.length && WorkspaceEmptyComponent ? /*#__PURE__*/React.createElement(WorkspaceEmptyComponent, null) : null)), /*#__PURE__*/React.createElement(MainArea, {
      area: skeleton.mainArea
    }), /*#__PURE__*/React.createElement(BottomArea, {
      area: skeleton.bottomArea
    }))), /*#__PURE__*/React.createElement(TipContainer, null)));
  };
  return Workbench;
}(Component)) || _class;