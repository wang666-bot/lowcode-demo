import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { Editor, engineConfig, Setters as InnerSetters, Hotkey as InnerHotkey, commonEvent, Command as InnerCommand } from '@alilc/lowcode-editor-core';
import { Designer, LowCodePluginManager } from '@alilc/lowcode-designer';
import { Skeleton as InnerSkeleton } from '@alilc/lowcode-editor-skeleton';
import { Hotkey, Plugins, Project, Skeleton, Setters, Material, Event, Common, Logger, Workspace, Window, Canvas, CommonUI, Command } from '@alilc/lowcode-shell';
import { IPublicEnumPluginRegisterLevel } from '@alilc/lowcode-types';
import { getLogger } from '@alilc/lowcode-utils';
export var BasicContext = function BasicContext(innerWorkspace, viewName, registerLevel, editorWindow) {
  this.registerLevel = registerLevel;
  this.editorWindow = editorWindow;
  this.skeleton = void 0;
  this.plugins = void 0;
  this.project = void 0;
  this.setters = void 0;
  this.material = void 0;
  this.common = void 0;
  this.config = void 0;
  this.event = void 0;
  this.logger = void 0;
  this.hotkey = void 0;
  this.innerProject = void 0;
  this.editor = void 0;
  this.designer = void 0;
  this.registerInnerPlugins = void 0;
  this.innerSetters = void 0;
  this.innerSkeleton = void 0;
  this.innerHotkey = void 0;
  this.innerPlugins = void 0;
  this.canvas = void 0;
  this.pluginEvent = void 0;
  this.preference = void 0;
  this.workspace = void 0;
  var editor = new Editor(viewName, true);
  var innerSkeleton = new InnerSkeleton(editor, viewName);
  editor.set('skeleton', innerSkeleton);
  var designer = new Designer({
    editor: editor,
    viewName: viewName,
    shellModelFactory: innerWorkspace === null || innerWorkspace === void 0 ? void 0 : innerWorkspace.shellModelFactory
  });
  editor.set('designer', designer);
  var innerProject = designer.project;
  var workspace = new Workspace(innerWorkspace);
  var innerHotkey = new InnerHotkey(viewName);
  var hotkey = new Hotkey(innerHotkey, true);
  var innerSetters = new InnerSetters(viewName);
  var setters = new Setters(innerSetters, true);
  var material = new Material(editor, true);
  var project = new Project(innerProject, true);
  var config = engineConfig;
  var event = new Event(commonEvent, {
    prefix: 'common'
  });
  var logger = getLogger({
    level: 'warn',
    bizName: 'common'
  });
  var skeleton = new Skeleton(innerSkeleton, 'any', true);
  var canvas = new Canvas(editor, true);
  var commonUI = new CommonUI(editor);
  var innerCommand = new InnerCommand();
  editor.set('setters', setters);
  editor.set('project', project);
  editor.set('material', material);
  editor.set('hotkey', hotkey);
  editor.set('innerHotkey', innerHotkey);
  this.innerSetters = innerSetters;
  this.innerSkeleton = innerSkeleton;
  this.skeleton = skeleton;
  this.innerProject = innerProject;
  this.project = project;
  this.setters = setters;
  this.material = material;
  this.config = config;
  this.event = event;
  this.logger = logger;
  this.hotkey = hotkey;
  this.innerHotkey = innerHotkey;
  this.editor = editor;
  this.designer = designer;
  this.canvas = canvas;
  var common = new Common(editor, innerSkeleton);
  this.common = common;
  var plugins;
  var pluginContextApiAssembler = {
    assembleApis: function assembleApis(context, pluginName, meta) {
      context.workspace = workspace;
      context.hotkey = hotkey;
      context.project = project;
      context.skeleton = new Skeleton(innerSkeleton, pluginName, true);
      context.setters = setters;
      context.material = material;
      var eventPrefix = (meta === null || meta === void 0 ? void 0 : meta.eventPrefix) || 'common';
      var commandScope = meta === null || meta === void 0 ? void 0 : meta.commandScope;
      context.event = new Event(commonEvent, {
        prefix: eventPrefix
      });
      context.config = config;
      context.common = common;
      context.plugins = plugins;
      context.logger = new Logger({
        level: 'warn',
        bizName: "plugin:" + pluginName
      });
      context.canvas = canvas;
      context.commonUI = commonUI;
      if (editorWindow) {
        context.editorWindow = new Window(editorWindow);
      }
      context.command = new Command(innerCommand, context, {
        commandScope: commandScope
      });
      context.registerLevel = registerLevel;
      context.isPluginRegisteredInWorkspace = registerLevel === IPublicEnumPluginRegisterLevel.Workspace;
      editor.set('pluginContext', context);
    }
  };
  var innerPlugins = new LowCodePluginManager(pluginContextApiAssembler, viewName);
  this.innerPlugins = innerPlugins;
  plugins = new Plugins(innerPlugins, true).toProxy();
  editor.set('plugins', plugins);
  editor.set('innerPlugins', innerPlugins);
  this.plugins = plugins;

  // 注册一批内置插件
  this.registerInnerPlugins = /*#__PURE__*/function () {
    var _registerPlugins = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return innerWorkspace === null || innerWorkspace === void 0 ? void 0 : innerWorkspace.registryInnerPlugin(designer, editor, plugins);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function registerPlugins() {
      return _registerPlugins.apply(this, arguments);
    }
    return registerPlugins;
  }();
};