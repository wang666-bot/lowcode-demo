import { IPublicEditorViewConfig, IPublicTypeEditorView } from '@alilc/lowcode-types';
import { IWorkspace } from '../workspace';
import { BasicContext, IBasicContext } from './base-context';
import { IEditorWindow } from '../window';
export interface IViewContext extends IBasicContext {
    editorWindow: IEditorWindow;
    viewName: string;
    viewType: 'editor' | 'webview';
}
export declare class Context extends BasicContext implements IViewContext {
    workspace: IWorkspace;
    editorWindow: IEditorWindow;
    editorView: IPublicTypeEditorView;
    viewName: string;
    instance: IPublicEditorViewConfig;
    viewType: 'editor' | 'webview';
    _activate: boolean;
    isInit: boolean;
    init: () => import("mobx/dist/internal").CancellablePromise<void>;
    constructor(workspace: IWorkspace, editorWindow: IEditorWindow, editorView: IPublicTypeEditorView, options: Object | undefined);
    get active(): boolean;
    onSimulatorRendererReady: () => Promise<void>;
    setActivate: (_activate: boolean) => void;
    save(): Promise<void>;
}
