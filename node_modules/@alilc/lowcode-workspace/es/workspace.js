import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _dec2, _class, _descriptor, _descriptor2;
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createModuleEventBus, makeObservable, obx } from '@alilc/lowcode-editor-core';
import { IPublicEnumPluginRegisterLevel } from '@alilc/lowcode-types';
import { BasicContext } from './context/base-context';
import { EditorWindow, WINDOW_STATE } from './window';
import { Resource } from './resource';
import { ResourceType } from './resource-type';
var EVENT = /*#__PURE__*/function (EVENT) {
  EVENT["CHANGE_WINDOW"] = "change_window";
  EVENT["CHANGE_ACTIVE_WINDOW"] = "change_active_window";
  EVENT["WINDOW_RENDER_READY"] = "window_render_ready";
  EVENT["CHANGE_ACTIVE_EDITOR_VIEW"] = "change_active_editor_view";
  return EVENT;
}(EVENT || {});
var CHANGE_EVENT = 'resource.list.change';
export var Workspace = (_dec = obx.ref, _dec2 = obx.ref, (_class = /*#__PURE__*/function () {
  function Workspace(registryInnerPlugin, shellModelFactory) {
    this.registryInnerPlugin = registryInnerPlugin;
    this.shellModelFactory = shellModelFactory;
    this.context = void 0;
    this.enableAutoOpenFirstWindow = void 0;
    this.resourceTypeMap = new Map();
    this.emitter = createModuleEventBus('workspace');
    this._isActive = false;
    this.resourceList = [];
    _initializerDefineProperty(this, "windows", _descriptor, this);
    this.editorWindowMap = new Map();
    _initializerDefineProperty(this, "window", _descriptor2, this);
    this.windowQueue = [];
    this.context = new BasicContext(this, '', IPublicEnumPluginRegisterLevel.Workspace);
    this.context.innerHotkey.activate(true);
    makeObservable(this);
  }
  var _proto = Workspace.prototype;
  _proto.checkWindowQueue = function checkWindowQueue() {
    if (!this.windowQueue || !this.windowQueue.length) {
      return;
    }
    var windowInfo = this.windowQueue.shift();
    if (windowInfo instanceof Resource) {
      this.openEditorWindowByResource(windowInfo);
    } else if (windowInfo) {
      this.openEditorWindow(windowInfo.name, windowInfo.title, windowInfo.options, windowInfo.viewName);
    }
  };
  _proto.initWindow = /*#__PURE__*/function () {
    var _initWindow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var resourceName, resource;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(!this.defaultResourceType || this.enableAutoOpenFirstWindow === false)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            resourceName = this.defaultResourceType.name;
            resource = new Resource({
              resourceName: resourceName,
              options: {}
            }, this.defaultResourceType, this);
            this.window = new EditorWindow(resource, this, {
              title: resource.title
            });
            _context.next = 7;
            return this.window.init();
          case 7:
            this.editorWindowMap.set(this.window.id, this.window);
            this.windows = [].concat(this.windows, [this.window]);
            this.emitChangeWindow();
            this.emitChangeActiveWindow();
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function initWindow() {
      return _initWindow.apply(this, arguments);
    }
    return initWindow;
  }();
  _proto.setActive = function setActive(value) {
    this._isActive = value;
  };
  _proto.registerResourceType = /*#__PURE__*/function () {
    var _registerResourceType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resourceTypeModel) {
      var resourceType;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            resourceType = new ResourceType(resourceTypeModel);
            this.resourceTypeMap.set(resourceTypeModel.resourceName, resourceType);
            if (!this.window && this.defaultResourceType && this._isActive) {
              this.initWindow();
            }
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function registerResourceType(_x) {
      return _registerResourceType.apply(this, arguments);
    }
    return registerResourceType;
  }();
  _proto.getResourceList = function getResourceList() {
    return this.resourceList;
  };
  _proto.setResourceList = function setResourceList(resourceList) {
    var _this = this;
    this.resourceList = resourceList.map(function (d) {
      return new Resource(d, _this.getResourceType(d.resourceName), _this);
    });
    this.emitter.emit(CHANGE_EVENT, resourceList);
  };
  _proto.onResourceListChange = function onResourceListChange(fn) {
    var _this2 = this;
    this.emitter.on(CHANGE_EVENT, fn);
    return function () {
      _this2.emitter.off(CHANGE_EVENT, fn);
    };
  };
  _proto.onWindowRendererReady = function onWindowRendererReady(fn) {
    var _this3 = this;
    this.emitter.on(EVENT.WINDOW_RENDER_READY, fn);
    return function () {
      _this3.emitter.off(EVENT.WINDOW_RENDER_READY, fn);
    };
  };
  _proto.emitWindowRendererReady = function emitWindowRendererReady() {
    this.emitter.emit(EVENT.WINDOW_RENDER_READY);
  };
  _proto.getResourceType = function getResourceType(resourceName) {
    return this.resourceTypeMap.get(resourceName);
  };
  _proto.removeResourceType = function removeResourceType(resourceName) {
    if (this.resourceTypeMap.has(resourceName)) {
      this.resourceTypeMap["delete"](resourceName);
    }
  };
  _proto.removeEditorWindowById = function removeEditorWindowById(id) {
    var index = this.windows.findIndex(function (d) {
      return d.id === id;
    });
    this.remove(index);
  };
  _proto.remove = /*#__PURE__*/function () {
    var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
      var _this$window, _this$window3;
      var window, _this$window2;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(index < 0)) {
              _context3.next = 2;
              break;
            }
            return _context3.abrupt("return");
          case 2:
            window = this.windows[index];
            this.windows.splice(index, 1);
            (_this$window = this.window) === null || _this$window === void 0 ? void 0 : _this$window.updateState(WINDOW_STATE.destroyed);
            if (!(this.window === window)) {
              _context3.next = 11;
              break;
            }
            this.window = this.windows[index] || this.windows[index + 1] || this.windows[index - 1];
            if (!((_this$window2 = this.window) !== null && _this$window2 !== void 0 && _this$window2.sleep)) {
              _context3.next = 10;
              break;
            }
            _context3.next = 10;
            return this.window.init();
          case 10:
            this.emitChangeActiveWindow();
          case 11:
            this.emitChangeWindow();
            (_this$window3 = this.window) === null || _this$window3 === void 0 ? void 0 : _this$window3.updateState(WINDOW_STATE.active);
          case 13:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function remove(_x2) {
      return _remove.apply(this, arguments);
    }
    return remove;
  }();
  _proto.removeEditorWindow = function removeEditorWindow(resourceName, id) {
    var index = this.windows.findIndex(function (d) {
      var _d$resource;
      return ((_d$resource = d.resource) === null || _d$resource === void 0 ? void 0 : _d$resource.name) === resourceName && (d.title === id || d.resource.id === id);
    });
    this.remove(index);
  };
  _proto.removeEditorWindowByResource = function removeEditorWindowByResource(resource) {
    var index = this.windows.findIndex(function (d) {
      var _d$resource2;
      return ((_d$resource2 = d.resource) === null || _d$resource2 === void 0 ? void 0 : _d$resource2.id) === resource.id;
    });
    this.remove(index);
  };
  _proto.openEditorWindowById = /*#__PURE__*/function () {
    var _openEditorWindowById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {
      var _this$window4, _this$window5;
      var window;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            window = this.editorWindowMap.get(id);
            (_this$window4 = this.window) === null || _this$window4 === void 0 ? void 0 : _this$window4.updateState(WINDOW_STATE.inactive);
            if (!window) {
              _context4.next = 8;
              break;
            }
            this.window = window;
            if (!window.sleep) {
              _context4.next = 7;
              break;
            }
            _context4.next = 7;
            return window.init();
          case 7:
            this.emitChangeActiveWindow();
          case 8:
            (_this$window5 = this.window) === null || _this$window5 === void 0 ? void 0 : _this$window5.updateState(WINDOW_STATE.active);
          case 9:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    function openEditorWindowById(_x3) {
      return _openEditorWindowById.apply(this, arguments);
    }
    return openEditorWindowById;
  }();
  _proto.openEditorWindowByResource = /*#__PURE__*/function () {
    var _openEditorWindowByResource = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(resource, sleep) {
      var _this$window6, _this$window7, _this$window9;
      var filterWindows, _this$window8, window;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (sleep === void 0) {
              sleep = false;
            }
            if (!(this.window && !this.window.sleep && !((_this$window6 = this.window) !== null && _this$window6 !== void 0 && _this$window6.initReady) && !sleep)) {
              _context5.next = 4;
              break;
            }
            this.windowQueue.push(resource);
            return _context5.abrupt("return");
          case 4:
            (_this$window7 = this.window) === null || _this$window7 === void 0 ? void 0 : _this$window7.updateState(WINDOW_STATE.inactive);
            filterWindows = this.windows.filter(function (d) {
              var _d$resource3;
              return ((_d$resource3 = d.resource) === null || _d$resource3 === void 0 ? void 0 : _d$resource3.id) === resource.id;
            });
            if (!(filterWindows && filterWindows.length)) {
              _context5.next = 17;
              break;
            }
            this.window = filterWindows[0];
            if (!(!sleep && this.window.sleep)) {
              _context5.next = 13;
              break;
            }
            _context5.next = 11;
            return this.window.init();
          case 11:
            _context5.next = 14;
            break;
          case 13:
            this.checkWindowQueue();
          case 14:
            this.emitChangeActiveWindow();
            (_this$window8 = this.window) === null || _this$window8 === void 0 ? void 0 : _this$window8.updateState(WINDOW_STATE.active);
            return _context5.abrupt("return");
          case 17:
            window = new EditorWindow(resource, this, {
              title: resource.title,
              options: resource.options,
              viewName: resource.viewName,
              sleep: sleep
            });
            this.windows = [].concat(this.windows, [window]);
            this.editorWindowMap.set(window.id, window);
            if (!sleep) {
              _context5.next = 23;
              break;
            }
            this.emitChangeWindow();
            return _context5.abrupt("return");
          case 23:
            this.window = window;
            _context5.next = 26;
            return this.window.init();
          case 26:
            this.emitChangeWindow();
            this.emitChangeActiveWindow();
            (_this$window9 = this.window) === null || _this$window9 === void 0 ? void 0 : _this$window9.updateState(WINDOW_STATE.active);
          case 29:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function openEditorWindowByResource(_x4, _x5) {
      return _openEditorWindowByResource.apply(this, arguments);
    }
    return openEditorWindowByResource;
  }();
  _proto.openEditorWindow = /*#__PURE__*/function () {
    var _openEditorWindow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name, title, options, viewName, sleep) {
      var _this$window10, _this$window11, _this$window13;
      var resourceType, filterWindows, _this$window12, resource, window;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            if (!(this.window && !this.window.sleep && !((_this$window10 = this.window) !== null && _this$window10 !== void 0 && _this$window10.initReady) && !sleep)) {
              _context6.next = 3;
              break;
            }
            this.windowQueue.push({
              name: name,
              title: title,
              options: options,
              viewName: viewName
            });
            return _context6.abrupt("return");
          case 3:
            resourceType = this.resourceTypeMap.get(name);
            if (resourceType) {
              _context6.next = 7;
              break;
            }
            console.error(name + " resourceType is not available");
            return _context6.abrupt("return");
          case 7:
            (_this$window11 = this.window) === null || _this$window11 === void 0 ? void 0 : _this$window11.updateState(WINDOW_STATE.inactive);
            filterWindows = this.windows.filter(function (d) {
              var _d$resource4;
              return ((_d$resource4 = d.resource) === null || _d$resource4 === void 0 ? void 0 : _d$resource4.name) === name && d.resource.title == title || d.resource.id == title;
            });
            if (!(filterWindows && filterWindows.length)) {
              _context6.next = 20;
              break;
            }
            this.window = filterWindows[0];
            if (!(!sleep && this.window.sleep)) {
              _context6.next = 16;
              break;
            }
            _context6.next = 14;
            return this.window.init();
          case 14:
            _context6.next = 17;
            break;
          case 16:
            this.checkWindowQueue();
          case 17:
            this.emitChangeActiveWindow();
            (_this$window12 = this.window) === null || _this$window12 === void 0 ? void 0 : _this$window12.updateState(WINDOW_STATE.active);
            return _context6.abrupt("return");
          case 20:
            resource = new Resource({
              resourceName: name,
              title: title,
              options: options,
              id: title === null || title === void 0 ? void 0 : title.toString()
            }, resourceType, this);
            window = new EditorWindow(resource, this, {
              title: title,
              options: options,
              viewName: viewName,
              sleep: sleep
            });
            this.windows = [].concat(this.windows, [window]);
            this.editorWindowMap.set(window.id, window);
            if (!sleep) {
              _context6.next = 27;
              break;
            }
            this.emitChangeWindow();
            return _context6.abrupt("return");
          case 27:
            this.window = window;
            _context6.next = 30;
            return this.window.init();
          case 30:
            this.emitChangeWindow();
            this.emitChangeActiveWindow();
            (_this$window13 = this.window) === null || _this$window13 === void 0 ? void 0 : _this$window13.updateState(WINDOW_STATE.active);
          case 33:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function openEditorWindow(_x6, _x7, _x8, _x9, _x10) {
      return _openEditorWindow.apply(this, arguments);
    }
    return openEditorWindow;
  }();
  _proto.onChangeWindows = function onChangeWindows(fn) {
    var _this4 = this;
    this.emitter.on(EVENT.CHANGE_WINDOW, fn);
    return function () {
      _this4.emitter.removeListener(EVENT.CHANGE_WINDOW, fn);
    };
  };
  _proto.onChangeActiveEditorView = function onChangeActiveEditorView(fn) {
    var _this5 = this;
    this.emitter.on(EVENT.CHANGE_ACTIVE_EDITOR_VIEW, fn);
    return function () {
      _this5.emitter.removeListener(EVENT.CHANGE_ACTIVE_EDITOR_VIEW, fn);
    };
  };
  _proto.emitChangeActiveEditorView = function emitChangeActiveEditorView() {
    this.emitter.emit(EVENT.CHANGE_ACTIVE_EDITOR_VIEW);
  };
  _proto.emitChangeWindow = function emitChangeWindow() {
    this.emitter.emit(EVENT.CHANGE_WINDOW);
  };
  _proto.emitChangeActiveWindow = function emitChangeActiveWindow() {
    this.emitter.emit(EVENT.CHANGE_ACTIVE_WINDOW);
    this.emitChangeActiveEditorView();
  };
  _proto.onChangeActiveWindow = function onChangeActiveWindow(fn) {
    var _this6 = this;
    this.emitter.on(EVENT.CHANGE_ACTIVE_WINDOW, fn);
    return function () {
      _this6.emitter.removeListener(EVENT.CHANGE_ACTIVE_WINDOW, fn);
    };
  };
  _createClass(Workspace, [{
    key: "skeleton",
    get: function get() {
      return this.context.innerSkeleton;
    }
  }, {
    key: "plugins",
    get: function get() {
      return this.context.innerPlugins;
    }
  }, {
    key: "isActive",
    get: function get() {
      return this._isActive;
    }
  }, {
    key: "defaultResourceType",
    get: function get() {
      if (this.resourceTypeMap.size >= 1) {
        return Array.from(this.resourceTypeMap.values())[0];
      }
      return null;
    }
  }]);
  return Workspace;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "windows", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "window", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));