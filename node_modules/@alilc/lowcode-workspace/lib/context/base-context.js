"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.BasicContext = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeDesigner = require("@alilc/lowcode-designer");
var _lowcodeEditorSkeleton = require("@alilc/lowcode-editor-skeleton");
var _lowcodeShell = require("@alilc/lowcode-shell");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var BasicContext = exports.BasicContext = function BasicContext(innerWorkspace, viewName, registerLevel, editorWindow) {
  this.registerLevel = registerLevel;
  this.editorWindow = editorWindow;
  this.skeleton = void 0;
  this.plugins = void 0;
  this.project = void 0;
  this.setters = void 0;
  this.material = void 0;
  this.common = void 0;
  this.config = void 0;
  this.event = void 0;
  this.logger = void 0;
  this.hotkey = void 0;
  this.innerProject = void 0;
  this.editor = void 0;
  this.designer = void 0;
  this.registerInnerPlugins = void 0;
  this.innerSetters = void 0;
  this.innerSkeleton = void 0;
  this.innerHotkey = void 0;
  this.innerPlugins = void 0;
  this.canvas = void 0;
  this.pluginEvent = void 0;
  this.preference = void 0;
  this.workspace = void 0;
  var editor = new _lowcodeEditorCore.Editor(viewName, true);
  var innerSkeleton = new _lowcodeEditorSkeleton.Skeleton(editor, viewName);
  editor.set('skeleton', innerSkeleton);
  var designer = new _lowcodeDesigner.Designer({
    editor: editor,
    viewName: viewName,
    shellModelFactory: innerWorkspace === null || innerWorkspace === void 0 ? void 0 : innerWorkspace.shellModelFactory
  });
  editor.set('designer', designer);
  var innerProject = designer.project;
  var workspace = new _lowcodeShell.Workspace(innerWorkspace);
  var innerHotkey = new _lowcodeEditorCore.Hotkey(viewName);
  var hotkey = new _lowcodeShell.Hotkey(innerHotkey, true);
  var innerSetters = new _lowcodeEditorCore.Setters(viewName);
  var setters = new _lowcodeShell.Setters(innerSetters, true);
  var material = new _lowcodeShell.Material(editor, true);
  var project = new _lowcodeShell.Project(innerProject, true);
  var config = _lowcodeEditorCore.engineConfig;
  var event = new _lowcodeShell.Event(_lowcodeEditorCore.commonEvent, {
    prefix: 'common'
  });
  var logger = (0, _lowcodeUtils.getLogger)({
    level: 'warn',
    bizName: 'common'
  });
  var skeleton = new _lowcodeShell.Skeleton(innerSkeleton, 'any', true);
  var canvas = new _lowcodeShell.Canvas(editor, true);
  var commonUI = new _lowcodeShell.CommonUI(editor);
  var innerCommand = new _lowcodeEditorCore.Command();
  editor.set('setters', setters);
  editor.set('project', project);
  editor.set('material', material);
  editor.set('hotkey', hotkey);
  editor.set('innerHotkey', innerHotkey);
  this.innerSetters = innerSetters;
  this.innerSkeleton = innerSkeleton;
  this.skeleton = skeleton;
  this.innerProject = innerProject;
  this.project = project;
  this.setters = setters;
  this.material = material;
  this.config = config;
  this.event = event;
  this.logger = logger;
  this.hotkey = hotkey;
  this.innerHotkey = innerHotkey;
  this.editor = editor;
  this.designer = designer;
  this.canvas = canvas;
  var common = new _lowcodeShell.Common(editor, innerSkeleton);
  this.common = common;
  var plugins;
  var pluginContextApiAssembler = {
    assembleApis: function assembleApis(context, pluginName, meta) {
      context.workspace = workspace;
      context.hotkey = hotkey;
      context.project = project;
      context.skeleton = new _lowcodeShell.Skeleton(innerSkeleton, pluginName, true);
      context.setters = setters;
      context.material = material;
      var eventPrefix = (meta === null || meta === void 0 ? void 0 : meta.eventPrefix) || 'common';
      var commandScope = meta === null || meta === void 0 ? void 0 : meta.commandScope;
      context.event = new _lowcodeShell.Event(_lowcodeEditorCore.commonEvent, {
        prefix: eventPrefix
      });
      context.config = config;
      context.common = common;
      context.plugins = plugins;
      context.logger = new _lowcodeShell.Logger({
        level: 'warn',
        bizName: "plugin:" + pluginName
      });
      context.canvas = canvas;
      context.commonUI = commonUI;
      if (editorWindow) {
        context.editorWindow = new _lowcodeShell.Window(editorWindow);
      }
      context.command = new _lowcodeShell.Command(innerCommand, context, {
        commandScope: commandScope
      });
      context.registerLevel = registerLevel;
      context.isPluginRegisteredInWorkspace = registerLevel === _lowcodeTypes.IPublicEnumPluginRegisterLevel.Workspace;
      editor.set('pluginContext', context);
    }
  };
  var innerPlugins = new _lowcodeDesigner.LowCodePluginManager(pluginContextApiAssembler, viewName);
  this.innerPlugins = innerPlugins;
  plugins = new _lowcodeShell.Plugins(innerPlugins, true).toProxy();
  editor.set('plugins', plugins);
  editor.set('innerPlugins', innerPlugins);
  this.plugins = plugins;

  // 注册一批内置插件
  this.registerInnerPlugins = /*#__PURE__*/function () {
    var _registerPlugins = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return innerWorkspace === null || innerWorkspace === void 0 ? void 0 : innerWorkspace.registryInnerPlugin(designer, editor, plugins);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function registerPlugins() {
      return _registerPlugins.apply(this, arguments);
    }
    return registerPlugins;
  }();
};