/// <reference types="react" />
import { Context, IViewContext } from './context/view-context';
import { IWorkspace } from './workspace';
import { IResource } from './resource';
import { IPublicModelWindow, IPublicTypeDisposable } from '@alilc/lowcode-types';
interface IWindowCOnfig {
    title: string | undefined;
    options?: Object;
    viewName?: string | undefined;
    sleep?: boolean;
}
export interface IEditorWindow extends Omit<IPublicModelWindow<IResource>, 'changeViewType' | 'currentEditorView' | 'editorViews'> {
    readonly resource: IResource;
    editorViews: Map<string, IViewContext>;
    _editorView: IViewContext;
    changeViewName: (name: string, ignoreEmit?: boolean) => void;
    initReady: boolean;
    sleep?: boolean;
    init(): void;
    updateState(state: WINDOW_STATE): void;
}
export declare enum WINDOW_STATE {
    sleep = "sleep",
    active = "active",
    inactive = "inactive",
    destroyed = "destroyed"
}
export declare class EditorWindow implements IEditorWindow {
    readonly resource: IResource;
    readonly workspace: IWorkspace;
    private config;
    id: string;
    icon: React.ReactElement | undefined;
    private emitter;
    title: string | undefined;
    url: string | undefined;
    _editorView: Context;
    editorViews: Map<string, Context>;
    initReady: boolean;
    sleep: boolean | undefined;
    get editorView(): any;
    constructor(resource: IResource, workspace: IWorkspace, config: IWindowCOnfig);
    updateState(state: WINDOW_STATE): void;
    importSchema(schema: any): Promise<void>;
    save(): Promise<any>;
    onSave(fn: () => void): () => void;
    init(): Promise<void>;
    initViewTypes: () => Promise<void>;
    onChangeViewType(fn: (viewName: string) => void): IPublicTypeDisposable;
    execViewTypesInit: () => Promise<void>;
    setDefaultViewName: () => void;
    get resourceType(): string;
    initViewType: (name: string) => Promise<void>;
    changeViewName: (name: string, ignoreEmit?: boolean) => void;
    get project(): any;
    get innerProject(): any;
    get innerSkeleton(): any;
    get innerSetters(): any;
    get innerHotkey(): any;
    get editor(): any;
    get designer(): any;
    get plugins(): any;
    get innerPlugins(): any;
}
export {};
