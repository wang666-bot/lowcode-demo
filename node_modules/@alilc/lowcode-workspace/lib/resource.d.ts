import { ISkeleton } from '@alilc/lowcode-editor-skeleton';
import { IPublicTypeEditorView, IPublicResourceData, IPublicResourceTypeConfig, IBaseModelResource } from '@alilc/lowcode-types';
import { ResourceType, IResourceType } from './resource-type';
import { IWorkspace } from './workspace';
export interface IBaseResource<T> extends IBaseModelResource<T> {
    readonly resourceType: ResourceType;
    skeleton: ISkeleton;
    description?: string;
    get editorViews(): IPublicTypeEditorView[];
    get defaultViewName(): string | undefined;
    getEditorView(name: string): IPublicTypeEditorView | undefined;
    import(schema: any): Promise<any>;
    save(value: any): Promise<any>;
    url(): Promise<string | undefined>;
}
export declare type IResource = IBaseResource<IResource>;
export declare class Resource implements IResource {
    readonly resourceData: IPublicResourceData;
    readonly resourceType: IResourceType;
    readonly workspace: IWorkspace;
    private context;
    resourceTypeInstance: IPublicResourceTypeConfig;
    editorViewMap: Map<string, IPublicTypeEditorView>;
    get name(): string;
    get viewName(): any;
    get description(): string;
    get icon(): any;
    get type(): "webview" | "editor";
    get title(): string | undefined;
    get id(): string | undefined;
    get options(): {
        [key: string]: any;
    };
    get category(): string;
    get skeleton(): ISkeleton;
    children: IResource[];
    get config(): {
        [key: string]: any;
    };
    constructor(resourceData: IPublicResourceData, resourceType: IResourceType, workspace: IWorkspace);
    init(): Promise<void>;
    import(schema: any): Promise<{
        [viewName: string]: any;
    }>;
    url(): Promise<string>;
    save(value: any): Promise<void>;
    get editorViews(): IPublicTypeEditorView[];
    get defaultViewName(): string;
    getEditorView(name: string): IPublicTypeEditorView;
}
