import { Component } from 'react';
import { SettingField } from '@alilc/lowcode-engine';
import { SetterConfig, CustomView, DynamicProps, DynamicSetter, TitleContent } from '@alilc/lowcode-types';
import './index.less';
export interface SetterItem {
    name: string;
    title: TitleContent;
    setter: string | DynamicSetter | CustomView;
    props?: object | DynamicProps;
    condition?: (field: SettingField) => boolean;
    initialValue?: any | ((field: SettingField) => any);
    list: boolean;
    valueType: string[];
}
export default class MixedSetter extends Component<{
    field: SettingField;
    setters?: Array<string | SetterConfig | CustomView | DynamicSetter>;
    onSetterChange?: (field: SettingField, name: string) => void;
    onChange?: (val: any) => void;
    value?: any;
    className?: string;
}> {
    private fromMixedSetterSelect;
    private setters;
    static displayName: string;
    private used?;
    private getCurrentSetter;
    constructor(props: any);
    private hasVariableSetter;
    private useSetter;
    private syncSelectSetter;
    private handleInitial;
    private shell;
    private checkIsBlockField;
    componentDidUpdate(): void;
    componentDidMount(): void;
    private renderCurrentSetter;
    private contentsFromPolyfill;
    private renderSwitchAction;
    render(): JSX.Element;
}
