"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _numberPicker = _interopRequireDefault(require("@alifd/next/lib/number-picker"));
var _range = _interopRequireDefault(require("@alifd/next/lib/range"));
var _select = _interopRequireDefault(require("@alifd/next/lib/select"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _collapse = _interopRequireDefault(require("@alifd/next/lib/collapse"));
var React = _interopRequireWildcard(require("react"));
var _row = _interopRequireDefault(require("../../components/row"));
var _number = _interopRequireDefault(require("../../components/number"));
var _colorInput = _interopRequireDefault(require("../../components/color-input"));
var _config = _interopRequireDefault(require("./config.json"));
var _utils = require("../../utils");
require("./index.less");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Panel = _collapse["default"].Panel;
var _default = function _default(props) {
  var styleData = props.styleData,
    onStyleChange = props.onStyleChange,
    fontPropsConfig = props.fontPropsConfig;
  var defaultFontPropsConfig = {
    // display 展示列表
    fontFamilyList: [{
      value: 'Helvetica',
      label: 'Helvetica'
    }, {
      value: 'Arial',
      label: 'Arial'
    }, {
      value: 'serif',
      label: 'serif'
    }]
  };

  // 配置合并
  var propsConfig = (0, _extends2["default"])({}, defaultFontPropsConfig, fontPropsConfig);
  var fontWeight = _config["default"].fontWeight,
    textAlign = _config["default"].textAlign;
  var onNumberChange = function onNumberChange(styleKey, value, unit) {
    onStyleChange([{
      styleKey: styleKey,
      value: unit ? (0, _utils.addUnit)(value, unit) : value
    }]);
  };
  return /*#__PURE__*/React.createElement(_collapse["default"], {
    defaultExpandedKeys: ['0']
  }, /*#__PURE__*/React.createElement(Panel, {
    title: "\u6587\u5B57",
    className: "font-style-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "inner-row-contaienr"
  }, /*#__PURE__*/React.createElement("div", {
    className: "row-item"
  }, /*#__PURE__*/React.createElement("span", {
    className: "row-item-title"
  }, "\u5B57\u53F7"), /*#__PURE__*/React.createElement(_number["default"], (0, _extends2["default"])({
    max: 100,
    min: 0,
    styleKey: "fontSize"
  }, props, {
    style: {
      marginRight: '10px',
      width: '100%'
    },
    useComputedStyle: true
  }))), /*#__PURE__*/React.createElement("div", {
    className: "row-item"
  }, /*#__PURE__*/React.createElement("span", {
    className: "row-item-title"
  }, "\u884C\u9AD8"), /*#__PURE__*/React.createElement(_number["default"], (0, _extends2["default"])({
    min: 0,
    styleKey: "lineHeight"
  }, props, {
    style: {
      width: '100%'
    },
    useComputedStyle: true
  })))), /*#__PURE__*/React.createElement(_row["default"], {
    title: '字重',
    styleData: styleData,
    styleKey: ""
  }, /*#__PURE__*/React.createElement(_select["default"], {
    dataSource: fontWeight.dataList,
    style: {
      width: '100%'
    },
    value: styleData.fontWeight,
    hasClear: true,
    onChange: function onChange(val) {
      return onStyleChange([{
        styleKey: 'fontWeight',
        value: val
      }]);
    }
  })), /*#__PURE__*/React.createElement(_row["default"], {
    title: '字体',
    styleData: styleData,
    styleKey: ""
  }, /*#__PURE__*/React.createElement(_select["default"], {
    dataSource: propsConfig.fontFamilyList,
    style: {
      width: '100%'
    },
    value: styleData.fontFamily,
    hasClear: true,
    onChange: function onChange(val) {
      return onStyleChange([{
        styleKey: 'fontFamily',
        value: val
      }]);
    }
  })), /*#__PURE__*/React.createElement(_row["default"], (0, _extends2["default"])({
    title: '文字颜色',
    styleKey: ""
  }, props), /*#__PURE__*/React.createElement(_colorInput["default"], (0, _extends2["default"])({
    styleKey: 'color'
  }, props, {
    inputWidth: "100%"
  }))), /*#__PURE__*/React.createElement(_row["default"], (0, _extends2["default"])({
    title: textAlign.title,
    dataList: textAlign.dataList,
    styleKey: "textAlign"
  }, props)), /*#__PURE__*/React.createElement(_row["default"], (0, _extends2["default"])({
    title: '透明度',
    styleKey: "opacity"
  }, props), /*#__PURE__*/React.createElement("div", {
    className: "opacity-container"
  }, /*#__PURE__*/React.createElement(_range["default"], {
    style: {
      marginRight: '7px'
    },
    value: !(0, _utils.isEmptyValue)(styleData.opacity) ? styleData.opacity * 100 : 0,
    onChange: function onChange(val) {
      return onNumberChange('opacity', parseInt(val) / 100);
    }
  }), /*#__PURE__*/React.createElement(_numberPicker["default"], {
    value: !(0, _utils.isEmptyValue)(styleData.opacity) ? Math.floor(styleData.opacity * 100) : undefined,
    max: 100,
    min: 0,
    onChange: function onChange(val) {
      return onNumberChange('opacity', (0, _utils.isEmptyValue)(val) ? null : val / 100);
    }
  })))));
};
exports["default"] = _default;