"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _balloon = _interopRequireDefault(require("@alifd/next/lib/balloon"));
var _input = _interopRequireDefault(require("@alifd/next/lib/input"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var React = _interopRequireWildcard(require("react"));
var _reactColor = require("react-color");
require("./index.less");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ColorSetter = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(ColorSetter, _React$Component);
  function ColorSetter(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    /**
     * 屏幕分辨率监听
     */
    _this.screenChange = function () {
      window.addEventListener('resize', _this.changeWidth);
    };
    /**
     * 屏幕分辨率 变换 =>  改变冒泡框的位置
     */
    _this.changeWidth = function () {
      _this.setState({
        width: document.body.clientWidth < 1860 ? -92 : -138
      });
    };
    _this.handleChange = function (color) {
      var onChange = _this.props.onChange;
      var rgb = color.rgb,
        hex = color.hex;
      var r = rgb.r,
        g = rgb.g,
        b = rgb.b,
        a = rgb.a;
      if (a === 1) {
        onChange(hex);
      } else {
        onChange("rgba(" + r + "," + g + "," + b + "," + a + ")");
      }
    };
    _this.state = {
      width: -92,
      setterValue: null
    };
    return _this;
  }
  var _proto = ColorSetter.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.screenChange();
    this.changeWidth();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('resize', this.changeWidth);
  };
  ColorSetter.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var value = nextProps.value,
      defaultValue = nextProps.defaultValue;
    if (prevState.setterValue == null) {
      if (value == undefined && defaultValue) {
        return {
          setterValue: defaultValue
        };
      }
    }
    return {
      setterValue: value
    };
  };
  _proto.render = function render() {
    var _this$state = this.state,
      width = _this$state.width,
      setterValue = _this$state.setterValue;
    var onChange = this.props.onChange;
    var InputTarget = /*#__PURE__*/React.createElement(_input["default"], {
      size: "small",
      className: "lowcode-setter-color",
      style: {
        width: '100%'
      },
      innerBefore: /*#__PURE__*/React.createElement("div", {
        className: "color-box",
        style: {
          backgroundColor: setterValue
        }
      }),
      value: setterValue,
      onChange: onChange
    });
    return /*#__PURE__*/React.createElement(_balloon["default"], {
      needAdjust: true,
      align: "tr",
      offset: [width, 0],
      style: {
        padding: 0
      },
      trigger: InputTarget,
      triggerType: "click",
      closable: false
    }, /*#__PURE__*/React.createElement(_reactColor.SketchPicker, {
      color: setterValue,
      onChange: this.handleChange
    }));
  };
  return ColorSetter;
}(React.Component);
exports["default"] = ColorSetter;
ColorSetter.displayName = 'ColorSetter';