"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _react = _interopRequireWildcard(require("react"));
var _lowcodeEngine = require("@alilc/lowcode-engine");
require("./index.less");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var SetterVariable = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(SetterVariable, _PureComponent);
  function SetterVariable() {
    return _PureComponent.apply(this, arguments) || this;
  }
  SetterVariable.show = function show(_ref) {
    var field = _ref.prop;
    _lowcodeEngine.event.emit('variableBindDialog.openDialog', {
      field: field
    });
  };
  var _proto = SetterVariable.prototype;
  _proto.render = function render() {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "lowcode-setter-variable"
    }, "Hello LowcodeSetterVariable");
  };
  return SetterVariable;
}(_react.PureComponent);
exports["default"] = SetterVariable;
SetterVariable.displayName = 'SetterVariable';
SetterVariable.isPopup = true;