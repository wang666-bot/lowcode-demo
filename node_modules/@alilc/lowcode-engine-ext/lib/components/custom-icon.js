"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _icon = _interopRequireDefault(require("@alifd/next/lib/icon"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ICON_URL = '//at.alicdn.com/t/a/font_2761185_ccl8ob63gmj.js';
var CustomIcon;
document.addEventListener('DOMContentLoaded', function () {
  // console.log('3 seconds passed');
  CustomIcon = _icon["default"].createFromIconfontCN({
    scriptUrl: ICON_URL
  });
});
var _default = function _default(props) {
  var type = props.type,
    size = props.size,
    _props$className = props.className,
    className = _props$className === void 0 ? '' : _props$className,
    _props$style = props.style,
    style = _props$style === void 0 ? {} : _props$style;
  (0, React.useEffect)(function () {
    if (!CustomIcon) {
      CustomIcon = _icon["default"].createFromIconfontCN({
        scriptUrl: ICON_URL
      });
    }
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, CustomIcon && /*#__PURE__*/React.createElement(CustomIcon, {
    type: type,
    size: size,
    className: className,
    style: style
  }));
};
exports["default"] = _default;