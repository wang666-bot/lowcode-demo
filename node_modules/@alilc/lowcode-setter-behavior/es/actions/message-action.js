import _Input from "@alifd/next/lib/input";
import _Select from "@alifd/next/lib/select";
import _extends from "@babel/runtime/helpers/extends";
import _Box from "@alifd/next/lib/box";
import * as React from 'react';

function fillDefaultValue(value) {
  if (typeof value !== 'object') {
    console.warn('value passed to fillDefaultValue should be an object');
    return;
  }

  if (!value.type) {
    value.type = 'notice';
  }
}

var MessageActionContent = function MessageActionContent(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? {} : _ref$value,
      _onChange = _ref.onChange,
      options = _ref.options;
  fillDefaultValue(value);
  var types = options.types;
  return /*#__PURE__*/React.createElement(_Box, null, /*#__PURE__*/React.createElement(_Box, {
    direction: "row",
    align: "center",
    className: "behavior-item"
  }, /*#__PURE__*/React.createElement(_Box, {
    style: {
      width: 70
    }
  }, "\u901A\u77E5\u7C7B\u578B"), /*#__PURE__*/React.createElement(_Box, {
    className: "behavior-radio"
  }, /*#__PURE__*/React.createElement(_Select, {
    size: "small",
    dataSource: types,
    defaultValue: "notice",
    value: (value === null || value === void 0 ? void 0 : value.type) || 'notice',
    onChange: function onChange(val) {
      _onChange(_extends({}, value, {
        type: val
      }));
    }
  }))), /*#__PURE__*/React.createElement(_Box, {
    direction: "row",
    align: "center",
    className: "behavior-item"
  }, /*#__PURE__*/React.createElement(_Box, {
    style: {
      width: 70
    }
  }, "\u901A\u77E5\u5185\u5BB9"), /*#__PURE__*/React.createElement(_Box, {
    className: "behavior-radio"
  }, /*#__PURE__*/React.createElement(_Input.TextArea, {
    size: "small",
    placeholder: "\u8BF7\u8F93\u5165\u5185\u5BB9",
    value: value.content,
    onChange: function onChange(content) {
      _onChange(_extends({}, value, {
        content: content
      }));
    }
  }))));
};

export var messageBehaviorAction = {
  name: 'message',
  title: '提示',
  render: function render(props) {
    return /*#__PURE__*/React.createElement(MessageActionContent, props);
  },
  toActionValue: function toActionValue(value, options) {
    var library = options.library,
        component = options.component,
        defaultType = options.defaultType;
    return {
      type: 'JSExpression',
      value: "function() {" + library + "." + component + "." + (value.type || defaultType) + "('" + value.content + "')}"
    };
  }
};