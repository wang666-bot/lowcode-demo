"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var React = _interopRequireWildcard(require("react"));
var _editor = _interopRequireDefault(require("./editor"));
var _locale = require("./locale");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var plugin = function plugin(ctx, options) {
  return {
    // 插件的初始化函数，在引擎初始化之后会立刻调用
    init: function init() {
      var _ctx$common$utils$cre = ctx.common.utils.createIntl({
          'en-US': _locale.enUS,
          'zh-CN': _locale.zhCN
        }),
        intl = _ctx$common$utils$cre.intl,
        intlNode = _ctx$common$utils$cre.intlNode,
        getLocale = _ctx$common$utils$cre.getLocale;
      ctx.intl = intl;
      ctx.intlNode = intlNode;
      ctx.getLocale = getLocale;
      var isProjectSchema = (options && options['isProjectSchema']) === true;

      // 往引擎增加面板
      ctx.skeleton.add({
        area: 'leftArea',
        name: 'LowcodePluginAliLowcodePluginSchema',
        type: 'PanelDock',
        props: {
          align: 'bottom',
          icon: 'ellipsis',
          description: 'Schema'
        },
        panelProps: {
          width: 'calc(100% - 50px)'
        },
        content: function content() {
          return /*#__PURE__*/React.createElement(_editor["default"], {
            pluginContext: ctx,
            showProjectSchema: isProjectSchema
          });
        }
      });
    }
  };
};
plugin.pluginName = 'LowcodePluginAliLowcodePluginSchema';
plugin.meta = {
  preferenceDeclaration: {
    title: 'schema 面板配置',
    properties: [{
      key: 'isProjectSchema',
      type: 'boolean',
      description: '是否是项目级 schema',
      "default": false
    }]
  }
};
var _default = plugin;
exports["default"] = _default;