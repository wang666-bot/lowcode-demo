"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = PluginSchema;
var _button = _interopRequireDefault(require("@alifd/next/lib/button"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _message = _interopRequireDefault(require("@alifd/next/lib/message"));
var _dialog = _interopRequireDefault(require("@alifd/next/lib/dialog"));
var React = _interopRequireWildcard(require("react"));
var _lowcodePluginBaseMonacoEditor = _interopRequireDefault(require("@alilc/lowcode-plugin-base-monaco-editor"));
var _lowcodeTypes = require("@alilc/lowcode-types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function PluginSchema(_ref) {
  var pluginContext = _ref.pluginContext,
    _ref$showProjectSchem = _ref.showProjectSchema,
    showProjectSchema = _ref$showProjectSchem === void 0 ? false : _ref$showProjectSchem;
  var project = pluginContext.project,
    skeleton = pluginContext.skeleton;
  var _useState = (0, React.useState)({
      width: 0,
      height: 0
    }),
    editorSize = _useState[0],
    setEditorSize = _useState[1];
  var getSchemaStr = (0, React.useCallback)(function () {
    var _schema$componentsTre;
    var schema = project.exportSchema(_lowcodeTypes.IPublicEnumTransformStage.Save);
    var schemaToShow = showProjectSchema ? schema : schema === null || schema === void 0 ? void 0 : (_schema$componentsTre = schema.componentsTree) === null || _schema$componentsTre === void 0 ? void 0 : _schema$componentsTre[0];
    return schemaToShow ? JSON.stringify(schemaToShow, null, 2) : '';
  }, []);
  var _useState2 = (0, React.useState)(function () {
      return getSchemaStr();
    }),
    schemaValue = _useState2[0],
    setSchemaValue = _useState2[1];
  var monacoEditorRef = (0, React.useRef)();
  var resize = (0, React.useCallback)(function () {
    setEditorSize({
      width: document.documentElement.clientWidth - 60,
      height: document.documentElement.clientHeight - 100
    });
  }, []);
  (0, React.useLayoutEffect)(function () {
    var cancelListenShowPanel = skeleton.onShowPanel(function (pluginName) {
      if (pluginName == 'LowcodePluginAliLowcodePluginSchema') {
        setSchemaValue(getSchemaStr());
      }
    });
    return cancelListenShowPanel;
  }, []);
  (0, React.useEffect)(function () {
    resize();
    window.addEventListener('resize', resize);
    return function () {
      window.removeEventListener('resize', resize);
    };
  }, [resize]);
  var onSave = function onSave() {
    _dialog["default"].alert({
      content: 'Are you 100% sure? Lowcode editor may crash.',
      footerActions: ['cancel', 'ok'],
      onOk: function onOk() {
        var json;
        try {
          var _monacoEditorRef$curr, _monacoEditorRef$curr2;
          json = JSON.parse((_monacoEditorRef$curr = (_monacoEditorRef$curr2 = monacoEditorRef.current) === null || _monacoEditorRef$curr2 === void 0 ? void 0 : _monacoEditorRef$curr2.getValue()) !== null && _monacoEditorRef$curr !== void 0 ? _monacoEditorRef$curr : schemaValue);
        } catch (err) {
          _message["default"].error('Cannot save schema. Schema Parse Error.' + err.message);
          return;
        }
        if (showProjectSchema) {
          // 当前操作项目级 schema
          project.importSchema(json);
        } else {
          // 当前操作页面级 schema
          project.importSchema((0, _extends2["default"])({}, project.exportSchema(_lowcodeTypes.IPublicEnumTransformStage.Save), {
            componentsTree: [json]
          }));
        }
        _message["default"].success('Schema Saved!');
        skeleton.hidePanel('LowcodePluginAliLowcodePluginSchema');
      }
    });
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_button["default"], {
    onClick: onSave,
    style: {
      position: 'absolute',
      right: 68,
      zIndex: 100,
      top: -38
    }
  }, pluginContext.intl('Save Schema')), /*#__PURE__*/React.createElement(_lowcodePluginBaseMonacoEditor["default"], {
    height: editorSize.height,
    language: "json",
    theme: "vs-light",
    value: schemaValue,
    onChange: function onChange(input) {
      setSchemaValue(input);
    },
    editorDidMount: function editorDidMount(_, monacoEditor) {
      monacoEditorRef.current = monacoEditor;
      monacoEditor.addAction({
        id: 'my-unique-id',
        label: 'Save Schema',
        keybindingContext: null,
        contextMenuGroupId: 'navigation',
        contextMenuOrder: 1.5,
        run: onSave
      });
    }
  }));
}