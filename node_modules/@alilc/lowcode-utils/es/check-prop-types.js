import * as ReactIs from 'react-is';
import { default as ReactPropTypesSecret } from 'prop-types/lib/ReactPropTypesSecret';
import { default as factoryWithTypeCheckers } from 'prop-types/factoryWithTypeCheckers';
import { isRequiredPropType } from './check-types/is-required-prop-type';
import { Logger } from './logger';
var PropTypes2 = factoryWithTypeCheckers(ReactIs.isElement, true);
var logger = new Logger({
  level: 'warn',
  bizName: 'utils'
});
export function transformPropTypesRuleToString(rule) {
  if (!rule) {
    return 'PropTypes.any';
  }
  if (typeof rule === 'string') {
    return rule.startsWith('PropTypes.') ? rule : "PropTypes." + rule;
  }
  if (isRequiredPropType(rule)) {
    var _type = rule.type,
      isRequired = rule.isRequired;
    return "PropTypes." + _type + (isRequired ? '.isRequired' : '');
  }
  var type = rule.type,
    value = rule.value;
  switch (type) {
    case 'oneOf':
      return "PropTypes.oneOf([" + value.map(function (item) {
        return "\"" + item + "\"";
      }).join(',') + "])";
    case 'oneOfType':
      return "PropTypes.oneOfType([" + value.map(function (item) {
        return transformPropTypesRuleToString(item);
      }).join(', ') + "])";
    case 'arrayOf':
    case 'objectOf':
      return "PropTypes." + type + "(" + transformPropTypesRuleToString(value) + ")";
    case 'shape':
    case 'exact':
      return "PropTypes." + type + "({" + value.map(function (item) {
        return item.name + ": " + transformPropTypesRuleToString(item.propType);
      }).join(',') + "})";
    default:
      logger.error("Unknown prop type: " + type);
  }
  return 'PropTypes.any';
}
export function checkPropTypes(value, name, rule, componentName) {
  var _ruleFunction;
  var ruleFunction = rule;
  if (typeof rule === 'object') {
    // eslint-disable-next-line no-new-func
    ruleFunction = new Function("\"use strict\"; const PropTypes = arguments[0]; return " + transformPropTypesRuleToString(rule))(PropTypes2);
  }
  if (typeof rule === 'string') {
    // eslint-disable-next-line no-new-func
    ruleFunction = new Function("\"use strict\"; const PropTypes = arguments[0]; return " + transformPropTypesRuleToString(rule))(PropTypes2);
  }
  if (!ruleFunction || typeof ruleFunction !== 'function') {
    logger.warn('checkPropTypes should have a function type rule argument');
    return true;
  }
  var err = ruleFunction((_ruleFunction = {}, _ruleFunction[name] = value, _ruleFunction), name, componentName, 'prop', null, ReactPropTypesSecret);
  if (err) {
    logger.warn(err);
  }
  return !err;
}