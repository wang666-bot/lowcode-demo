"use strict";

exports.__esModule = true;
exports.cursor = exports.Cursor = void 0;
require("./cursor.css");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var Cursor = exports.Cursor = /*#__PURE__*/function () {
  function Cursor() {
    this.states = new Set();
  }
  var _proto = Cursor.prototype;
  _proto.setDragging = function setDragging(flag) {
    if (flag) {
      this.addState('dragging');
    } else {
      this.removeState('dragging');
    }
  };
  _proto.setXResizing = function setXResizing(flag) {
    if (flag) {
      this.addState('x-resizing');
    } else {
      this.removeState('x-resizing');
    }
  };
  _proto.setYResizing = function setYResizing(flag) {
    if (flag) {
      this.addState('y-resizing');
    } else {
      this.removeState('y-resizing');
    }
  };
  _proto.setCopy = function setCopy(flag) {
    if (flag) {
      this.addState('copy');
    } else {
      this.removeState('copy');
    }
  };
  _proto.isCopy = function isCopy() {
    return this.states.has('copy');
  };
  _proto.release = function release() {
    for (var _iterator = _createForOfIteratorHelperLoose(this.states), _step; !(_step = _iterator()).done;) {
      var state = _step.value;
      this.removeState(state);
    }
  };
  _proto.addState = function addState(state) {
    if (!this.states.has(state)) {
      this.states.add(state);
      document.documentElement.classList.add("lc-cursor-" + state);
    }
  };
  _proto.removeState = function removeState(state) {
    if (this.states.has(state)) {
      this.states["delete"](state);
      document.documentElement.classList.remove("lc-cursor-" + state);
    }
  };
  return Cursor;
}();
var cursor = exports.cursor = new Cursor();