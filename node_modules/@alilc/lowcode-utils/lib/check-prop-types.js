"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.checkPropTypes = checkPropTypes;
exports.transformPropTypesRuleToString = transformPropTypesRuleToString;
var ReactIs = _interopRequireWildcard(require("react-is"));
var _ReactPropTypesSecret = _interopRequireDefault(require("prop-types/lib/ReactPropTypesSecret"));
var _factoryWithTypeCheckers = _interopRequireDefault(require("prop-types/factoryWithTypeCheckers"));
var _isRequiredPropType = require("./check-types/is-required-prop-type");
var _logger = require("./logger");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PropTypes2 = (0, _factoryWithTypeCheckers["default"])(ReactIs.isElement, true);
var logger = new _logger.Logger({
  level: 'warn',
  bizName: 'utils'
});
function transformPropTypesRuleToString(rule) {
  if (!rule) {
    return 'PropTypes.any';
  }
  if (typeof rule === 'string') {
    return rule.startsWith('PropTypes.') ? rule : "PropTypes." + rule;
  }
  if ((0, _isRequiredPropType.isRequiredPropType)(rule)) {
    var _type = rule.type,
      isRequired = rule.isRequired;
    return "PropTypes." + _type + (isRequired ? '.isRequired' : '');
  }
  var type = rule.type,
    value = rule.value;
  switch (type) {
    case 'oneOf':
      return "PropTypes.oneOf([" + value.map(function (item) {
        return "\"" + item + "\"";
      }).join(',') + "])";
    case 'oneOfType':
      return "PropTypes.oneOfType([" + value.map(function (item) {
        return transformPropTypesRuleToString(item);
      }).join(', ') + "])";
    case 'arrayOf':
    case 'objectOf':
      return "PropTypes." + type + "(" + transformPropTypesRuleToString(value) + ")";
    case 'shape':
    case 'exact':
      return "PropTypes." + type + "({" + value.map(function (item) {
        return item.name + ": " + transformPropTypesRuleToString(item.propType);
      }).join(',') + "})";
    default:
      logger.error("Unknown prop type: " + type);
  }
  return 'PropTypes.any';
}
function checkPropTypes(value, name, rule, componentName) {
  var _ruleFunction;
  var ruleFunction = rule;
  if (typeof rule === 'object') {
    // eslint-disable-next-line no-new-func
    ruleFunction = new Function("\"use strict\"; const PropTypes = arguments[0]; return " + transformPropTypesRuleToString(rule))(PropTypes2);
  }
  if (typeof rule === 'string') {
    // eslint-disable-next-line no-new-func
    ruleFunction = new Function("\"use strict\"; const PropTypes = arguments[0]; return " + transformPropTypesRuleToString(rule))(PropTypes2);
  }
  if (!ruleFunction || typeof ruleFunction !== 'function') {
    logger.warn('checkPropTypes should have a function type rule argument');
    return true;
  }
  var err = ruleFunction((_ruleFunction = {}, _ruleFunction[name] = value, _ruleFunction), name, componentName, 'prop', null, _ReactPropTypesSecret["default"]);
  if (err) {
    logger.warn(err);
  }
  return !err;
}