"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.AppHelper = void 0;
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _events = _interopRequireDefault(require("events"));
var _AppHelper;
var instance = null;
_events["default"].defaultMaxListeners = 100;
var AppHelper = exports.AppHelper = /*#__PURE__*/function (_EventEmitter) {
  (0, _inheritsLoose2["default"])(AppHelper, _EventEmitter);
  function AppHelper(config) {
    var _this;
    _this = _EventEmitter.call(this) || this;
    instance = (0, _assertThisInitialized2["default"])(_this);
    Object.assign((0, _assertThisInitialized2["default"])(_this), config);
    return _this;
  }
  var _proto = AppHelper.prototype;
  _proto.get = function get(key) {
    return this[key];
  };
  _proto.set = function set(key, val) {
    var _this2 = this;
    if (typeof key === 'string') {
      this[key] = val;
    } else if (typeof key === 'object') {
      Object.keys(key).forEach(function (item) {
        _this2[item] = key[item];
      });
    }
  };
  _proto.batchOn = function batchOn(events, listener) {
    var _this3 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this3.on(event, listener);
    });
  };
  _proto.batchOnce = function batchOnce(events, listener) {
    var _this4 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this4.once(event, listener);
    });
  };
  _proto.batchOff = function batchOff(events, listener) {
    var _this5 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this5.off(event, listener);
    });
  };
  return AppHelper;
}(_events["default"]);
_AppHelper = AppHelper;
AppHelper.getInstance = function () {
  if (!instance) {
    instance = new _AppHelper();
  }
  return instance;
};