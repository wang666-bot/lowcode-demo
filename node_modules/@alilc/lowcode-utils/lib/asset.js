"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.StylePoint = exports.AssetLoader = void 0;
exports.assetBundle = assetBundle;
exports.assetItem = assetItem;
exports.isAssetBundle = isAssetBundle;
exports.isAssetItem = isAssetItem;
exports.mergeAssets = mergeAssets;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _lowcodeTypes = require("@alilc/lowcode-types");
exports.AssetType = _lowcodeTypes.AssetType;
exports.AssetLevels = _lowcodeTypes.AssetLevels;
exports.AssetLevel = _lowcodeTypes.AssetLevel;
var _isCssUrl = require("./is-css-url");
var _createDefer = require("./create-defer");
var _script = require("./script");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } // API 向下兼容
function isAssetItem(obj) {
  return obj && obj.type;
}
function isAssetBundle(obj) {
  return obj && obj.type === _lowcodeTypes.AssetType.Bundle;
}
function assetBundle(assets, level) {
  if (!assets) {
    return null;
  }
  return {
    type: _lowcodeTypes.AssetType.Bundle,
    assets: assets,
    level: level
  };
}

/*
urls: "view.js,view2 <device selector>, view3 <device selector>",
urls: [
  "view.js",
  "view.js *",
  "view1.js mobile|pc",
  "view2.js <device selector>"
] */
function assetItem(type, content, level, id) {
  if (!content) {
    return null;
  }
  return {
    type: type,
    content: content,
    level: level,
    id: id
  };
}
function mergeAssets(assets, incrementalAssets) {
  if (incrementalAssets.packages) {
    assets.packages = [].concat(assets.packages || [], incrementalAssets.packages);
  }
  if (incrementalAssets.components) {
    assets.components = [].concat(assets.components || [], incrementalAssets.components);
  }
  mergeAssetsComponentList(assets, incrementalAssets, 'componentList');
  mergeAssetsComponentList(assets, incrementalAssets, 'bizComponentList');
  return assets;
}
function mergeAssetsComponentList(assets, incrementalAssets, listName) {
  if (incrementalAssets[listName]) {
    if (assets[listName]) {
      var _incrementalAssets$li;
      // 根据title进行合并
      (_incrementalAssets$li = incrementalAssets[listName]) === null || _incrementalAssets$li === void 0 ? void 0 : _incrementalAssets$li.map(function (item) {
        var _assets$listName, _assets$listName2;
        var matchFlag = false;
        (_assets$listName = assets[listName]) === null || _assets$listName === void 0 ? void 0 : _assets$listName.map(function (assetItem) {
          if (assetItem.title === item.title) {
            assetItem.children = assetItem.children.concat(item.children);
            matchFlag = true;
          }
          return assetItem;
        });
        !matchFlag && ((_assets$listName2 = assets[listName]) === null || _assets$listName2 === void 0 ? void 0 : _assets$listName2.push(item));
        return item;
      });
    }
  }
}
var StylePoint = exports.StylePoint = /*#__PURE__*/function () {
  function StylePoint(level, id) {
    this.lastContent = void 0;
    this.lastUrl = void 0;
    this.placeholder = void 0;
    this.level = void 0;
    this.id = void 0;
    this.level = level;
    if (id) {
      this.id = id;
    }
    var placeholder;
    if (id) {
      placeholder = document.head.querySelector("style[data-id=\"" + id + "\"]");
    }
    if (!placeholder) {
      placeholder = document.createTextNode('');
      var meta = document.head.querySelector("meta[level=\"" + level + "\"]");
      if (meta) {
        document.head.insertBefore(placeholder, meta);
      } else {
        document.head.appendChild(placeholder);
      }
    }
    this.placeholder = placeholder;
  }
  var _proto = StylePoint.prototype;
  _proto.applyText = function applyText(content) {
    if (this.lastContent === content) {
      return;
    }
    this.lastContent = content;
    this.lastUrl = undefined;
    var element = document.createElement('style');
    element.setAttribute('type', 'text/css');
    if (this.id) {
      element.setAttribute('data-id', this.id);
    }
    element.appendChild(document.createTextNode(content));
    document.head.insertBefore(element, this.placeholder.parentNode === document.head ? this.placeholder.nextSibling : null);
    document.head.removeChild(this.placeholder);
    this.placeholder = element;
  };
  _proto.applyUrl = function applyUrl(url) {
    if (this.lastUrl === url) {
      return;
    }
    this.lastContent = undefined;
    this.lastUrl = url;
    var element = document.createElement('link');
    element.onload = onload;
    element.onerror = onload;
    var i = (0, _createDefer.createDefer)();
    function onload(e) {
      element.onload = null;
      element.onerror = null;
      if (e.type === 'load') {
        i.resolve();
      } else {
        i.reject();
      }
    }
    element.href = url;
    element.rel = 'stylesheet';
    if (this.id) {
      element.setAttribute('data-id', this.id);
    }
    document.head.insertBefore(element, this.placeholder.parentNode === document.head ? this.placeholder.nextSibling : null);
    document.head.removeChild(this.placeholder);
    this.placeholder = element;
    return i.promise();
  };
  return StylePoint;
}();
function parseAssetList(scripts, styles, assets, level) {
  for (var _iterator = _createForOfIteratorHelperLoose(assets), _step; !(_step = _iterator()).done;) {
    var asset = _step.value;
    parseAsset(scripts, styles, asset, level);
  }
}
function parseAsset(scripts, styles, asset, level) {
  if (!asset) {
    return;
  }
  if (Array.isArray(asset)) {
    return parseAssetList(scripts, styles, asset, level);
  }
  if (isAssetBundle(asset)) {
    if (asset.assets) {
      if (Array.isArray(asset.assets)) {
        parseAssetList(scripts, styles, asset.assets, asset.level || level);
      } else {
        parseAsset(scripts, styles, asset.assets, asset.level || level);
      }
      return;
    }
    return;
  }
  if (!isAssetItem(asset)) {
    asset = assetItem((0, _isCssUrl.isCSSUrl)(asset) ? _lowcodeTypes.AssetType.CSSUrl : _lowcodeTypes.AssetType.JSUrl, asset, level);
  }
  var lv = asset.level || level;
  if (!lv || _lowcodeTypes.AssetLevel[lv] == null) {
    lv = _lowcodeTypes.AssetLevel.App;
  }
  asset.level = lv;
  if (asset.type === _lowcodeTypes.AssetType.CSSUrl || asset.type == _lowcodeTypes.AssetType.CSSText) {
    styles[lv].push(asset);
  } else {
    scripts[lv].push(asset);
  }
}
var AssetLoader = exports.AssetLoader = /*#__PURE__*/function () {
  function AssetLoader() {
    this.stylePoints = new Map();
  }
  var _proto2 = AssetLoader.prototype;
  _proto2.load = /*#__PURE__*/function () {
    var _load = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(asset) {
      var _this = this;
      var styles, scripts, styleQueue, scriptQueue;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            styles = {};
            scripts = {};
            _lowcodeTypes.AssetLevels.forEach(function (lv) {
              styles[lv] = [];
              scripts[lv] = [];
            });
            parseAsset(scripts, styles, asset);
            styleQueue = styles[_lowcodeTypes.AssetLevel.Environment].concat(styles[_lowcodeTypes.AssetLevel.Library], styles[_lowcodeTypes.AssetLevel.Theme], styles[_lowcodeTypes.AssetLevel.Runtime], styles[_lowcodeTypes.AssetLevel.App]);
            scriptQueue = scripts[_lowcodeTypes.AssetLevel.Environment].concat(scripts[_lowcodeTypes.AssetLevel.Library], scripts[_lowcodeTypes.AssetLevel.Theme], scripts[_lowcodeTypes.AssetLevel.Runtime], scripts[_lowcodeTypes.AssetLevel.App]);
            _context.next = 8;
            return Promise.all(styleQueue.map(function (_ref) {
              var content = _ref.content,
                level = _ref.level,
                type = _ref.type,
                id = _ref.id;
              return _this.loadStyle(content, level, type === _lowcodeTypes.AssetType.CSSUrl, id);
            }));
          case 8:
            _context.next = 10;
            return Promise.all(scriptQueue.map(function (_ref2) {
              var content = _ref2.content,
                type = _ref2.type,
                scriptType = _ref2.scriptType;
              return _this.loadScript(content, type === _lowcodeTypes.AssetType.JSUrl, scriptType);
            }));
          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function load(_x) {
      return _load.apply(this, arguments);
    }
    return load;
  }();
  _proto2.loadStyle = function loadStyle(content, level, isUrl, id) {
    if (!content) {
      return;
    }
    var point;
    if (id) {
      point = this.stylePoints.get(id);
      if (!point) {
        point = new StylePoint(level, id);
        this.stylePoints.set(id, point);
      }
    } else {
      point = new StylePoint(level);
    }
    return isUrl ? point.applyUrl(content) : point.applyText(content);
  };
  _proto2.loadScript = function loadScript(content, isUrl, scriptType) {
    if (!content) {
      return;
    }
    return isUrl ? (0, _script.load)(content, scriptType) : (0, _script.evaluate)(content, scriptType);
  }

  // todo 补充类型
  ;
  _proto2.loadAsyncLibrary =
  /*#__PURE__*/
  function () {
    var _loadAsyncLibrary = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(asyncLibraryMap) {
      var promiseList, libraryKeyList, pkgs, key;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            promiseList = [];
            libraryKeyList = [];
            pkgs = [];
            for (key in asyncLibraryMap) {
              // 需要异步加载
              if (asyncLibraryMap[key].async) {
                promiseList.push(window[asyncLibraryMap[key].library]);
                libraryKeyList.push(asyncLibraryMap[key].library);
                pkgs.push(asyncLibraryMap[key]);
              }
            }
            _context2.next = 6;
            return Promise.all(promiseList).then(function (mods) {
              if (mods.length > 0) {
                mods.map(function (item, index) {
                  var _pkgs$index = pkgs[index],
                    exportMode = _pkgs$index.exportMode,
                    exportSourceLibrary = _pkgs$index.exportSourceLibrary,
                    library = _pkgs$index.library;
                  window[libraryKeyList[index]] = exportMode === 'functionCall' && (exportSourceLibrary == null || exportSourceLibrary === library) ? item() : item;
                  return item;
                });
              }
            });
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    function loadAsyncLibrary(_x2) {
      return _loadAsyncLibrary.apply(this, arguments);
    }
    return loadAsyncLibrary;
  }();
  return AssetLoader;
}();