"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Logger = void 0;
exports.getLogger = getLogger;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _isObject = require("./is-object");
/* eslint-disable no-console */
/* eslint-disable no-param-reassign */

var levels = {
  debug: -1,
  log: 0,
  info: 0,
  warn: 1,
  error: 2
};
var bizNameColors = ['#daa569', '#00ffff', '#385e0f', '#7fffd4', '#00c957', '#b0e0e6', '#4169e1', '#6a5acd', '#87ceeb', '#ffff00', '#e3cf57', '#ff9912', '#eb8e55', '#ffe384', '#40e0d0', '#a39480', '#d2691e', '#ff7d40', '#f0e68c', '#bc8f8f', '#c76114', '#734a12', '#5e2612', '#0000ff', '#3d59ab', '#1e90ff', '#03a89e', '#33a1c9', '#a020f0', '#a066d3', '#da70d6', '#dda0dd', '#688e23', '#2e8b57'];
var bodyColors = {
  debug: '#fadb14',
  log: '#8c8c8c',
  info: '#52c41a',
  warn: '#fa8c16',
  error: '#ff4d4f'
};
var levelMarks = {
  debug: 'debug',
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error'
};
var outputFunction = {
  debug: console.log,
  log: console.log,
  info: console.log,
  warn: console.warn,
  error: console.error
};
var bizNameColorConfig = {};
var shouldOutput = function shouldOutput(logLevel, targetLevel, bizName, targetBizName) {
  if (targetLevel === void 0) {
    targetLevel = 'warn';
  }
  var isLevelFit = levels[targetLevel] <= levels[logLevel];
  var isBizNameFit = targetBizName === '*' || bizName.indexOf(targetBizName) > -1;
  return isLevelFit && isBizNameFit;
};
var output = function output(logLevel, bizName) {
  return function () {
    var _outputFunction$logLe;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_outputFunction$logLe = outputFunction[logLevel]) === null || _outputFunction$logLe === void 0 ? void 0 : _outputFunction$logLe.apply(console, getLogArgs(args, bizName, logLevel));
  };
};
var getColor = function getColor(bizName) {
  if (!bizNameColorConfig[bizName]) {
    var color = bizNameColors[Object.keys(bizNameColorConfig).length % bizNameColors.length];
    bizNameColorConfig[bizName] = color;
  }
  return bizNameColorConfig[bizName];
};
var getLogArgs = function getLogArgs(args, bizName, logLevel) {
  var color = getColor(bizName);
  var bodyColor = bodyColors[logLevel];
  var argsArray = args[0];
  var prefix = "%c[" + bizName + "]%c[" + levelMarks[logLevel] + "]:";
  argsArray.forEach(function (arg) {
    if ((0, _isObject.isObject)(arg)) {
      prefix += '%o';
    } else {
      prefix += '%s';
    }
  });
  var processedArgs = [prefix, "color: " + color, "color: " + bodyColor];
  processedArgs = processedArgs.concat(argsArray);
  return processedArgs;
};
var parseLogConf = function parseLogConf(logConf, options) {
  if (!logConf) {
    return {
      level: options.level,
      bizName: options.bizName
    };
  }
  if (logConf.indexOf(':') > -1) {
    var pair = logConf.split(':');
    return {
      level: pair[0],
      bizName: pair[1] || '*'
    };
  }
  return {
    level: logConf,
    bizName: '*'
  };
};
var defaultOptions = {
  level: 'warn',
  bizName: '*'
};
var Logger = exports.Logger = /*#__PURE__*/function () {
  function Logger(options) {
    this.bizName = void 0;
    this.targetBizName = void 0;
    this.targetLevel = void 0;
    options = (0, _extends2["default"])({}, defaultOptions, options);
    var _location = location || {};
    // __logConf__ 格式为 logLevel[:bizName], bizName is used as: targetBizName like '%bizName%'
    //   1. __logConf__=log  or __logConf__=warn,  etc.
    //   2. __logConf__=log:*  or __logConf__=warn:*,  etc.
    //   2. __logConf__=log:bizName  or __logConf__=warn:partOfBizName,  etc.
    var logConf = (/__(?:logConf|logLevel)__=([^#/&]*)/.exec(_location.href) || [])[1];
    var targetOptions = parseLogConf(logConf, options);
    this.bizName = options.bizName;
    this.targetBizName = targetOptions.bizName;
    this.targetLevel = targetOptions.level;
  }
  var _proto = Logger.prototype;
  _proto.debug = function debug() {
    if (!shouldOutput('debug', this.targetLevel, this.bizName, this.targetBizName)) {
      return;
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return output('debug', this.bizName)(args);
  };
  _proto.log = function log() {
    if (!shouldOutput('log', this.targetLevel, this.bizName, this.targetBizName)) {
      return;
    }
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return output('log', this.bizName)(args);
  };
  _proto.info = function info() {
    if (!shouldOutput('info', this.targetLevel, this.bizName, this.targetBizName)) {
      return;
    }
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return output('info', this.bizName)(args);
  };
  _proto.warn = function warn() {
    if (!shouldOutput('warn', this.targetLevel, this.bizName, this.targetBizName)) {
      return;
    }
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return output('warn', this.bizName)(args);
  };
  _proto.error = function error() {
    if (!shouldOutput('error', this.targetLevel, this.bizName, this.targetBizName)) {
      return;
    }
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    return output('error', this.bizName)(args);
  };
  return Logger;
}();
function getLogger(config) {
  return new Logger(config);
}