"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.accessLibrary = accessLibrary;
exports.buildComponents = buildComponents;
exports.generateHtmlComp = generateHtmlComp;
exports.getProjectUtils = getProjectUtils;
exports.getSubComponent = getSubComponent;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("react");
var _isEsModule = require("./is-es-module");
var _isReact = require("./is-react");
var _isObject = require("./is-object");
var _checkTypes = require("./check-types");
var _isComponentSchema = require("./check-types/is-component-schema");
function accessLibrary(library) {
  if (typeof library !== 'string') {
    return library;
  }
  return window[library] || generateHtmlComp(library);
}
function generateHtmlComp(library) {
  if (['a', 'img', 'div', 'span', 'svg'].includes(library)) {
    return /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
      return /*#__PURE__*/(0, _react.createElement)(library, (0, _extends2["default"])({
        ref: ref
      }, props), props.children);
    });
  }
}
function getSubComponent(library, paths) {
  var l = paths.length;
  if (l < 1 || !library) {
    return library;
  }
  var i = 0;
  var component;
  while (i < l) {
    var _key = paths[i];
    var ex = void 0;
    try {
      component = library[_key] || component;
    } catch (e) {
      ex = e;
      component = null;
    }
    if (i === 0 && component == null && _key === 'default') {
      if (ex) {
        return l === 1 ? library : null;
      }
      component = library;
    } else if (component == null) {
      return null;
    }
    library = component;
    i++;
  }
  return component;
}
function findComponent(libraryMap, componentName, npm) {
  if (!npm) {
    return accessLibrary(componentName);
  }
  // libraryName the key access to global
  // export { exportName } from xxx exportName === global.libraryName.exportName
  // export exportName from xxx   exportName === global.libraryName.default || global.libraryName
  // export { exportName as componentName } from package
  // if exportName == null exportName === componentName;
  // const componentName = exportName.subName, if exportName empty subName donot use
  var exportName = npm.exportName || npm.componentName || componentName;
  var libraryName = libraryMap[npm["package"]] || exportName;
  var library = accessLibrary(libraryName);
  var paths = npm.exportName && npm.subName ? npm.subName.split('.') : [];
  if (npm.destructuring) {
    paths.unshift(exportName);
  } else if ((0, _isEsModule.isESModule)(library)) {
    paths.unshift('default');
  }
  return getSubComponent(library, paths);
}

/**
 * 判断是否是一个混合组件，即 components 是一个对象，对象值是 React 组件
 * 示例：
 * {
 *    Button: ReactNode,
 *    Text: ReactNode,
 * }
 */
function isMixinComponent(components) {
  if (!(0, _isObject.isObject)(components)) {
    return false;
  }
  return Object.keys(components).some(function (componentName) {
    return (0, _isReact.isReactComponent)(components[componentName]);
  });
}
function buildComponents(libraryMap, componentsMap, createComponent) {
  var components = {};
  Object.keys(componentsMap).forEach(function (componentName) {
    var component = componentsMap[componentName];
    if (component && ((0, _checkTypes.isLowcodeProjectSchema)(component) || (0, _isComponentSchema.isComponentSchema)(component))) {
      if ((0, _isComponentSchema.isComponentSchema)(component)) {
        components[componentName] = createComponent({
          version: '',
          componentsMap: [],
          componentsTree: [component]
        });
      } else {
        components[componentName] = createComponent(component);
      }
    } else if ((0, _isReact.isReactComponent)(component)) {
      if (!(0, _isReact.acceptsRef)(component)) {
        component = (0, _isReact.wrapReactClass)(component);
      }
      components[componentName] = component;
    } else if (isMixinComponent(component)) {
      components[componentName] = component;
    } else {
      component = findComponent(libraryMap, componentName, component);
      if (component) {
        if (!(0, _isReact.acceptsRef)(component) && (0, _isReact.isReactComponent)(component)) {
          component = (0, _isReact.wrapReactClass)(component);
        }
        components[componentName] = component;
      }
    }
  });
  return components;
}
function getProjectUtils(librayMap, utilsMetadata) {
  var projectUtils = {};
  if (utilsMetadata) {
    utilsMetadata.forEach(function (meta) {
      var _meta$npm;
      if (librayMap[meta === null || meta === void 0 ? void 0 : (_meta$npm = meta.npm) === null || _meta$npm === void 0 ? void 0 : _meta$npm["package"]]) {
        var lib = accessLibrary(librayMap[meta === null || meta === void 0 ? void 0 : meta.npm["package"]]);
        if (lib !== null && lib !== void 0 && lib.destructuring) {
          Object.keys(lib).forEach(function (name) {
            if (name === 'destructuring') return;
            projectUtils[name] = lib[name];
          });
        } else if (meta.name) {
          projectUtils[meta.name] = lib;
        }
      }
    });
  }
  return projectUtils;
}