import { IPublicApiCommand, IPublicModelPluginContext, IPublicTypeCommand, IPublicTypeCommandHandlerArgs, IPublicTypeListCommand } from '@alilc/lowcode-types';
export interface ICommand extends Omit<IPublicApiCommand, 'registerCommand' | 'batchExecuteCommand'> {
    registerCommand(command: IPublicTypeCommand, options?: {
        commandScope?: string;
    }): void;
    batchExecuteCommand(commands: {
        name: string;
        args: IPublicTypeCommandHandlerArgs;
    }[], pluginContext?: IPublicModelPluginContext): void;
}
export interface ICommandOptions {
    commandScope?: string;
}
export declare class Command implements ICommand {
    private commands;
    private commandErrors;
    registerCommand(command: IPublicTypeCommand, options?: ICommandOptions): void;
    unregisterCommand(name: string): void;
    executeCommand(name: string, args: IPublicTypeCommandHandlerArgs): void;
    batchExecuteCommand(commands: {
        name: string;
        args: IPublicTypeCommandHandlerArgs;
    }[], pluginContext: IPublicModelPluginContext): void;
    listCommands(): IPublicTypeListCommand[];
    onCommandError(callback: (name: string, error: Error) => void): void;
}
