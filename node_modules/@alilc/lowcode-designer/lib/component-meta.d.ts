import { ReactElement } from 'react';
import { IPublicTypeComponentMetadata, IPublicTypeNpmInfo, IPublicTypeNodeData, IPublicTypeNodeSchema, IPublicTypeTransformedComponentMetadata, IPublicTypeNestingFilter, IPublicTypeI18nData, IPublicTypeFieldConfig, IPublicModelComponentMeta, IPublicTypeAdvanced, IPublicTypeDisposable, IPublicTypeLiveTextEditingConfig } from '@alilc/lowcode-types';
import { INode } from './document';
import { Designer } from './designer';
import { IconPage } from './icons';
export declare function ensureAList(list?: string | string[]): string[] | null;
export declare function buildFilter(rule?: string | string[] | RegExp | IPublicTypeNestingFilter): IPublicTypeNestingFilter;
export interface IComponentMeta extends IPublicModelComponentMeta<INode> {
    prototype?: any;
    liveTextEditing?: IPublicTypeLiveTextEditingConfig[];
    get rootSelector(): string | undefined;
    setMetadata(metadata: IPublicTypeComponentMetadata): void;
    onMetadataChange(fn: (args: any) => void): IPublicTypeDisposable;
}
export declare class ComponentMeta implements IComponentMeta {
    readonly designer: Designer;
    readonly isComponentMeta = true;
    private _npm?;
    private emitter;
    get npm(): any;
    set npm(_npm: any);
    private _componentName?;
    get componentName(): string;
    private _isContainer?;
    get isContainer(): boolean;
    get isMinimalRenderUnit(): boolean;
    private _isModal?;
    get isModal(): boolean;
    private _descriptor?;
    get descriptor(): string | undefined;
    private _rootSelector?;
    get rootSelector(): string | undefined;
    private _transformedMetadata?;
    get configure(): IPublicTypeFieldConfig[];
    private _liveTextEditing?;
    get liveTextEditing(): IPublicTypeLiveTextEditingConfig[];
    private _isTopFixed?;
    get isTopFixed(): boolean;
    private parentWhitelist?;
    private childWhitelist?;
    private _title?;
    private _isMinimalRenderUnit?;
    get title(): string | IPublicTypeI18nData | ReactElement;
    get icon(): import("@alilc/lowcode-types").IPublicTypeIconType | typeof IconPage;
    private _acceptable?;
    get acceptable(): boolean;
    get advanced(): IPublicTypeAdvanced;
    /**
     * @legacy compatiable for vision
     * @deprecated
     */
    prototype?: any;
    constructor(designer: Designer, metadata: IPublicTypeComponentMetadata);
    setNpm(info: IPublicTypeNpmInfo): void;
    private parseMetadata;
    refreshMetadata(): void;
    private transformMetadata;
    isRootComponent(includeBlock?: boolean): boolean;
    get availableActions(): import("@alilc/lowcode-types").IPublicTypeComponentAction[];
    setMetadata(metadata: IPublicTypeComponentMetadata): void;
    getMetadata(): IPublicTypeTransformedComponentMetadata;
    checkNestingUp(my: INode | IPublicTypeNodeData, parent: INode): boolean;
    checkNestingDown(my: INode, target: INode | IPublicTypeNodeSchema | IPublicTypeNodeSchema[]): boolean;
    onMetadataChange(fn: (args: any) => void): IPublicTypeDisposable;
}
export declare function isComponentMeta(obj: any): obj is ComponentMeta;
