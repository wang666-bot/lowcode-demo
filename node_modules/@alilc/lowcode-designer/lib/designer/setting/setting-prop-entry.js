"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.SettingPropEntry = void 0;
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _settingField = require("./setting-field");
var _dec, _class, _descriptor;
var SettingPropEntry = exports.SettingPropEntry = (_dec = _lowcodeEditorCore.obx.ref, (_class = /*#__PURE__*/function () {
  function SettingPropEntry(parent, name, type) {
    this.parent = parent;
    // === static properties ===
    this.editor = void 0;
    this.isSameComponent = void 0;
    this.isMultiple = void 0;
    this.isSingle = void 0;
    this.setters = void 0;
    this.nodes = void 0;
    this.componentMeta = void 0;
    this.designer = void 0;
    this.top = void 0;
    this.isGroup = void 0;
    this.type = void 0;
    this.id = (0, _lowcodeUtils.uniqueId)('entry');
    this.emitter = (0, _lowcodeEditorCore.createModuleEventBus)('SettingPropEntry');
    // ==== dynamic properties ====
    (0, _initializerDefineProperty2["default"])(this, "_name", _descriptor, this);
    this.extraProps = {};
    (0, _lowcodeEditorCore.makeObservable)(this);
    if (type == null) {
      var c = typeof name === 'string' ? name.slice(0, 1) : '';
      if (c === '#') {
        this.type = 'group';
      } else {
        this.type = 'field';
      }
    } else {
      this.type = type;
    }
    // initial self properties
    this._name = name;
    this.isGroup = this.type === 'group';

    // copy parent static properties
    this.editor = parent.editor;
    this.nodes = parent.nodes;
    this.setters = parent.setters;
    this.componentMeta = parent.componentMeta;
    this.isSameComponent = parent.isSameComponent;
    this.isMultiple = parent.isMultiple;
    this.isSingle = parent.isSingle;
    this.designer = parent.designer;
    this.top = parent.top;
  }
  var _proto = SettingPropEntry.prototype;
  _proto.getId = function getId() {
    return this.id;
  };
  _proto.setKey = function setKey(key) {
    if (this.type !== 'field') {
      return;
    }
    var propName = this.path.join('.');
    var l = this.nodes.length;
    while (l-- > 0) {
      this.nodes[l].getProp(propName, true).key = key;
    }
    this._name = key;
  };
  _proto.getKey = function getKey() {
    return this._name;
  };
  _proto.remove = function remove() {
    if (this.type !== 'field') {
      return;
    }
    var propName = this.path.join('.');
    var l = this.nodes.length;
    while (l-- > 0) {
      var _this$nodes$l$getProp;
      (_this$nodes$l$getProp = this.nodes[l].getProp(propName)) === null || _this$nodes$l$getProp === void 0 ? void 0 : _this$nodes$l$getProp.remove();
    }
  }

  // ====== 当前属性读写 =====

  /**
   * 判断当前属性值是否一致
   * -1 多种值
   * 0 无值
   * 1 类似值，比如数组长度一样
   * 2 单一植
   */
  /* istanbul ignore next */;
  /**
   * 获取当前属性值
   */
  _proto.getValue = function getValue() {
    var _this$name;
    var val;
    if (this.type === 'field' && (_this$name = this.name) !== null && _this$name !== void 0 && _this$name.toString()) {
      val = this.parent.getPropValue(this.name);
    }
    var getValue = this.extraProps.getValue;
    try {
      return getValue ? getValue(this.internalToShellField(), val) : val;
    } catch (e) {
      console.warn(e);
      return val;
    }
  }

  /**
   * 设置当前属性值
   */;
  _proto.setValue = function setValue(val, isHotValue, force, extraOptions) {
    var oldValue = this.getValue();
    if (this.type === 'field') {
      var _this$name2;
      ((_this$name2 = this.name) === null || _this$name2 === void 0 ? void 0 : _this$name2.toString()) && this.parent.setPropValue(this.name, val);
    }
    var setValue = this.extraProps.setValue;
    if (setValue && !(extraOptions !== null && extraOptions !== void 0 && extraOptions.disableMutator)) {
      try {
        setValue(this.internalToShellField(), val);
      } catch (e) {
        /* istanbul ignore next */
        console.warn(e);
      }
    }
    this.notifyValueChange(oldValue, val);
    // 如果 fromSetHotValue，那么在 setHotValue 中已经调用过 valueChange 了
    if (!(extraOptions !== null && extraOptions !== void 0 && extraOptions.fromSetHotValue)) {
      this.valueChange(extraOptions);
    }
  }

  /**
   * 清除已设置的值
   */;
  _proto.clearValue = function clearValue() {
    if (this.type === 'field') {
      var _this$name3;
      ((_this$name3 = this.name) === null || _this$name3 === void 0 ? void 0 : _this$name3.toString()) && this.parent.clearPropValue(this.name);
    }
    var setValue = this.extraProps.setValue;
    if (setValue) {
      try {
        setValue(this.internalToShellField(), undefined);
      } catch (e) {
        /* istanbul ignore next */
        console.warn(e);
      }
    }
  }

  /**
   * 获取子项
   */;
  _proto.get = function get(propName) {
    var path = this.path.concat(propName).join('.');
    return this.top.get(path);
  }

  /**
   * 设置子级属性值
   */;
  _proto.setPropValue = function setPropValue(propName, value) {
    var path = this.path.concat(propName).join('.');
    this.top.setPropValue(path, value);
  }

  /**
   * 清除已设置值
   */;
  _proto.clearPropValue = function clearPropValue(propName) {
    var path = this.path.concat(propName).join('.');
    this.top.clearPropValue(path);
  }

  /**
   * 获取子级属性值
   */;
  _proto.getPropValue = function getPropValue(propName) {
    return this.top.getPropValue(this.path.concat(propName).join('.'));
  }

  /**
   * 获取顶层附属属性值
   */;
  _proto.getExtraPropValue = function getExtraPropValue(propName) {
    return this.top.getExtraPropValue(propName);
  }

  /**
   * 设置顶层附属属性值
   */;
  _proto.setExtraPropValue = function setExtraPropValue(propName, value) {
    this.top.setExtraPropValue(propName, value);
  }

  // ======= compatibles for vision ======
  ;
  _proto.getNode = function getNode() {
    return this.nodes[0];
  };
  _proto.getName = function getName() {
    return this.path.join('.');
  };
  _proto.getProps = function getProps() {
    return this.top;
  }

  // add settingfield props
  ;
  _proto.onValueChange = function onValueChange(func) {
    var _this = this;
    this.emitter.on('valuechange', func);
    return function () {
      _this.emitter.removeListener('valuechange', func);
    };
  }

  /**
   * @deprecated
   */;
  _proto.valueChange = function valueChange(options) {
    if (options === void 0) {
      options = {};
    }
    this.emitter.emit('valuechange', options);
    if (this.parent && (0, _settingField.isSettingField)(this.parent)) {
      this.parent.valueChange(options);
    }
  };
  _proto.notifyValueChange = function notifyValueChange(oldValue, newValue) {
    this.editor.eventBus.emit(_lowcodeTypes.GlobalEvent.Node.Prop.Change, {
      node: this.getNode(),
      prop: this,
      oldValue: oldValue,
      newValue: newValue
    });
  };
  _proto.getDefaultValue = function getDefaultValue() {
    return this.extraProps.defaultValue;
  };
  _proto.isIgnore = function isIgnore() {
    return false;
  };
  _proto.getVariableValue = function getVariableValue() {
    var v = this.getValue();
    if ((0, _lowcodeUtils.isJSExpression)(v)) {
      return v.value;
    }
    return '';
  };
  _proto.setVariableValue = function setVariableValue(value) {
    var v = this.getValue();
    this.setValue({
      type: 'JSExpression',
      value: value,
      mock: (0, _lowcodeUtils.isJSExpression)(v) ? v.mock : v
    });
  };
  _proto.setUseVariable = function setUseVariable(flag) {
    if (this.isUseVariable() === flag) {
      return;
    }
    var v = this.getValue();
    if (this.isUseVariable()) {
      this.setValue(v.mock);
    } else {
      this.setValue({
        type: 'JSExpression',
        value: '',
        mock: v
      });
    }
  };
  _proto.isUseVariable = function isUseVariable() {
    return (0, _lowcodeUtils.isJSExpression)(this.getValue());
  };
  _proto.getMockOrValue = function getMockOrValue() {
    var v = this.getValue();
    if ((0, _lowcodeUtils.isJSExpression)(v)) {
      return v.mock;
    }
    return v;
  };
  _proto.internalToShellField = function internalToShellField() {
    return this.designer.shellModelFactory.createSettingField(this);
  };
  (0, _createClass2["default"])(SettingPropEntry, [{
    key: "name",
    get: function get() {
      return this._name;
    }
  }, {
    key: "path",
    get: function get() {
      var _this$name4;
      var path = this.parent.path.slice();
      if (this.type === 'field' && (_this$name4 = this.name) !== null && _this$name4 !== void 0 && _this$name4.toString()) {
        path.push(this.name);
      }
      return path;
    }
  }, {
    key: "valueState",
    get: function get() {
      var _this2 = this;
      return (0, _lowcodeEditorCore.runInAction)(function () {
        if (_this2.type !== 'field') {
          var getValue = _this2.extraProps.getValue;
          return getValue ? getValue(_this2.internalToShellField(), undefined) === undefined ? 0 : 1 : 0;
        }
        if (_this2.nodes.length === 1) {
          return 2;
        }
        var propName = _this2.path.join('.');
        var first = _this2.nodes[0].getProp(propName);
        var l = _this2.nodes.length;
        var state = 2;
        while (--l > 0) {
          var next = _this2.nodes[l].getProp(propName, false);
          var s = first.compare(next);
          if (s > 1) {
            return -1;
          }
          if (s === 1) {
            state = 1;
          }
        }
        if (state === 2 && first.isUnset()) {
          return 0;
        }
        return state;
      });
    }
  }, {
    key: "props",
    get: function get() {
      return this.top;
    }
  }, {
    key: "useVariable",
    get: function get() {
      return this.isUseVariable();
    }
  }]);
  return SettingPropEntry;
}(), (_descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_name", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "path", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "path"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "valueState", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "valueState"), _class.prototype)), _class));