import { ReactNode } from 'react';
import { IPublicTypeSetterType, IPublicTypeFieldExtraProps, IPublicTypeFieldConfig, IPublicTypeCustomView, IPublicTypeDisposable, IPublicModelSettingField, IBaseModelSettingField } from '@alilc/lowcode-types';
import type { IPublicTypeSetValueOptions } from '@alilc/lowcode-types';
import { Transducer } from './utils';
import { ISettingPropEntry, SettingPropEntry } from './setting-prop-entry';
import { ISettingTopEntry } from './setting-top-entry';
import { IComponentMeta, INode } from '@alilc/lowcode-designer';
export interface ISettingField extends ISettingPropEntry, Omit<IBaseModelSettingField<ISettingTopEntry, ISettingField, IComponentMeta, INode>, 'setValue' | 'key' | 'node'> {
    readonly isSettingField: true;
    readonly isRequired: boolean;
    readonly isGroup: boolean;
    extraProps: IPublicTypeFieldExtraProps;
    get items(): Array<ISettingField | IPublicTypeCustomView>;
    get title(): string | ReactNode | undefined;
    get setter(): IPublicTypeSetterType | null;
    get expanded(): boolean;
    get valueState(): number;
    setExpanded(value: boolean): void;
    purge(): void;
    setValue(val: any, isHotValue?: boolean, force?: boolean, extraOptions?: IPublicTypeSetValueOptions): void;
    clearValue(): void;
    valueChange(options: IPublicTypeSetValueOptions): void;
    createField(config: IPublicTypeFieldConfig): ISettingField;
    onEffect(action: () => void): IPublicTypeDisposable;
    internalToShellField(): IPublicModelSettingField;
}
export declare class SettingField extends SettingPropEntry implements ISettingField {
    private settingFieldCollector?;
    readonly isSettingField = true;
    readonly isRequired: boolean;
    readonly transducer: Transducer;
    private _config;
    private hotValue;
    parent: ISettingTopEntry | ISettingField;
    extraProps: IPublicTypeFieldExtraProps;
    private _title?;
    get title(): {};
    private _setter?;
    private _expanded;
    private _items;
    constructor(parent: ISettingTopEntry | ISettingField, config: IPublicTypeFieldConfig, settingFieldCollector?: (name: string | number, field: ISettingField) => void);
    get setter(): IPublicTypeSetterType | null;
    get expanded(): boolean;
    setExpanded(value: boolean): void;
    get items(): Array<ISettingField | IPublicTypeCustomView>;
    get config(): IPublicTypeFieldConfig;
    private initItems;
    private disposeItems;
    createField(config: IPublicTypeFieldConfig): ISettingField;
    purge(): void;
    getConfig<K extends keyof IPublicTypeFieldConfig>(configName?: K): IPublicTypeFieldConfig[K] | IPublicTypeFieldConfig;
    getItems(filter?: (item: ISettingField | IPublicTypeCustomView) => boolean): Array<ISettingField | IPublicTypeCustomView>;
    setValue(val: any, isHotValue?: boolean, force?: boolean, extraOptions?: IPublicTypeSetValueOptions): void;
    getHotValue(): any;
    setMiniAppDataSourceValue(data: any, options?: any): void;
    setHotValue(data: any, options?: IPublicTypeSetValueOptions): void;
    onEffect(action: () => void): IPublicTypeDisposable;
    internalToShellField(): IPublicModelSettingField;
}
/**
 * @deprecated use same function from '@alilc/lowcode-utils' instead
 */
export declare function isSettingField(obj: any): obj is ISettingField;
