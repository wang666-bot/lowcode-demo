"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.OffsetObserver = void 0;
exports.createOffsetObserver = createOffsetObserver;
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _ricShim = _interopRequireWildcard(require("ric-shim"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var OffsetObserver = exports.OffsetObserver = (_class = /*#__PURE__*/function () {
  function OffsetObserver(nodeInstance) {
    var _this = this;
    this.nodeInstance = nodeInstance;
    this.id = (0, _lowcodeUtils.uniqueId)('oobx');
    this.lastOffsetLeft = void 0;
    this.lastOffsetTop = void 0;
    this.lastOffsetHeight = void 0;
    this.lastOffsetWidth = void 0;
    (0, _initializerDefineProperty2["default"])(this, "_height", _descriptor, this);
    (0, _initializerDefineProperty2["default"])(this, "_width", _descriptor2, this);
    (0, _initializerDefineProperty2["default"])(this, "_left", _descriptor3, this);
    (0, _initializerDefineProperty2["default"])(this, "_top", _descriptor4, this);
    (0, _initializerDefineProperty2["default"])(this, "_right", _descriptor5, this);
    (0, _initializerDefineProperty2["default"])(this, "_bottom", _descriptor6, this);
    (0, _initializerDefineProperty2["default"])(this, "hasOffset", _descriptor7, this);
    this.pid = void 0;
    this.viewport = void 0;
    this.isRoot = void 0;
    this.node = void 0;
    this.compute = void 0;
    var node = nodeInstance.node,
      instance = nodeInstance.instance;
    this.node = node;
    var doc = node.document;
    var host = doc === null || doc === void 0 ? void 0 : doc.simulator;
    var focusNode = doc === null || doc === void 0 ? void 0 : doc.focusNode;
    this.isRoot = node.contains(focusNode);
    this.viewport = host === null || host === void 0 ? void 0 : host.viewport;
    (0, _lowcodeEditorCore.makeObservable)(this);
    if (this.isRoot) {
      this.hasOffset = true;
      return;
    }
    if (!instance) {
      return;
    }
    var pid;
    var compute = function compute() {
      if (pid !== _this.pid) {
        return;
      }
      var rect = host.computeComponentInstanceRect(instance, node.componentMeta.rootSelector);
      if (!rect) {
        _this.hasOffset = false;
      } else if (!_this.viewport.scrolling || !_this.hasOffset) {
        _this._height = rect.height;
        _this._width = rect.width;
        _this._left = rect.left;
        _this._top = rect.top;
        _this._right = rect.right;
        _this._bottom = rect.bottom;
        _this.hasOffset = true;
      }
      _this.pid = (0, _ricShim["default"])(compute);
      pid = _this.pid;
    };
    this.compute = compute;

    // try first
    compute();
    // try second, ensure the dom mounted
    this.pid = (0, _ricShim["default"])(compute);
    pid = this.pid;
  }
  var _proto = OffsetObserver.prototype;
  _proto.purge = function purge() {
    if (this.pid) {
      (0, _ricShim.cancelIdleCallback)(this.pid);
    }
    this.pid = undefined;
  };
  _proto.isPurged = function isPurged() {
    return this.pid == null;
  };
  (0, _createClass2["default"])(OffsetObserver, [{
    key: "height",
    get: function get() {
      return this.isRoot ? this.viewport.height : this._height * this.scale;
    }
  }, {
    key: "width",
    get: function get() {
      return this.isRoot ? this.viewport.width : this._width * this.scale;
    }
  }, {
    key: "top",
    get: function get() {
      return this.isRoot ? 0 : this._top * this.scale;
    }
  }, {
    key: "left",
    get: function get() {
      return this.isRoot ? 0 : this._left * this.scale;
    }
  }, {
    key: "bottom",
    get: function get() {
      return this.isRoot ? this.viewport.height : this._bottom * this.scale;
    }
  }, {
    key: "right",
    get: function get() {
      return this.isRoot ? this.viewport.width : this._right * this.scale;
    }
  }, {
    key: "offsetLeft",
    get: function get() {
      if (this.isRoot) {
        return this.viewport.scrollX * this.scale;
      }
      if (!this.viewport.scrolling || this.lastOffsetLeft == null) {
        this.lastOffsetLeft = this.left + this.viewport.scrollX * this.scale;
      }
      return this.lastOffsetLeft;
    }
  }, {
    key: "offsetTop",
    get: function get() {
      if (this.isRoot) {
        return this.viewport.scrollY * this.scale;
      }
      if (!this.viewport.scrolling || this.lastOffsetTop == null) {
        this.lastOffsetTop = this.top + this.viewport.scrollY * this.scale;
      }
      return this.lastOffsetTop;
    }
  }, {
    key: "offsetHeight",
    get: function get() {
      if (!this.viewport.scrolling || this.lastOffsetHeight == null) {
        this.lastOffsetHeight = this.isRoot ? this.viewport.height : this.height;
      }
      return this.lastOffsetHeight;
    }
  }, {
    key: "offsetWidth",
    get: function get() {
      if (!this.viewport.scrolling || this.lastOffsetWidth == null) {
        this.lastOffsetWidth = this.isRoot ? this.viewport.width : this.width;
      }
      return this.lastOffsetWidth;
    }
  }, {
    key: "scale",
    get: function get() {
      return this.viewport.scale;
    }
  }]);
  return OffsetObserver;
}(), (_descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_height", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor2 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_width", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor3 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_left", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor4 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_top", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor5 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_right", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor6 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_bottom", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "height", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "height"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "width", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "width"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "top", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "top"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "left", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "left"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "bottom", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "bottom"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "right", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "right"), _class.prototype), _descriptor7 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "hasOffset", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "offsetLeft", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "offsetLeft"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "offsetTop", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "offsetTop"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "offsetHeight", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "offsetHeight"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "offsetWidth", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "offsetWidth"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "scale", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "scale"), _class.prototype)), _class);
function createOffsetObserver(nodeInstance) {
  if (!nodeInstance.instance) {
    return null;
  }
  return new OffsetObserver(nodeInstance);
}