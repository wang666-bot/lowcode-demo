"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Designer = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _project = require("../project");
var _document = require("../document");
var _componentMeta = require("../component-meta");
var _scroller = require("./scroller");
var _dragon = require("./dragon");
var _activeTracker = require("./active-tracker");
var _detecting = require("./detecting");
var _location = require("./location");
var _offsetObserver = require("./offset-observer");
var _setting = require("./setting");
var _manager = require("../builtin-simulator/bem-tools/manager");
var _componentActions = require("../component-actions");
var _contextMenuActions = require("../context-menu-actions");
var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
var logger = new _lowcodeUtils.Logger({
  level: 'warn',
  bizName: 'designer'
});
var Designer = exports.Designer = (_dec = _lowcodeEditorCore.obx.ref, _dec2 = _lowcodeEditorCore.obx.ref, _dec3 = _lowcodeEditorCore.obx.ref, _dec4 = _lowcodeEditorCore.obx.ref, (_class = /*#__PURE__*/function () {
  function Designer(props) {
    var _this = this;
    this.dragon = void 0;
    this.viewName = void 0;
    this.componentActions = new _componentActions.ComponentActions();
    this.contextMenuActions = void 0;
    this.activeTracker = new _activeTracker.ActiveTracker();
    this.detecting = new _detecting.Detecting();
    this.project = void 0;
    this.editor = void 0;
    this.bemToolsManager = new _manager.BemToolsManager(this);
    this.shellModelFactory = void 0;
    this._dropLocation = void 0;
    this.propsReducers = new Map();
    this._lostComponentMetasMap = new Map();
    this.props = void 0;
    this.oobxList = [];
    this.selectionDispose = void 0;
    (0, _initializerDefineProperty2["default"])(this, "_componentMetasMap", _descriptor, this);
    (0, _initializerDefineProperty2["default"])(this, "_simulatorComponent", _descriptor2, this);
    (0, _initializerDefineProperty2["default"])(this, "_simulatorProps", _descriptor3, this);
    (0, _initializerDefineProperty2["default"])(this, "_suspensed", _descriptor4, this);
    this.setupSelection = function () {
      var _this$simulatorProps;
      if (_this.selectionDispose) {
        _this.selectionDispose();
        _this.selectionDispose = undefined;
      }
      var currentSelection = _this.currentSelection;
      // TODO: 避免选中 Page 组件，默认选中第一个子节点；新增规则 或 判断 Live 模式
      if (currentSelection && currentSelection.selected.length === 0 && ((_this$simulatorProps = _this.simulatorProps) === null || _this$simulatorProps === void 0 ? void 0 : _this$simulatorProps.designMode) === 'live') {
        var _this$currentDocument, _this$currentDocument2, _this$currentDocument3;
        var rootNodeChildrens = (_this$currentDocument = _this.currentDocument) === null || _this$currentDocument === void 0 ? void 0 : (_this$currentDocument2 = _this$currentDocument.getRoot()) === null || _this$currentDocument2 === void 0 ? void 0 : (_this$currentDocument3 = _this$currentDocument2.getChildren()) === null || _this$currentDocument3 === void 0 ? void 0 : _this$currentDocument3.children;
        if (rootNodeChildrens && rootNodeChildrens.length > 0) {
          currentSelection.select(rootNodeChildrens[0].id);
        }
      }
      _this.postEvent('selection.change', currentSelection);
      if (currentSelection) {
        _this.selectionDispose = currentSelection.onSelectionChange(function () {
          _this.postEvent('selection.change', currentSelection);
        });
      }
    };
    (0, _lowcodeEditorCore.makeObservable)(this);
    var editor = props.editor,
      viewName = props.viewName,
      shellModelFactory = props.shellModelFactory;
    this.editor = editor;
    this.viewName = viewName;
    this.shellModelFactory = shellModelFactory;
    this.setProps(props);
    this.project = new _project.Project(this, props.defaultSchema, viewName);
    this.dragon = new _dragon.Dragon(this);
    this.dragon.onDragstart(function (e) {
      var _this$props;
      _this.detecting.enable = false;
      var dragObject = e.dragObject;
      if ((0, _lowcodeUtils.isDragNodeObject)(dragObject)) {
        if (dragObject.nodes.length === 1) {
          if (dragObject.nodes[0].parent) {
            // ensure current selecting
            dragObject.nodes[0].select();
          } else {
            var _this$currentSelectio;
            (_this$currentSelectio = _this.currentSelection) === null || _this$currentSelectio === void 0 ? void 0 : _this$currentSelectio.clear();
          }
        }
      } else {
        var _this$currentSelectio2;
        (_this$currentSelectio2 = _this.currentSelection) === null || _this$currentSelectio2 === void 0 ? void 0 : _this$currentSelectio2.clear();
      }
      if ((_this$props = _this.props) !== null && _this$props !== void 0 && _this$props.onDragstart) {
        _this.props.onDragstart(e);
      }
      _this.postEvent('dragstart', e);
    });
    this.contextMenuActions = new _contextMenuActions.ContextMenuActions(this);
    this.dragon.onDrag(function (e) {
      var _this$props2;
      if ((_this$props2 = _this.props) !== null && _this$props2 !== void 0 && _this$props2.onDrag) {
        _this.props.onDrag(e);
      }
      _this.postEvent('drag', e);
    });
    this.dragon.onDragend(function (e) {
      var _this$props3;
      var dragObject = e.dragObject,
        copy = e.copy;
      logger.debug('onDragend: dragObject ', dragObject, ' copy ', copy);
      var loc = _this._dropLocation;
      if (loc) {
        if ((0, _lowcodeUtils.isLocationChildrenDetail)(loc.detail) && loc.detail.valid !== false) {
          var _nodes;
          if ((0, _lowcodeUtils.isDragNodeObject)(dragObject)) {
            _nodes = (0, _document.insertChildren)(loc.target, [].concat(dragObject.nodes), loc.detail.index, copy);
          } else if ((0, _lowcodeUtils.isDragNodeDataObject)(dragObject)) {
            // process nodeData
            var nodeData = Array.isArray(dragObject.data) ? dragObject.data : [dragObject.data];
            var isNotNodeSchema = nodeData.find(function (item) {
              return !(0, _lowcodeUtils.isNodeSchema)(item);
            });
            if (isNotNodeSchema) {
              return;
            }
            _nodes = (0, _document.insertChildren)(loc.target, nodeData, loc.detail.index);
          }
          if (_nodes) {
            var _loc$document;
            (_loc$document = loc.document) === null || _loc$document === void 0 ? void 0 : _loc$document.selection.selectAll(_nodes.map(function (o) {
              return o.id;
            }));
            setTimeout(function () {
              return _this.activeTracker.track(_nodes[0]);
            }, 10);
          }
        }
      }
      if ((_this$props3 = _this.props) !== null && _this$props3 !== void 0 && _this$props3.onDragend) {
        _this.props.onDragend(e, loc);
      }
      _this.postEvent('dragend', e, loc);
      _this.detecting.enable = true;
    });
    this.activeTracker.onChange(function (_ref) {
      var _node$document, _node$document$simula;
      var node = _ref.node,
        detail = _ref.detail;
      (_node$document = node.document) === null || _node$document === void 0 ? void 0 : (_node$document$simula = _node$document.simulator) === null || _node$document$simula === void 0 ? void 0 : _node$document$simula.scrollToNode(node, detail);
    });
    var historyDispose;
    var setupHistory = function setupHistory() {
      if (historyDispose) {
        historyDispose();
        historyDispose = undefined;
      }
      _this.postEvent('history.change', _this.currentHistory);
      if (_this.currentHistory) {
        var currentHistory = _this.currentHistory;
        historyDispose = currentHistory.onStateChange(function () {
          _this.postEvent('history.change', currentHistory);
        });
      }
    };
    this.project.onCurrentDocumentChange(function () {
      _this.postEvent('current-document.change', _this.currentDocument);
      _this.postEvent('selection.change', _this.currentSelection);
      _this.postEvent('history.change', _this.currentHistory);
      _this.setupSelection();
      setupHistory();
    });
    this.postEvent('init', this);
    this.setupSelection();
    setupHistory();
  }
  var _proto = Designer.prototype;
  _proto.postEvent = function postEvent(event) {
    var _this$editor$eventBus;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    (_this$editor$eventBus = this.editor.eventBus).emit.apply(_this$editor$eventBus, ["designer." + event].concat(args));
  };
  /**
   * 创建插入位置，考虑放到 dragon 中
   */
  _proto.createLocation = function createLocation(locationData) {
    var loc = new _location.DropLocation(locationData);
    if (this._dropLocation && this._dropLocation.document && this._dropLocation.document !== loc.document) {
      this._dropLocation.document.dropLocation = null;
    }
    this._dropLocation = loc;
    this.postEvent('dropLocation.change', loc);
    if (loc.document) {
      loc.document.dropLocation = loc;
    }
    this.activeTracker.track({
      node: loc.target,
      detail: loc.detail
    });
    return loc;
  }

  /**
   * 清除插入位置
   */;
  _proto.clearLocation = function clearLocation() {
    if (this._dropLocation && this._dropLocation.document) {
      this._dropLocation.document.dropLocation = null;
    }
    this.postEvent('dropLocation.change', undefined);
    this._dropLocation = undefined;
  };
  _proto.createScroller = function createScroller(scrollable) {
    return new _scroller.Scroller(scrollable);
  };
  _proto.createOffsetObserver = function createOffsetObserver(nodeInstance) {
    var oobx = (0, _offsetObserver.createOffsetObserver)(nodeInstance);
    this.clearOobxList();
    if (oobx) {
      this.oobxList.push(oobx);
    }
    return oobx;
  };
  _proto.clearOobxList = function clearOobxList(force) {
    var l = this.oobxList.length;
    if (l > 20 || force) {
      while (l-- > 0) {
        if (this.oobxList[l].isPurged()) {
          this.oobxList.splice(l, 1);
        }
      }
    }
  };
  _proto.touchOffsetObserver = function touchOffsetObserver() {
    this.clearOobxList(true);
    this.oobxList.forEach(function (item) {
      return item.compute();
    });
  };
  _proto.createSettingEntry = function createSettingEntry(nodes) {
    return new _setting.SettingTopEntry(this.editor, nodes);
  }

  /**
   * 获得合适的插入位置
   * @deprecated
   */;
  _proto.getSuitableInsertion = function getSuitableInsertion(insertNode) {
    var activeDoc = this.project.currentDocument;
    if (!activeDoc) {
      return null;
    }
    if (Array.isArray(insertNode) && (0, _lowcodeUtils.isNodeSchema)(insertNode[0]) && this.getComponentMeta(insertNode[0].componentName).isModal) {
      return {
        target: activeDoc.rootNode
      };
    }
    var focusNode = activeDoc.focusNode;
    var nodes = activeDoc.selection.getNodes();
    var refNode = nodes.find(function (item) {
      return focusNode.contains(item);
    });
    var target;
    var index;
    if (!refNode || refNode === focusNode) {
      target = focusNode;
    } else if (refNode.componentMeta.isContainer) {
      target = refNode;
    } else {
      // FIXME!!, parent maybe null
      target = refNode.parent;
      index = (refNode.index || 0) + 1;
    }
    if (target && insertNode && !target.componentMeta.checkNestingDown(target, insertNode)) {
      return null;
    }
    return {
      target: target,
      index: index
    };
  };
  _proto.setProps = function setProps(nextProps) {
    var props = this.props ? (0, _extends2["default"])({}, this.props, nextProps) : nextProps;
    if (this.props) {
      // check hotkeys
      // TODO:
      // check simulatorConfig
      if (props.simulatorComponent !== this.props.simulatorComponent) {
        this._simulatorComponent = props.simulatorComponent;
      }
      if (props.simulatorProps !== this.props.simulatorProps) {
        var _props$simulatorProps, _this$props$simulator;
        this._simulatorProps = props.simulatorProps;
        // 重新 setupSelection
        if (((_props$simulatorProps = props.simulatorProps) === null || _props$simulatorProps === void 0 ? void 0 : _props$simulatorProps.designMode) !== ((_this$props$simulator = this.props.simulatorProps) === null || _this$props$simulator === void 0 ? void 0 : _this$props$simulator.designMode)) {
          this.setupSelection();
        }
      }
      if (props.suspensed !== this.props.suspensed && props.suspensed != null) {
        this.suspensed = props.suspensed;
      }
      if (props.componentMetadatas !== this.props.componentMetadatas && props.componentMetadatas != null) {
        this.buildComponentMetasMap(props.componentMetadatas);
      }
    } else {
      // init hotkeys
      // todo:
      // init simulatorConfig
      if (props.simulatorComponent) {
        this._simulatorComponent = props.simulatorComponent;
      }
      if (props.simulatorProps) {
        this._simulatorProps = props.simulatorProps;
      }
      // init suspensed
      if (props.suspensed != null) {
        this.suspensed = props.suspensed;
      }
      if (props.componentMetadatas != null) {
        this.buildComponentMetasMap(props.componentMetadatas);
      }
    }
    this.props = props;
  };
  _proto.loadIncrementalAssets = /*#__PURE__*/function () {
    var _loadIncrementalAssets = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(incrementalAssets) {
      var components, packages, _this$project$simulat, assets, newAssets;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            components = incrementalAssets.components, packages = incrementalAssets.packages;
            components && this.buildComponentMetasMap(components);
            if (!packages) {
              _context.next = 5;
              break;
            }
            _context.next = 5;
            return (_this$project$simulat = this.project.simulator) === null || _this$project$simulat === void 0 ? void 0 : _this$project$simulat.setupComponents(packages);
          case 5:
            if (!components) {
              _context.next = 10;
              break;
            }
            // 合并 assets
            assets = this.editor.get('assets') || {};
            newAssets = (0, _lowcodeUtils.mergeAssets)(assets, incrementalAssets); // 对于 assets 存在需要二次网络下载的过程，必须 await 等待结束之后，再进行事件触发
            _context.next = 10;
            return this.editor.set('assets', newAssets);
          case 10:
            // TODO: 因为涉及修改 prototype.view，之后在 renderer 里修改了 vc 的 view 获取逻辑后，可删除
            this.refreshComponentMetasMap();
            // 完成加载增量资源后发送事件，方便插件监听并处理相关逻辑
            this.editor.eventBus.emit('designer.incrementalAssetsReady');
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function loadIncrementalAssets(_x) {
      return _loadIncrementalAssets.apply(this, arguments);
    }
    return loadIncrementalAssets;
  }()
  /**
   * 刷新 componentMetasMap，可间接触发模拟器里的 buildComponents
   */
  ;
  _proto.refreshComponentMetasMap = function refreshComponentMetasMap() {
    this._componentMetasMap = new Map(this._componentMetasMap);
  };
  _proto.get = function get(key) {
    var _this$props4;
    return (_this$props4 = this.props) === null || _this$props4 === void 0 ? void 0 : _this$props4[key];
  };
  _proto.setSchema = function setSchema(schema) {
    this.project.load(schema);
  };
  _proto.buildComponentMetasMap = function buildComponentMetasMap(metas) {
    var _this2 = this;
    metas.forEach(function (data) {
      return _this2.createComponentMeta(data);
    });
  };
  _proto.createComponentMeta = function createComponentMeta(data) {
    var key = data.componentName;
    if (!key) {
      return null;
    }
    var meta = this._componentMetasMap.get(key);
    if (meta) {
      meta.setMetadata(data);
      this._componentMetasMap.set(key, meta);
    } else {
      meta = this._lostComponentMetasMap.get(key);
      if (meta) {
        meta.setMetadata(data);
        this._lostComponentMetasMap["delete"](key);
      } else {
        meta = new _componentMeta.ComponentMeta(this, data);
      }
      this._componentMetasMap.set(key, meta);
    }
    return meta;
  };
  _proto.getGlobalComponentActions = function getGlobalComponentActions() {
    var _this$props5;
    return ((_this$props5 = this.props) === null || _this$props5 === void 0 ? void 0 : _this$props5.globalComponentActions) || null;
  };
  _proto.getComponentMeta = function getComponentMeta(componentName, generateMetadata) {
    if (this._componentMetasMap.has(componentName)) {
      return this._componentMetasMap.get(componentName);
    }
    if (this._lostComponentMetasMap.has(componentName)) {
      return this._lostComponentMetasMap.get(componentName);
    }
    var meta = new _componentMeta.ComponentMeta(this, (0, _extends2["default"])({
      componentName: componentName
    }, generateMetadata ? generateMetadata() : null));
    this._lostComponentMetasMap.set(componentName, meta);
    return meta;
  };
  _proto.getComponentMetasMap = function getComponentMetasMap() {
    return this._componentMetasMap;
  };
  _proto.transformProps = function transformProps(props, node, stage) {
    if (Array.isArray(props)) {
      // current not support, make this future
      return props;
    }
    var reducers = this.propsReducers.get(stage);
    if (!reducers) {
      return props;
    }
    return reducers.reduce(function (xprops, reducer) {
      try {
        return reducer(xprops, node.internalToShellNode(), {
          stage: stage
        });
      } catch (e) {
        // todo: add log
        console.warn(e);
        return xprops;
      }
    }, props);
  };
  _proto.addPropsReducer = function addPropsReducer(reducer, stage) {
    if (!reducer) {
      logger.error('reducer is not available');
      return;
    }
    var reducers = this.propsReducers.get(stage);
    if (reducers) {
      reducers.push(reducer);
    } else {
      this.propsReducers.set(stage, [reducer]);
    }
  };
  _proto.autorun = function autorun(effect, options) {
    return (0, _lowcodeEditorCore.autorun)(effect, options);
  };
  _proto.purge = function purge() {
    // TODO:
  };
  (0, _createClass2["default"])(Designer, [{
    key: "currentDocument",
    get: function get() {
      return this.project.currentDocument;
    }
  }, {
    key: "currentHistory",
    get: function get() {
      var _this$currentDocument4;
      return (_this$currentDocument4 = this.currentDocument) === null || _this$currentDocument4 === void 0 ? void 0 : _this$currentDocument4.history;
    }
  }, {
    key: "currentSelection",
    get: function get() {
      var _this$currentDocument5;
      return (_this$currentDocument5 = this.currentDocument) === null || _this$currentDocument5 === void 0 ? void 0 : _this$currentDocument5.selection;
    }
  }, {
    key: "dropLocation",
    get: function get() {
      return this._dropLocation;
    }
  }, {
    key: "simulatorComponent",
    get: function get() {
      return this._simulatorComponent;
    }
  }, {
    key: "simulatorProps",
    get: function get() {
      if (typeof this._simulatorProps === 'function') {
        return this._simulatorProps(this.project);
      }
      return this._simulatorProps || {};
    }

    /**
     * 提供给模拟器的参数
     */
  }, {
    key: "projectSimulatorProps",
    get: function get() {
      var _this3 = this;
      return (0, _extends2["default"])({}, this.simulatorProps, {
        project: this.project,
        designer: this,
        onMount: function onMount(simulator) {
          _this3.project.mountSimulator(simulator);
          _this3.editor.set('simulator', simulator);
        }
      });
    }
  }, {
    key: "suspensed",
    get: function get() {
      return this._suspensed;
    },
    set: function set(flag) {
      this._suspensed = flag;
      // Todo afterwards...
      if (flag) {
        // this.project.suspensed = true?
      }
    }
  }, {
    key: "schema",
    get: function get() {
      return this.project.getSchema();
    }
  }, {
    key: "componentsMap",
    get: function get() {
      var maps = {};
      var designer = this;
      designer._componentMetasMap.forEach(function (config, key) {
        var metaData = config.getMetadata();
        if (metaData.devMode === 'lowCode') {
          maps[key] = metaData.schema;
        } else {
          var view = config.advanced.view;
          if (view) {
            maps[key] = view;
          } else {
            maps[key] = config.npm;
          }
        }
      });
      return maps;
    }
  }]);
  return Designer;
}(), (_descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_componentMetasMap", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return new Map();
  }
}), _descriptor2 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_simulatorComponent", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_simulatorProps", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_suspensed", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "simulatorComponent", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "simulatorComponent"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "simulatorProps", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "simulatorProps"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "projectSimulatorProps", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "projectSimulatorProps"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "componentsMap", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "componentsMap"), _class.prototype)), _class));