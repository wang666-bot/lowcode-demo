"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.BuiltinSimulatorHost = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _viewport = _interopRequireDefault(require("./viewport"));
var _createSimulator = require("./create-simulator");
var _document = require("../document");
var _resourceConsumer = _interopRequireDefault(require("./resource-consumer"));
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _designer = require("../designer");
var _parseMetadata = require("./utils/parse-metadata");
var _clickable = require("./utils/clickable");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _clipboard = require("../designer/clipboard");
var _liveEditing = require("./live-editing/live-editing");
var _misc = require("../utils/misc");
var _lodash = require("lodash");
var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var logger = new _lowcodeUtils.Logger({
  level: 'warn',
  bizName: 'designer'
});
var defaultSimulatorUrl = function () {
  var publicPath = (0, _lowcodeEditorCore.getPublicPath)();
  var urls;
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  var _ref = /^(.+?)(\/js)?\/?$/.exec(publicPath) || [],
    _ = _ref[0],
    _ref$ = _ref[1],
    prefix = _ref$ === void 0 ? '' : _ref$,
    dev = _ref[2];
  if (dev) {
    urls = [prefix + "/css/react-simulator-renderer.css", prefix + "/js/react-simulator-renderer.js"];
  } else if (process.env.NODE_ENV === 'production') {
    urls = [prefix + "/react-simulator-renderer.css", prefix + "/react-simulator-renderer.js"];
  } else {
    urls = [prefix + "/react-simulator-renderer.css", prefix + "/react-simulator-renderer.js"];
  }
  return urls;
}();
var defaultEnvironment = [
// https://g.alicdn.com/mylib/??react/16.11.0/umd/react.production.min.js,react-dom/16.8.6/umd/react-dom.production.min.js,prop-types/15.7.2/prop-types.min.js
(0, _lowcodeUtils.assetItem)(_lowcodeUtils.AssetType.JSText, 'window.React=parent.React;window.ReactDOM=parent.ReactDOM;window.__is_simulator_env__=true;', undefined, 'react'), (0, _lowcodeUtils.assetItem)(_lowcodeUtils.AssetType.JSText, 'window.PropTypes=parent.PropTypes;React.PropTypes=parent.PropTypes; window.__REACT_DEVTOOLS_GLOBAL_HOOK__ = window.parent.__REACT_DEVTOOLS_GLOBAL_HOOK__;')];
var BuiltinSimulatorHost = exports.BuiltinSimulatorHost = (_dec = _lowcodeEditorCore.obx.ref, _dec2 = _lowcodeEditorCore.obx.ref, _dec3 = _lowcodeEditorCore.obx.ref, _dec4 = _lowcodeEditorCore.obx.ref, (_class = /*#__PURE__*/function () {
  function BuiltinSimulatorHost(project, designer) {
    var _this = this;
    this.isSimulator = true;
    this.project = void 0;
    this.designer = void 0;
    this.viewport = new _viewport["default"]();
    this.scroller = void 0;
    this.emitter = (0, _lowcodeEditorCore.createModuleEventBus)('BuiltinSimulatorHost');
    this.componentsConsumer = void 0;
    this.injectionConsumer = void 0;
    this.i18nConsumer = void 0;
    /**
     * 是否为画布自动渲染
     */
    this.autoRender = true;
    (0, _initializerDefineProperty2["default"])(this, "_props", _descriptor, this);
    (0, _initializerDefineProperty2["default"])(this, "_contentWindow", _descriptor2, this);
    (0, _initializerDefineProperty2["default"])(this, "_contentDocument", _descriptor3, this);
    (0, _initializerDefineProperty2["default"])(this, "_appHelper", _descriptor4, this);
    this._renderer = void 0;
    this.asyncLibraryMap = {};
    this.libraryMap = {};
    this._iframe = void 0;
    this.disableHovering = void 0;
    this.disableDetecting = void 0;
    this.liveEditing = new _liveEditing.LiveEditing();
    (0, _initializerDefineProperty2["default"])(this, "instancesMap", _descriptor5, this);
    this.tryScrollAgain = null;
    this._sensorAvailable = true;
    this.sensing = false;
    (0, _lowcodeEditorCore.makeObservable)(this);
    this.project = project;
    this.designer = designer;
    this.scroller = this.designer.createScroller(this.viewport);
    this.autoRender = !_lowcodeEditorCore.engineConfig.get('disableAutoRender', false);
    this._appHelper = _lowcodeEditorCore.engineConfig.get('appHelper');
    this.componentsConsumer = new _resourceConsumer["default"](function () {
      return _this.componentsAsset;
    });
    this.injectionConsumer = new _resourceConsumer["default"](function () {
      return {
        appHelper: _this._appHelper
      };
    });
    _lowcodeEditorCore.engineConfig.onGot('appHelper', function (data) {
      // appHelper被config.set修改后触发injectionConsumer.consume回调
      _this._appHelper = data;
    });
    this.i18nConsumer = new _resourceConsumer["default"](function () {
      return _this.project.i18n;
    });
    _lowcodeUtils.transactionManager.onStartTransaction(function () {
      _this.stopAutoRepaintNode();
    }, _lowcodeTypes.IPublicEnumTransitionType.REPAINT);
    // 防止批量调用 transaction 时，执行多次 rerender
    var rerender = (0, _lodash.debounce)(this.rerender.bind(this), 28);
    _lowcodeUtils.transactionManager.onEndTransaction(function () {
      rerender();
      _this.enableAutoRepaintNode();
    }, _lowcodeTypes.IPublicEnumTransitionType.REPAINT);
  }
  var _proto = BuiltinSimulatorHost.prototype;
  _proto.stopAutoRepaintNode = function stopAutoRepaintNode() {
    var _this$renderer;
    (_this$renderer = this.renderer) === null || _this$renderer === void 0 ? void 0 : _this$renderer.stopAutoRepaintNode();
  };
  _proto.enableAutoRepaintNode = function enableAutoRepaintNode() {
    var _this$renderer2;
    (_this$renderer2 = this.renderer) === null || _this$renderer2 === void 0 ? void 0 : _this$renderer2.enableAutoRepaintNode();
  }

  /**
   * @see ISimulator
   */;
  _proto.setProps = function setProps(props) {
    this._props = props;
  };
  _proto.set = function set(key, value) {
    var _extends2;
    this._props = (0, _extends3["default"])({}, this._props, (_extends2 = {}, _extends2[key] = value, _extends2));
  };
  _proto.get = function get(key) {
    if (key === 'device') {
      var _this$designer, _this$designer$editor, _this$designer$editor2, _this$designer$editor3;
      return ((_this$designer = this.designer) === null || _this$designer === void 0 ? void 0 : (_this$designer$editor = _this$designer.editor) === null || _this$designer$editor === void 0 ? void 0 : (_this$designer$editor2 = _this$designer$editor.get('deviceMapper')) === null || _this$designer$editor2 === void 0 ? void 0 : (_this$designer$editor3 = _this$designer$editor2.transform) === null || _this$designer$editor3 === void 0 ? void 0 : _this$designer$editor3.call(_this$designer$editor2, this._props.device)) || this._props.device;
    }
    return this._props[key];
  }

  /**
   * 有 Renderer 进程连接进来，设置同步机制
   */;
  _proto.connect = function connect(renderer, effect, options) {
    this._renderer = renderer;
    return (0, _lowcodeEditorCore.autorun)(effect, options);
  };
  _proto.reaction = function reaction(expression, effect, opts) {
    return (0, _lowcodeEditorCore.reaction)(expression, effect, opts);
  };
  _proto.autorun = function autorun(effect, options) {
    return (0, _lowcodeEditorCore.autorun)(effect, options);
  };
  _proto.purge = function purge() {
    // todo
  };
  _proto.mountViewport = function mountViewport(viewport) {
    this.viewport.mount(viewport);
  }

  /**
   * {
   *   "title":"BizCharts",
   *   "package":"bizcharts",
   *   "exportName":"bizcharts",
   *   "version":"4.0.14",
   *   "urls":[
   *      "https://g.alicdn.com/code/lib/bizcharts/4.0.14/BizCharts.js"
   *   ],
   *   "library":"BizCharts"
   * }
   * package：String 资源 npm 包名
   * exportName：String umd 包导出名字，用于适配部分物料包 define name 不一致的问题，例如把 BizCharts 改成 bizcharts，用来兼容物料用 define 声明的 bizcharts
   * version：String 版本号
   * urls：Array 资源 cdn 地址，必须是 umd 类型，可以是.js 或者.css
   * library：String umd 包直接导出的 name
   */;
  _proto.buildLibrary = function buildLibrary(library) {
    var _this2 = this;
    var _library = library || this.get('library');
    var libraryAsset = [];
    var libraryExportList = [];
    var functionCallLibraryExportList = [];
    if (_library && _library.length) {
      _library.forEach(function (item) {
        var exportMode = item.exportMode,
          exportSourceLibrary = item.exportSourceLibrary;
        _this2.libraryMap[item["package"]] = item.library;
        if (item.async) {
          _this2.asyncLibraryMap[item["package"]] = item;
        }
        if (item.exportName && item.library) {
          libraryExportList.push("Object.defineProperty(window,'" + item.exportName + "',{get:()=>window." + item.library + "});");
        }
        if (exportMode === 'functionCall' && exportSourceLibrary) {
          functionCallLibraryExportList.push("window[\"" + item.library + "\"] = window[\"" + exportSourceLibrary + "\"](\"" + item.library + "\", \"" + item["package"] + "\");");
        }
        if (item.editUrls) {
          libraryAsset.push(item.editUrls);
        } else if (item.urls) {
          libraryAsset.push(item.urls);
        }
      });
    }
    libraryAsset.unshift((0, _lowcodeUtils.assetItem)(_lowcodeUtils.AssetType.JSText, libraryExportList.join('')));
    libraryAsset.push((0, _lowcodeUtils.assetItem)(_lowcodeUtils.AssetType.JSText, functionCallLibraryExportList.join('')));
    return libraryAsset;
  };
  _proto.rerender = function rerender() {
    var _this$renderer3, _this$renderer3$reren;
    this.designer.refreshComponentMetasMap();
    (_this$renderer3 = this.renderer) === null || _this$renderer3 === void 0 ? void 0 : (_this$renderer3$reren = _this$renderer3.rerender) === null || _this$renderer3$reren === void 0 ? void 0 : _this$renderer3$reren.call(_this$renderer3);
  };
  _proto.mountContentFrame = /*#__PURE__*/function () {
    var _mountContentFrame = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(iframe) {
      var _this3 = this;
      var libraryAsset, vendors, renderer, hotkey, innerSkeleton;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(!iframe || this._iframe === iframe)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            this._iframe = iframe;
            this._contentWindow = iframe.contentWindow;
            this._contentDocument = this._contentWindow.document;
            libraryAsset = this.buildLibrary();
            if (this.renderEnv === 'rax') {
              logger.error('After LowcodeEngine v1.3.0, Rax is no longer supported.');
            }
            vendors = [
            // required & use once
            (0, _lowcodeUtils.assetBundle)(this.get('environment') || defaultEnvironment, _lowcodeUtils.AssetLevel.Environment),
            // required & use once
            (0, _lowcodeUtils.assetBundle)(this.get('extraEnvironment'), _lowcodeUtils.AssetLevel.Environment),
            // required & use once
            (0, _lowcodeUtils.assetBundle)(libraryAsset, _lowcodeUtils.AssetLevel.Library),
            // required & TODO: think of update
            (0, _lowcodeUtils.assetBundle)(this.theme, _lowcodeUtils.AssetLevel.Theme),
            // required & use once
            (0, _lowcodeUtils.assetBundle)(this.get('simulatorUrl') || defaultSimulatorUrl, _lowcodeUtils.AssetLevel.Runtime)]; // wait 准备 iframe 内容、依赖库注入
            _context.next = 10;
            return (0, _createSimulator.createSimulator)(this, iframe, vendors);
          case 10:
            renderer = _context.sent;
            _context.next = 13;
            return this.componentsConsumer.waitFirstConsume();
          case 13:
            _context.next = 15;
            return this.injectionConsumer.waitFirstConsume();
          case 15:
            if (!(Object.keys(this.asyncLibraryMap).length > 0)) {
              _context.next = 19;
              break;
            }
            _context.next = 18;
            return renderer.loadAsyncLibrary(this.asyncLibraryMap);
          case 18:
            Object.keys(this.asyncLibraryMap).forEach(function (key) {
              delete _this3.asyncLibraryMap[key];
            });
          case 19:
            // step 5 ready & render
            renderer.run();

            // init events, overlays
            this.viewport.setScrollTarget(this._contentWindow);
            this.setupEvents();

            // bind hotkey & clipboard
            hotkey = this.designer.editor.get('innerHotkey');
            hotkey.mount(this._contentWindow);
            innerSkeleton = this.designer.editor.get('skeleton');
            innerSkeleton.focusTracker.mount(this._contentWindow);
            _clipboard.clipboard.injectCopyPaster(this._contentDocument);

            // TODO: dispose the bindings
          case 27:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function mountContentFrame(_x) {
      return _mountContentFrame.apply(this, arguments);
    }
    return mountContentFrame;
  }();
  _proto.setupComponents = /*#__PURE__*/function () {
    var _setupComponents = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(library) {
      var _this$renderer4,
        _this4 = this;
      var libraryAsset, _this$renderer5;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            libraryAsset = this.buildLibrary(library);
            _context2.next = 3;
            return (_this$renderer4 = this.renderer) === null || _this$renderer4 === void 0 ? void 0 : _this$renderer4.load(libraryAsset);
          case 3:
            if (!(Object.keys(this.asyncLibraryMap).length > 0)) {
              _context2.next = 7;
              break;
            }
            _context2.next = 6;
            return (_this$renderer5 = this.renderer) === null || _this$renderer5 === void 0 ? void 0 : _this$renderer5.loadAsyncLibrary(this.asyncLibraryMap);
          case 6:
            Object.keys(this.asyncLibraryMap).forEach(function (key) {
              delete _this4.asyncLibraryMap[key];
            });
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function setupComponents(_x2) {
      return _setupComponents.apply(this, arguments);
    }
    return setupComponents;
  }();
  _proto.setupEvents = function setupEvents() {
    // TODO: Thinkof move events control to simulator renderer
    //       just listen special callback
    // because iframe maybe reload
    this.setupDragAndClick();
    this.setupDetecting();
    this.setupLiveEditing();
    this.setupContextMenu();
  };
  _proto.postEvent = function postEvent(eventName) {
    var _this$emitter;
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }
    (_this$emitter = this.emitter).emit.apply(_this$emitter, [eventName].concat(data));
  };
  _proto.setupDragAndClick = function setupDragAndClick() {
    var _this5 = this;
    var designer = this.designer;
    var doc = this.contentDocument;

    // TODO: think of lock when edit a node
    // 事件路由
    doc.addEventListener('mousedown', function (downEvent) {
      var _downEvent$target, _node$componentMeta$a;
      // fix for popups close logic
      document.dispatchEvent(new Event('mousedown'));
      var documentModel = _this5.project.currentDocument;
      if (_this5.liveEditing.editing || !documentModel) {
        return;
      }
      var selection = documentModel.selection;
      var isMulti = false;
      if (_this5.designMode === 'design') {
        isMulti = downEvent.metaKey || downEvent.ctrlKey;
      } else if (!downEvent.metaKey) {
        return;
      }
      // FIXME: dirty fix remove label-for fro liveEditing
      (_downEvent$target = downEvent.target) === null || _downEvent$target === void 0 ? void 0 : _downEvent$target.removeAttribute('for');
      var nodeInst = _this5.getNodeInstanceFromElement(downEvent.target);
      var focusNode = documentModel.focusNode;
      var node = (0, _clickable.getClosestClickableNode)((nodeInst === null || nodeInst === void 0 ? void 0 : nodeInst.node) || focusNode, downEvent);
      // 如果找不到可点击的节点，直接返回
      if (!node) {
        return;
      }
      // 触发 onMouseDownHook 钩子
      var onMouseDownHook = (_node$componentMeta$a = node.componentMeta.advanced.callbacks) === null || _node$componentMeta$a === void 0 ? void 0 : _node$componentMeta$a.onMouseDownHook;
      if (onMouseDownHook) {
        onMouseDownHook(downEvent, node.internalToShellNode());
      }
      var rglNode = node === null || node === void 0 ? void 0 : node.getParent();
      var isRGLNode = rglNode === null || rglNode === void 0 ? void 0 : rglNode.isRGLContainer;
      if (isRGLNode) {
        var _downEvent$target2;
        // 如果拖拽的是磁铁块的右下角 handle，则直接跳过
        if ((_downEvent$target2 = downEvent.target) !== null && _downEvent$target2 !== void 0 && _downEvent$target2.classList.contains('react-resizable-handle')) return;
        // 禁止多选
        isMulti = false;
        designer.dragon.emitter.emit('rgl.switch', {
          action: 'start',
          rglNode: rglNode
        });
      } else {
        // stop response document focus event
        // 禁止原生拖拽
        downEvent.stopPropagation();
        downEvent.preventDefault();
      }
      // if (!node?.isValidComponent()) {
      //   // 对于未注册组件直接返回
      //   return;
      // }
      var isLeftButton = downEvent.which === 1 || downEvent.button === 0;
      var checkSelect = function checkSelect(e) {
        doc.removeEventListener('mouseup', checkSelect, true);
        // 取消移动;
        designer.dragon.emitter.emit('rgl.switch', {
          action: 'end',
          rglNode: rglNode
        });
        // 鼠标是否移动 ? - 鼠标抖动应该也需要支持选中事件，偶尔点击不能选中，磁帖块移除 shaken 检测
        if (!(0, _designer.isShaken)(downEvent, e) || isRGLNode) {
          var id = node.id;
          designer.activeTracker.track({
            node: node,
            instance: nodeInst === null || nodeInst === void 0 ? void 0 : nodeInst.instance
          });
          if (isMulti && focusNode && !node.contains(focusNode) && selection.has(id)) {
            selection.remove(id);
          } else {
            var _node$getChildren, _this5$designer, _node$componentMeta, _node$componentMeta2;
            // TODO: 避免选中 Page 组件，默认选中第一个子节点；新增规则 或 判断 Live 模式
            if (node.isPage() && (_node$getChildren = node.getChildren()) !== null && _node$getChildren !== void 0 && _node$getChildren.notEmpty() && _this5.designMode === 'live') {
              var _node$getChildren2, _node$getChildren2$ge;
              var firstChildId = (_node$getChildren2 = node.getChildren()) === null || _node$getChildren2 === void 0 ? void 0 : (_node$getChildren2$ge = _node$getChildren2.get(0)) === null || _node$getChildren2$ge === void 0 ? void 0 : _node$getChildren2$ge.getId();
              if (firstChildId) id = firstChildId;
            }
            if (focusNode) {
              selection.select(node.contains(focusNode) ? focusNode.id : id);
            }

            // dirty code should refector
            var editor = (_this5$designer = _this5.designer) === null || _this5$designer === void 0 ? void 0 : _this5$designer.editor;
            var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.npm;
            var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
              return !!item;
            }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.componentName) || '';
            editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.builtinSimulator.select', {
              selected: selected
            });
          }
        }
      };
      if (isLeftButton && focusNode && !node.contains(focusNode)) {
        var nodes = [node];
        var ignoreUpSelected = false;
        if (isMulti) {
          // multi select mode, directily add
          if (!selection.has(node.id)) {
            designer.activeTracker.track({
              node: node,
              instance: nodeInst === null || nodeInst === void 0 ? void 0 : nodeInst.instance
            });
            selection.add(node.id);
            ignoreUpSelected = true;
          }
          (focusNode === null || focusNode === void 0 ? void 0 : focusNode.id) && selection.remove(focusNode.id);
          // 获得顶层 nodes
          nodes = selection.getTopNodes();
        } else if (selection.containsNode(node, true)) {
          nodes = selection.getTopNodes();
        } else {
          // will clear current selection & select dragment in dragstart
        }
        designer.dragon.boost({
          type: _lowcodeTypes.IPublicEnumDragObjectType.Node,
          nodes: nodes
        }, downEvent, isRGLNode ? rglNode : undefined);
        if (ignoreUpSelected) {
          // multi select mode has add selected, should return
          return;
        }
      }
      doc.addEventListener('mouseup', checkSelect, true);
    }, true);
    doc.addEventListener('click', function (e) {
      var _this5$_iframe;
      // fix for popups close logic
      var x = new Event('click');
      x.initEvent('click', true);
      (_this5$_iframe = _this5._iframe) === null || _this5$_iframe === void 0 ? void 0 : _this5$_iframe.dispatchEvent(x);
      var target = e.target;
      var customizeIgnoreSelectors = _lowcodeEditorCore.engineConfig.get('customizeIgnoreSelectors');
      // TODO: need more elegant solution to ignore click events of components in designer
      var defaultIgnoreSelectors = ['.next-input-group', '.next-checkbox-group', '.next-checkbox-wrapper', '.next-date-picker', '.next-input', '.next-month-picker', '.next-number-picker', '.next-radio-group', '.next-range', '.next-range-picker', '.next-rating', '.next-select', '.next-switch', '.next-time-picker', '.next-upload', '.next-year-picker', '.next-breadcrumb-item', '.next-calendar-header', '.next-calendar-table', '.editor-container' // 富文本组件
      ];
      var ignoreSelectors = (customizeIgnoreSelectors === null || customizeIgnoreSelectors === void 0 ? void 0 : customizeIgnoreSelectors(defaultIgnoreSelectors, e)) || defaultIgnoreSelectors;
      var ignoreSelectorsString = ignoreSelectors.join(',');
      // 提供了 customizeIgnoreSelectors 的情况下，忽略 isFormEvent() 判断
      if (!customizeIgnoreSelectors && (0, _lowcodeUtils.isFormEvent)(e) || target !== null && target !== void 0 && target.closest(ignoreSelectorsString)) {
        e.preventDefault();
        e.stopPropagation();
      }
      // stop response document click event
      // todo: catch link redirect
    }, true);
  }

  /**
   * 设置悬停处理
   */;
  _proto.setupDetecting = function setupDetecting() {
    var _this6 = this;
    var doc = this.contentDocument;
    var _this$designer2 = this.designer,
      detecting = _this$designer2.detecting,
      dragon = _this$designer2.dragon;
    var hover = function hover(e) {
      if (!detecting.enable || _this6.designMode !== 'design') {
        return;
      }
      var nodeInst = _this6.getNodeInstanceFromElement(e.target);
      if (nodeInst !== null && nodeInst !== void 0 && nodeInst.node) {
        var _node$document;
        var node = nodeInst.node;
        var focusNode = (_node$document = node.document) === null || _node$document === void 0 ? void 0 : _node$document.focusNode;
        if (focusNode && node.contains(focusNode)) {
          node = focusNode;
        }
        detecting.capture(node);
      } else {
        detecting.capture(null);
      }
      if (!_lowcodeEditorCore.engineConfig.get('enableMouseEventPropagationInCanvas', false) || dragon.dragging) {
        e.stopPropagation();
      }
    };
    var leave = function leave() {
      _this6.project.currentDocument && detecting.leave(_this6.project.currentDocument);
    };
    doc.addEventListener('mouseover', hover, true);
    doc.addEventListener('mouseleave', leave, false);

    // TODO: refactor this line, contains click, mousedown, mousemove
    doc.addEventListener('mousemove', function (e) {
      if (!_lowcodeEditorCore.engineConfig.get('enableMouseEventPropagationInCanvas', false) || dragon.dragging) {
        e.stopPropagation();
      }
    }, true);

    // this.disableDetecting = () => {
    //   detecting.leave(this.project.currentDocument);
    //   doc.removeEventListener('mouseover', hover, true);
    //   doc.removeEventListener('mouseleave', leave, false);
    //   this.disableDetecting = undefined;
    // };
  };
  _proto.setupLiveEditing = function setupLiveEditing() {
    var _this7 = this;
    var doc = this.contentDocument;
    // cause edit
    doc.addEventListener('dblclick', function (e) {
      var _this7$project$curren, _this7$findDOMNodes;
      // stop response document dblclick event
      e.stopPropagation();
      e.preventDefault();
      var targetElement = e.target;
      var nodeInst = _this7.getNodeInstanceFromElement(targetElement);
      if (!nodeInst) {
        return;
      }
      var focusNode = (_this7$project$curren = _this7.project.currentDocument) === null || _this7$project$curren === void 0 ? void 0 : _this7$project$curren.focusNode;
      var node = nodeInst.node || focusNode;
      if (!node || (0, _document.isLowCodeComponent)(node)) {
        return;
      }
      var rootElement = (_this7$findDOMNodes = _this7.findDOMNodes(nodeInst.instance, node.componentMeta.rootSelector)) === null || _this7$findDOMNodes === void 0 ? void 0 : _this7$findDOMNodes.find(function (item) {
        return (
          // 可能是 [null];
          item && item.contains(targetElement)
        );
      });
      if (!rootElement) {
        return;
      }
      _this7.liveEditing.apply({
        node: node,
        rootElement: rootElement,
        event: e
      });
    }, true);
  }

  /**
   * @see ISimulator
   */;
  _proto.setSuspense = function setSuspense( /** _suspended: boolean */
  ) {
    return false;
    // if (suspended) {
    //   /*
    //   if (this.disableDetecting) {
    //     this.disableDetecting();
    //   }
    //   */
    //   // sleep some autorun reaction
    // } else {
    //   // weekup some autorun reaction
    //   /*
    //   if (!this.disableDetecting) {
    //     this.setupDetecting();
    //   }
    //   */
    // }
  };
  _proto.setupContextMenu = function setupContextMenu() {
    var _this8 = this;
    var doc = this.contentDocument;
    doc.addEventListener('contextmenu', function (e) {
      var _this8$designer, _this8$project$curren, _node$componentMeta3, _node$componentMeta4;
      var targetElement = e.target;
      var nodeInst = _this8.getNodeInstanceFromElement(targetElement);
      var editor = (_this8$designer = _this8.designer) === null || _this8$designer === void 0 ? void 0 : _this8$designer.editor;
      if (!nodeInst) {
        editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.builtinSimulator.contextmenu', {
          originalEvent: e
        });
        return;
      }
      var node = nodeInst.node || ((_this8$project$curren = _this8.project.currentDocument) === null || _this8$project$curren === void 0 ? void 0 : _this8$project$curren.focusNode);
      if (!node) {
        editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.builtinSimulator.contextmenu', {
          originalEvent: e
        });
        return;
      }

      // dirty code should refector
      var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta3 = node.componentMeta) === null || _node$componentMeta3 === void 0 ? void 0 : _node$componentMeta3.npm;
      var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
        return !!item;
      }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta4 = node.componentMeta) === null || _node$componentMeta4 === void 0 ? void 0 : _node$componentMeta4.componentName) || '';
      editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.builtinSimulator.contextmenu', (0, _extends3["default"])({
        selected: selected
      }, nodeInst, {
        instanceRect: _this8.computeComponentInstanceRect(nodeInst.instance),
        originalEvent: e
      }));
    });
  }

  /**
   * @see ISimulator
   */;
  _proto.generateComponentMetadata = function generateComponentMetadata(componentName) {
    // if html tags
    if (isHTMLTag(componentName)) {
      return {
        componentName: componentName
        // TODO: read builtins html metadata
      };
    }
    var component = this.getComponent(componentName);
    if (!component) {
      return {
        componentName: componentName
      };
    }

    // TODO:
    // 1. generate builtin div/p/h1/h2
    // 2. read propTypes

    return (0, _extends3["default"])({
      componentName: componentName
    }, (0, _parseMetadata.parseMetadata)(component));
  }

  /**
   * @see ISimulator
   */;
  _proto.getComponent = function getComponent(componentName) {
    var _this$renderer6;
    return ((_this$renderer6 = this.renderer) === null || _this$renderer6 === void 0 ? void 0 : _this$renderer6.getComponent(componentName)) || null;
  };
  _proto.createComponent = function createComponent( /** _schema: IPublicTypeComponentSchema */
  ) {
    return null;
    // return this.renderer?.createComponent(schema) || null;
  };
  _proto.setInstance = function setInstance(docId, id, instances) {
    if (!(0, _lowcodeUtils.hasOwnProperty)(this.instancesMap, docId)) {
      this.instancesMap[docId] = new Map();
    }
    if (instances == null) {
      this.instancesMap[docId]["delete"](id);
    } else {
      this.instancesMap[docId].set(id, instances.slice());
    }
  }

  /**
   * @see ISimulator
   */;
  _proto.getComponentInstances = function getComponentInstances(node, context) {
    var _node$document2,
      _this$instancesMap$do,
      _this9 = this;
    var docId = (_node$document2 = node.document) === null || _node$document2 === void 0 ? void 0 : _node$document2.id;
    if (!docId) {
      return null;
    }
    var instances = ((_this$instancesMap$do = this.instancesMap[docId]) === null || _this$instancesMap$do === void 0 ? void 0 : _this$instancesMap$do.get(node.id)) || null;
    if (!instances || !context) {
      return instances;
    }

    // filter with context
    return instances.filter(function (instance) {
      var _this9$getClosestNode;
      return ((_this9$getClosestNode = _this9.getClosestNodeInstance(instance, context === null || context === void 0 ? void 0 : context.nodeId)) === null || _this9$getClosestNode === void 0 ? void 0 : _this9$getClosestNode.instance) === context.instance;
    });
  }

  /**
   * @see ISimulator
   */;
  _proto.getComponentContext = function getComponentContext( /* node: Node */
  ) {
    throw new Error('Method not implemented.');
  }

  /**
   * @see ISimulator
   */;
  _proto.getClosestNodeInstance = function getClosestNodeInstance(from, specId) {
    var _this$renderer7;
    return ((_this$renderer7 = this.renderer) === null || _this$renderer7 === void 0 ? void 0 : _this$renderer7.getClosestNodeInstance(from, specId)) || null;
  }

  /**
   * @see ISimulator
   */;
  _proto.computeRect = function computeRect(node) {
    var instances = this.getComponentInstances(node);
    if (!instances) {
      return null;
    }
    return this.computeComponentInstanceRect(instances[0], node.componentMeta.rootSelector);
  }

  /**
   * @see ISimulator
   */;
  _proto.computeComponentInstanceRect = function computeComponentInstanceRect(instance, selector) {
    var renderer = this.renderer;
    var elements = this.findDOMNodes(instance, selector);
    if (!elements) {
      return null;
    }
    var elems = elements.slice();
    var rects;
    var last;
    var _computed = false;
    while (true) {
      if (!rects || rects.length < 1) {
        var elem = elems.pop();
        if (!elem) {
          break;
        }
        rects = renderer.getClientRects(elem);
      }
      var rect = rects.pop();
      if (!rect) {
        break;
      }
      if (rect.width === 0 && rect.height === 0) {
        continue;
      }
      if (!last) {
        last = {
          x: rect.left,
          y: rect.top,
          r: rect.right,
          b: rect.bottom
        };
        continue;
      }
      if (rect.left < last.x) {
        last.x = rect.left;
        _computed = true;
      }
      if (rect.top < last.y) {
        last.y = rect.top;
        _computed = true;
      }
      if (rect.right > last.r) {
        last.r = rect.right;
        _computed = true;
      }
      if (rect.bottom > last.b) {
        last.b = rect.bottom;
        _computed = true;
      }
    }
    if (last) {
      var r = new DOMRect(last.x, last.y, last.r - last.x, last.b - last.y);
      r.elements = elements;
      r.computed = _computed;
      return r;
    }
    return null;
  }

  /**
   * @see ISimulator
   */;
  _proto.findDOMNodes = function findDOMNodes(instance, selector) {
    var _this$_renderer;
    var elements = (_this$_renderer = this._renderer) === null || _this$_renderer === void 0 ? void 0 : _this$_renderer.findDOMNodes(instance);
    if (!elements) {
      return null;
    }
    if (selector) {
      var matched = getMatched(elements, selector);
      if (!matched) {
        return null;
      }
      return [matched];
    }
    return elements;
  }

  /**
   * 通过 DOM 节点获取节点，依赖 simulator 的接口
   */;
  _proto.getNodeInstanceFromElement = function getNodeInstanceFromElement(target) {
    if (!target) {
      return null;
    }
    var nodeInstance = this.getClosestNodeInstance(target);
    if (!nodeInstance) {
      return null;
    }
    var docId = nodeInstance.docId;
    var doc = this.project.getDocument(docId);
    var node = doc.getNode(nodeInstance.nodeId);
    return (0, _extends3["default"])({}, nodeInstance, {
      node: node
    });
  }

  /**
   * @see ISimulator
   */
  /* istanbul ignore next */;
  _proto.scrollToNode = function scrollToNode(node, detail) {
    var _this$getComponentIns, _detail$near, _this$findDOMNodes;
    this.tryScrollAgain = null;
    if (this.sensing) {
      // active sensor
      return;
    }
    var opt = {};
    var scroll = false;
    var componentInstance = (_this$getComponentIns = this.getComponentInstances((detail === null || detail === void 0 ? void 0 : (_detail$near = detail.near) === null || _detail$near === void 0 ? void 0 : _detail$near.node) || node)) === null || _this$getComponentIns === void 0 ? void 0 : _this$getComponentIns[0];
    if (!componentInstance) return;
    var domNode = (_this$findDOMNodes = this.findDOMNodes(componentInstance)) === null || _this$findDOMNodes === void 0 ? void 0 : _this$findDOMNodes[0];
    if (!domNode) return;
    if ((0, _misc.isElementNode)(domNode) && !(0, _misc.isDOMNodeVisible)(domNode, this.viewport)) {
      var _this$contentDocument;
      var _domNode$getBoundingC = domNode.getBoundingClientRect(),
        left = _domNode$getBoundingC.left,
        top = _domNode$getBoundingC.top;
      var _ref2 = ((_this$contentDocument = this.contentDocument) === null || _this$contentDocument === void 0 ? void 0 : _this$contentDocument.documentElement) || {},
        _ref2$scrollTop = _ref2.scrollTop,
        scrollTop = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop,
        _ref2$scrollLeft = _ref2.scrollLeft,
        scrollLeft = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft;
      opt.left = left + scrollLeft;
      opt.top = top + scrollTop;
      scroll = true;
    }
    if (scroll && this.scroller) {
      this.scroller.scrollTo(opt);
    }
  }

  // #region ========= drag and drop helpers =============
  /**
   * @see ISimulator
   */;
  _proto.setNativeSelection = function setNativeSelection(enableFlag) {
    var _this$renderer8;
    (_this$renderer8 = this.renderer) === null || _this$renderer8 === void 0 ? void 0 : _this$renderer8.setNativeSelection(enableFlag);
  }

  /**
   * @see ISimulator
   */;
  _proto.setDraggingState = function setDraggingState(state) {
    var _this$renderer9;
    (_this$renderer9 = this.renderer) === null || _this$renderer9 === void 0 ? void 0 : _this$renderer9.setDraggingState(state);
  }

  /**
   * @see ISimulator
   */;
  _proto.setCopyState = function setCopyState(state) {
    var _this$renderer10;
    (_this$renderer10 = this.renderer) === null || _this$renderer10 === void 0 ? void 0 : _this$renderer10.setCopyState(state);
  }

  /**
   * @see ISimulator
   */;
  _proto.clearState = function clearState() {
    var _this$renderer11;
    (_this$renderer11 = this.renderer) === null || _this$renderer11 === void 0 ? void 0 : _this$renderer11.clearState();
  }

  /**
   * @see IPublicModelSensor
   */;
  _proto.fixEvent = function fixEvent(e) {
    var _e$originalEvent$view;
    if (e.fixed) {
      return e;
    }
    var notMyEvent = ((_e$originalEvent$view = e.originalEvent.view) === null || _e$originalEvent$view === void 0 ? void 0 : _e$originalEvent$view.document) !== this.contentDocument;
    // fix canvasX canvasY : 当前激活文档画布坐标系
    if (notMyEvent || !('canvasX' in e) || !('canvasY' in e)) {
      var l = this.viewport.toLocalPoint({
        clientX: e.globalX,
        clientY: e.globalY
      });
      e.canvasX = l.clientX;
      e.canvasY = l.clientY;
    }

    // fix target : 浏览器事件响应目标
    if (!e.target || notMyEvent) {
      if (!isNaN(e.canvasX) && !isNaN(e.canvasY)) {
        var _this$contentDocument2;
        e.target = (_this$contentDocument2 = this.contentDocument) === null || _this$contentDocument2 === void 0 ? void 0 : _this$contentDocument2.elementFromPoint(e.canvasX, e.canvasY);
      }
    }

    // 事件已订正
    e.fixed = true;
    return e;
  }

  /**
   * @see IPublicModelSensor
   */;
  _proto.isEnter = function isEnter(e) {
    var rect = this.viewport.bounds;
    return e.globalY >= rect.top && e.globalY <= rect.bottom && e.globalX >= rect.left && e.globalX <= rect.right;
  }

  /**
   * @see IPublicModelSensor
   */;
  _proto.deactiveSensor = function deactiveSensor() {
    this.sensing = false;
    this.scroller.cancel();
  }

  // ========= drag location logic: helper for locate ==========

  /**
   * @see IPublicModelSensor
   */;
  _proto.locate = function locate(e) {
    var _this10 = this;
    var dragObject = e.dragObject;
    var nodes = dragObject === null || dragObject === void 0 ? void 0 : dragObject.nodes;
    var operationalNodes = nodes === null || nodes === void 0 ? void 0 : nodes.filter(function (node) {
      var _node$componentMeta5, _node$componentMeta5$, _parentContainerNode, _parentContainerNode$, _parentContainerNode$2;
      var onMoveHook = (_node$componentMeta5 = node.componentMeta) === null || _node$componentMeta5 === void 0 ? void 0 : (_node$componentMeta5$ = _node$componentMeta5.advanced.callbacks) === null || _node$componentMeta5$ === void 0 ? void 0 : _node$componentMeta5$.onMoveHook;
      var canMove = onMoveHook && typeof onMoveHook === 'function' ? onMoveHook(node.internalToShellNode()) : true;
      var parentContainerNode = null;
      var parentNode = node.parent;
      while (parentNode) {
        if (parentNode.isContainer()) {
          parentContainerNode = parentNode;
          break;
        }
        parentNode = parentNode.parent;
      }
      var onChildMoveHook = (_parentContainerNode = parentContainerNode) === null || _parentContainerNode === void 0 ? void 0 : (_parentContainerNode$ = _parentContainerNode.componentMeta) === null || _parentContainerNode$ === void 0 ? void 0 : (_parentContainerNode$2 = _parentContainerNode$.advanced.callbacks) === null || _parentContainerNode$2 === void 0 ? void 0 : _parentContainerNode$2.onChildMoveHook;
      var childrenCanMove = onChildMoveHook && parentContainerNode && typeof onChildMoveHook === 'function' ? onChildMoveHook(node.internalToShellNode(), parentContainerNode.internalToShellNode()) : true;
      return canMove && childrenCanMove;
    });
    if (nodes && (!operationalNodes || operationalNodes.length === 0)) {
      return;
    }
    this.sensing = true;
    this.scroller.scrolling(e);
    var document = this.project.currentDocument;
    if (!document) {
      return null;
    }
    var dropContainer = this.getDropContainer(e);
    var lockedNode = (0, _lowcodeUtils.getClosestNode)(dropContainer === null || dropContainer === void 0 ? void 0 : dropContainer.container, function (node) {
      return node.isLocked;
    });
    if (lockedNode) return null;
    if (!dropContainer) {
      return null;
    }
    if ((0, _lowcodeUtils.isLocationData)(dropContainer)) {
      return this.designer.createLocation(dropContainer);
    }
    var container = dropContainer.container,
      containerInstance = dropContainer.instance;
    var edge = this.computeComponentInstanceRect(containerInstance, container.componentMeta.rootSelector);
    if (!edge) {
      return null;
    }
    var children = container.children;
    var detail = {
      type: _lowcodeTypes.IPublicTypeLocationDetailType.Children,
      index: 0,
      edge: edge
    };
    var locationData = {
      target: container,
      detail: detail,
      source: "simulator" + document.id,
      event: e
    };
    if (e.dragObject && e.dragObject.nodes && e.dragObject.nodes.length && e.dragObject.nodes[0].componentMeta.isModal && document.focusNode) {
      return this.designer.createLocation({
        target: document.focusNode,
        detail: detail,
        source: "simulator" + document.id,
        event: e
      });
    }
    if (!children || children.size < 1 || !edge) {
      return this.designer.createLocation(locationData);
    }
    var nearRect = null;
    var nearIndex = 0;
    var nearNode = null;
    var nearDistance = null;
    var minTop = null;
    var maxBottom = null;
    for (var i = 0, l = children.size; i < l; i++) {
      var node = children.get(i);
      var index = i;
      var instances = this.getComponentInstances(node);
      var inst = instances ? instances.length > 1 ? instances.find(function (_inst) {
        var _this10$getClosestNod;
        return ((_this10$getClosestNod = _this10.getClosestNodeInstance(_inst, container.id)) === null || _this10$getClosestNod === void 0 ? void 0 : _this10$getClosestNod.instance) === containerInstance;
      }) : instances[0] : null;
      var rect = inst ? this.computeComponentInstanceRect(inst, node.componentMeta.rootSelector) : null;
      if (!rect) {
        continue;
      }
      var distance = isPointInRect(e, rect) ? 0 : distanceToRect(e, rect);
      if (distance === 0) {
        nearDistance = distance;
        nearNode = node;
        nearIndex = index;
        nearRect = rect;
        break;
      }

      // 标记子节点最顶
      if (minTop === null || rect.top < minTop) {
        minTop = rect.top;
      }
      // 标记子节点最底
      if (maxBottom === null || rect.bottom > maxBottom) {
        maxBottom = rect.bottom;
      }
      if (nearDistance === null || distance < nearDistance) {
        nearDistance = distance;
        nearNode = node;
        nearIndex = index;
        nearRect = rect;
      }
    }
    detail.index = nearIndex;
    if (nearNode && nearRect) {
      var el = (0, _designer.getRectTarget)(nearRect);
      var inline = el ? (0, _designer.isChildInline)(el) : false;
      var row = el ? (0, _designer.isRowContainer)(el.parentElement) : false;
      var vertical = inline || row;

      // TODO: fix type
      var near = {
        node: nearNode.internalToShellNode(),
        pos: 'before',
        align: vertical ? 'V' : 'H'
      };
      detail.near = near;
      if (isNearAfter(e, nearRect, vertical)) {
        near.pos = 'after';
        detail.index = nearIndex + 1;
      }
      if (!row && nearDistance !== 0) {
        var edgeDistance = distanceToEdge(e, edge);
        if (edgeDistance.distance < nearDistance) {
          var nearAfter = edgeDistance.nearAfter;
          if (minTop == null) {
            minTop = edge.top;
          }
          if (maxBottom == null) {
            maxBottom = edge.bottom;
          }
          near.rect = new DOMRect(edge.left, minTop, edge.width, maxBottom - minTop);
          near.align = 'H';
          near.pos = nearAfter ? 'after' : 'before';
          detail.index = nearAfter ? children.size : 0;
        }
      }
    }
    return this.designer.createLocation(locationData);
  }

  /**
   * 查找合适的投放容器
   */;
  _proto.getDropContainer = function getDropContainer(e) {
    var _container;
    var target = e.target,
      dragObject = e.dragObject;
    var isAny = (0, _lowcodeUtils.isDragAnyObject)(dragObject);
    var document = this.project.currentDocument;
    var currentRoot = document.currentRoot;
    var container;
    var nodeInstance;
    if (target) {
      var ref = this.getNodeInstanceFromElement(target);
      if (ref !== null && ref !== void 0 && ref.node) {
        nodeInstance = ref;
        container = ref.node;
      } else if (isAny) {
        return null;
      } else {
        container = currentRoot;
      }
    } else if (isAny) {
      return null;
    } else {
      container = currentRoot;
    }
    if (!((_container = container) !== null && _container !== void 0 && _container.isParental())) {
      var _container2;
      container = ((_container2 = container) === null || _container2 === void 0 ? void 0 : _container2.parent) || currentRoot;
    }

    // TODO: use spec container to accept specialData
    if (isAny) {
      // will return locationData
      return null;
    }

    // get common parent, avoid drop container contains by dragObject
    var drillDownExcludes = new Set();
    if ((0, _lowcodeUtils.isDragNodeObject)(dragObject)) {
      var nodes = dragObject.nodes;
      var i = nodes.length;
      var p = container;
      while (i-- > 0) {
        if ((0, _document.contains)(nodes[i], p)) {
          p = nodes[i].parent;
        }
      }
      if (p !== container) {
        container = p || document.focusNode;
        container && drillDownExcludes.add(container);
      }
    }
    var instance;
    if (nodeInstance) {
      if (nodeInstance.node === container) {
        instance = nodeInstance.instance;
      } else {
        var _this$getClosestNodeI, _container3;
        instance = (_this$getClosestNodeI = this.getClosestNodeInstance(nodeInstance.instance, (_container3 = container) === null || _container3 === void 0 ? void 0 : _container3.id)) === null || _this$getClosestNodeI === void 0 ? void 0 : _this$getClosestNodeI.instance;
      }
    } else {
      var _this$getComponentIns2;
      instance = container && ((_this$getComponentIns2 = this.getComponentInstances(container)) === null || _this$getComponentIns2 === void 0 ? void 0 : _this$getComponentIns2[0]);
    }
    var dropContainer = {
      container: container,
      instance: instance
    };
    var res;
    var upward = null;
    while (container) {
      res = this.handleAccept(dropContainer, e);
      // if (isLocationData(res)) {
      //   return res;
      // }
      if (res === true) {
        return dropContainer;
      }
      if (!res) {
        drillDownExcludes.add(container);
        if (upward) {
          dropContainer = upward;
          container = dropContainer.container;
          upward = null;
        } else if (container.parent) {
          var _this$getClosestNodeI2;
          container = container.parent;
          instance = (_this$getClosestNodeI2 = this.getClosestNodeInstance(dropContainer.instance, container.id)) === null || _this$getClosestNodeI2 === void 0 ? void 0 : _this$getClosestNodeI2.instance;
          dropContainer = {
            container: container,
            instance: instance
          };
        } else {
          return null;
        }
      }
    }
    return null;
  };
  _proto.isAcceptable = function isAcceptable() {
    return false;
  }

  /**
   * 控制接受
   */;
  _proto.handleAccept = function handleAccept(_ref3, e) {
    var container = _ref3.container;
    var dragObject = e.dragObject;
    var document = this.currentDocument;
    var focusNode = document.focusNode;
    if ((0, _document.isRootNode)(container) || container.contains(focusNode)) {
      return document.checkNesting(focusNode, dragObject);
    }
    var meta = container.componentMeta;

    // FIXME: get containerInstance for accept logic use
    var acceptable = this.isAcceptable(container);
    if (!meta.isContainer && !acceptable) {
      return false;
    }

    // check nesting
    return document.checkNesting(container, dragObject);
  }

  /**
   * 查找邻近容器
   */;
  _proto.getNearByContainer = function getNearByContainer(_ref4, drillDownExcludes) {
    var container = _ref4.container,
      instance = _ref4.instance;
    var children = container.children;
    if (!children || children.isEmpty()) {
      return null;
    }
    var nearBy = null;
    for (var i = 0, l = children.size; i < l; i++) {
      var child = children.get(i);
      if (!child) {
        continue;
      }
      if (child.conditionGroup) {
        var bn = child.conditionGroup;
        i = (bn.index || 0) + bn.length - 1;
        child = bn.visibleNode;
      }
      if (!child.isParental() || drillDownExcludes.has(child)) {
        continue;
      }
      // TODO:
      this.findDOMNodes(instance);
      this.getComponentInstances(child);
      var rect = this.computeRect(child);
      if (!rect) {
        continue;
      }
    }
    return nearBy;
  }
  // #endregion
  ;
  (0, _createClass2["default"])(BuiltinSimulatorHost, [{
    key: "currentDocument",
    get: function get() {
      return this.project.currentDocument;
    }
  }, {
    key: "renderEnv",
    get: function get() {
      return this.get('renderEnv') || 'default';
    }
  }, {
    key: "device",
    get: function get() {
      return this.get('device') || 'default';
    }
  }, {
    key: "locale",
    get: function get() {
      return this.get('locale') || _lowcodeEditorCore.globalLocale.getLocale();
    }
  }, {
    key: "deviceClassName",
    get: function get() {
      return this.get('deviceClassName');
    }
  }, {
    key: "designMode",
    get: function get() {
      // renderer 依赖
      // TODO: 需要根据 design mode 不同切换鼠标响应情况
      return this.get('designMode') || 'design';
    }
  }, {
    key: "requestHandlersMap",
    get: function get() {
      // renderer 依赖
      // TODO: 需要根据 design mode 不同切换鼠标响应情况
      return this.get('requestHandlersMap') || null;
    }
  }, {
    key: "thisRequiredInJSE",
    get: function get() {
      var _engineConfig$get;
      return (_engineConfig$get = _lowcodeEditorCore.engineConfig.get('thisRequiredInJSE')) !== null && _engineConfig$get !== void 0 ? _engineConfig$get : true;
    }
  }, {
    key: "enableStrictNotFoundMode",
    get: function get() {
      var _engineConfig$get2;
      return (_engineConfig$get2 = _lowcodeEditorCore.engineConfig.get('enableStrictNotFoundMode')) !== null && _engineConfig$get2 !== void 0 ? _engineConfig$get2 : false;
    }
  }, {
    key: "notFoundComponent",
    get: function get() {
      var _engineConfig$get3;
      return (_engineConfig$get3 = _lowcodeEditorCore.engineConfig.get('notFoundComponent')) !== null && _engineConfig$get3 !== void 0 ? _engineConfig$get3 : null;
    }
  }, {
    key: "faultComponent",
    get: function get() {
      var _engineConfig$get4;
      return (_engineConfig$get4 = _lowcodeEditorCore.engineConfig.get('faultComponent')) !== null && _engineConfig$get4 !== void 0 ? _engineConfig$get4 : null;
    }
  }, {
    key: "faultComponentMap",
    get: function get() {
      var _engineConfig$get5;
      return (_engineConfig$get5 = _lowcodeEditorCore.engineConfig.get('faultComponentMap')) !== null && _engineConfig$get5 !== void 0 ? _engineConfig$get5 : null;
    }
  }, {
    key: "componentsAsset",
    get: function get() {
      return this.get('componentsAsset');
    }
  }, {
    key: "theme",
    get: function get() {
      return this.get('theme');
    }
  }, {
    key: "componentsMap",
    get: function get() {
      // renderer 依赖
      return this.designer.componentsMap;
    }
  }, {
    key: "deviceStyle",
    get: function get() {
      return this.get('deviceStyle');
    }
  }, {
    key: "contentWindow",
    get: function get() {
      return this._contentWindow;
    }
  }, {
    key: "contentDocument",
    get: function get() {
      return this._contentDocument;
    }
  }, {
    key: "renderer",
    get: function get() {
      return this._renderer;
    }
  }, {
    key: "sensorAvailable",
    get:
    /**
     * @see IPublicModelSensor
     */
    function get() {
      return this._sensorAvailable;
    }
  }]);
  return BuiltinSimulatorHost;
}(), ((0, _applyDecoratedDescriptor2["default"])(_class.prototype, "renderEnv", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "renderEnv"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "device", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "device"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "locale", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "locale"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "deviceClassName", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "deviceClassName"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "designMode", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "designMode"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "requestHandlersMap", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "requestHandlersMap"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "componentsAsset", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "componentsAsset"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "theme", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "theme"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "componentsMap", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "componentsMap"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "deviceStyle", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "deviceStyle"), _class.prototype), _descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_props", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor2 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_contentWindow", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_contentDocument", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_appHelper", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "instancesMap", [_lowcodeEditorCore.obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
})), _class));
function isHTMLTag(name) {
  return /^[a-z]\w*$/.test(name);
}
function isPointInRect(point, rect) {
  return point.canvasY >= rect.top && point.canvasY <= rect.bottom && point.canvasX >= rect.left && point.canvasX <= rect.right;
}
function distanceToRect(point, rect) {
  var minX = Math.min(Math.abs(point.canvasX - rect.left), Math.abs(point.canvasX - rect.right));
  var minY = Math.min(Math.abs(point.canvasY - rect.top), Math.abs(point.canvasY - rect.bottom));
  if (point.canvasX >= rect.left && point.canvasX <= rect.right) {
    minX = 0;
  }
  if (point.canvasY >= rect.top && point.canvasY <= rect.bottom) {
    minY = 0;
  }
  return Math.sqrt(Math.pow(minX, 2) + Math.pow(minY, 2));
}
function distanceToEdge(point, rect) {
  var distanceTop = Math.abs(point.canvasY - rect.top);
  var distanceBottom = Math.abs(point.canvasY - rect.bottom);
  return {
    distance: Math.min(distanceTop, distanceBottom),
    nearAfter: distanceBottom < distanceTop
  };
}
function isNearAfter(point, rect, inline) {
  if (inline) {
    return Math.abs(point.canvasX - rect.left) + Math.abs(point.canvasY - rect.top) > Math.abs(point.canvasX - rect.right) + Math.abs(point.canvasY - rect.bottom);
  }
  return Math.abs(point.canvasY - rect.top) > Math.abs(point.canvasY - rect.bottom);
}
function getMatched(elements, selector) {
  var firstQueried = null;
  for (var _iterator = _createForOfIteratorHelperLoose(elements), _step; !(_step = _iterator()).done;) {
    var elem = _step.value;
    if ((0, _lowcodeUtils.isElement)(elem)) {
      if (elem.matches(selector)) {
        return elem;
      }
      if (!firstQueried) {
        firstQueried = elem.querySelector(selector);
      }
    }
  }
  return firstQueried;
}