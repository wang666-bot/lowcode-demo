"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.LowcodeTypes = void 0;
exports.parseMetadata = parseMetadata;
exports.parseProps = parseProps;
exports.primitiveTypes = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var primitiveTypes = exports.primitiveTypes = ['string', 'number', 'array', 'bool', 'func', 'object', 'node', 'element', 'symbol', 'any'];
// eslint-disable-next-line @typescript-eslint/ban-types
function makeRequired(propType, lowcodeType) {
  function lowcodeCheckTypeIsRequired() {
    return propType.isRequired.apply(propType, arguments);
  }
  if (typeof lowcodeType === 'string') {
    lowcodeType = {
      type: lowcodeType
    };
  }
  lowcodeCheckTypeIsRequired.lowcodeType = (0, _extends2["default"])({}, lowcodeType, {
    isRequired: true
  });
  return lowcodeCheckTypeIsRequired;
}

// eslint-disable-next-line @typescript-eslint/ban-types
function define(propType, lowcodeType) {
  if (propType === void 0) {
    propType = _propTypes["default"].any;
  }
  if (lowcodeType === void 0) {
    lowcodeType = {};
  }
  if (!propType._inner && propType.name !== 'lowcodeCheckType') {
    propType.lowcodeType = lowcodeType;
  }
  function lowcodeCheckType() {
    return propType.apply(void 0, arguments);
  }
  lowcodeCheckType.lowcodeType = lowcodeType;
  lowcodeCheckType.isRequired = makeRequired(propType, lowcodeType);
  return lowcodeCheckType;
}
var LowcodeTypes = exports.LowcodeTypes = (0, _extends2["default"])({}, _propTypes["default"], {
  define: define
});
window.PropTypes = LowcodeTypes;
if (window.React) {
  window.React.PropTypes = LowcodeTypes;
}

// override primitive type checkers
primitiveTypes.forEach(function (type) {
  var propType = _propTypes["default"][type];
  if (!propType) {
    return;
  }
  propType._inner = true;
  LowcodeTypes[type] = define(propType, type);
});

// You can ensure that your prop is limited to specific values by treating
// it as an enum.
LowcodeTypes.oneOf = function (list) {
  return define(_propTypes["default"].oneOf(list), {
    type: 'oneOf',
    value: list
  });
};

// An array of a certain type
LowcodeTypes.arrayOf = function (type) {
  return define(_propTypes["default"].arrayOf(type), {
    type: 'arrayOf',
    value: type.lowcodeType || 'any'
  });
};

// An object with property values of a certain type
LowcodeTypes.objectOf = function (type) {
  return define(_propTypes["default"].objectOf(type), {
    type: 'objectOf',
    value: type.lowcodeType || 'any'
  });
};

// An object that could be one of many types
LowcodeTypes.oneOfType = function (types) {
  var itemTypes = types.map(function (type) {
    return type.lowcodeType || 'any';
  });
  return define(_propTypes["default"].oneOfType(types), {
    type: 'oneOfType',
    value: itemTypes
  });
};

// An object with warnings on extra properties
LowcodeTypes.exact = function (typesMap) {
  var configs = Object.keys(typesMap).map(function (key) {
    var _typesMap$key;
    return {
      name: key,
      propType: ((_typesMap$key = typesMap[key]) === null || _typesMap$key === void 0 ? void 0 : _typesMap$key.lowcodeType) || 'any'
    };
  });
  return define(_propTypes["default"].exact(typesMap), {
    type: 'exact',
    value: configs
  });
};

// An object taking on a particular shape
LowcodeTypes.shape = function (typesMap) {
  if (typesMap === void 0) {
    typesMap = {};
  }
  var configs = Object.keys(typesMap).map(function (key) {
    var _typesMap$key2;
    return {
      name: key,
      propType: ((_typesMap$key2 = typesMap[key]) === null || _typesMap$key2 === void 0 ? void 0 : _typesMap$key2.lowcodeType) || 'any'
    };
  });
  return define(_propTypes["default"].shape(typesMap), {
    type: 'shape',
    value: configs
  });
};
var BasicTypes = ['string', 'number', 'object'];
function parseProps(component) {
  if (!component) {
    return [];
  }
  var propTypes = component.propTypes || {};
  var defaultProps = component.defaultProps || {};
  var result = {};
  if (!propTypes) return [];
  Object.keys(propTypes).forEach(function (key) {
    var propTypeItem = propTypes[key];
    var defaultValue = defaultProps[key];
    var lowcodeType = propTypeItem.lowcodeType;
    if (lowcodeType) {
      result[key] = {
        name: key,
        propType: lowcodeType
      };
      if (defaultValue != null) {
        result[key].defaultValue = defaultValue;
      }
      return;
    }
    var i = primitiveTypes.length;
    while (i-- > 0) {
      var k = primitiveTypes[i];
      if (LowcodeTypes[k] === propTypeItem) {
        result[key] = {
          name: key,
          propType: k
        };
        if (defaultValue != null) {
          result[key].defaultValue = defaultValue;
        }
        return;
      }
    }
    result[key] = {
      name: key,
      propType: 'any'
    };
    if (defaultValue != null) {
      result[key].defaultValue = defaultValue;
    }
  });
  Object.keys(defaultProps).forEach(function (key) {
    if (result[key]) return;
    var defaultValue = defaultProps[key];
    var type = typeof defaultValue;
    if (type === 'boolean') {
      type = 'bool';
    } else if (type === 'function') {
      type = 'func';
    } else if (type === 'object' && Array.isArray(defaultValue)) {
      type = 'array';
    } else if (defaultValue && /*#__PURE__*/(0, _react.isValidElement)(defaultValue)) {
      type = 'node';
    } else if (defaultValue && (0, _lowcodeUtils.isElement)(defaultValue)) {
      type = 'element';
    } else if (!BasicTypes.includes(type)) {
      type = 'any';
    }
    result[key] = {
      name: key,
      propType: type || 'any',
      defaultValue: defaultValue
    };
  });
  return Object.keys(result).map(function (key) {
    return result[key];
  });
}
function parseMetadata(component) {
  return (0, _extends2["default"])({
    props: parseProps(component)
  }, component.componentMetadata);
}