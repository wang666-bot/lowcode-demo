"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.BuiltinSimulatorHostView = void 0;
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _react = _interopRequireWildcard(require("react"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _host = require("./host");
var _bemTools = require("./bem-tools");
require("./host.less");
var _class, _class2;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
/*
  Simulator 模拟器，可替换部件，有协议约束，包含画布的容器，使用场景：当 Canvas 大小变化时，用来居中处理 或 定位 Canvas
  Canvas(DeviceShell) 设备壳层，通过背景图片来模拟，通过设备预设样式改变宽度、高度及定位 CanvasViewport
  CanvasViewport 页面编排场景中宽高不可溢出 Canvas 区
  Content(Shell) 内容外层，宽高紧贴 CanvasViewport，禁用边框，禁用 margin
  BemTools 辅助显示层，初始相对 Content 位置 0,0，紧贴 Canvas, 根据 Content 滚动位置，改变相对位置
*/
var BuiltinSimulatorHostView = exports.BuiltinSimulatorHostView = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(BuiltinSimulatorHostView, _Component);
  function BuiltinSimulatorHostView(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this.host = void 0;
    var _this$props = _this.props,
      project = _this$props.project,
      onMount = _this$props.onMount,
      designer = _this$props.designer;
    _this.host = project.simulator || new _host.BuiltinSimulatorHost(project, designer);
    _this.host.setProps(_this.props);
    onMount === null || onMount === void 0 ? void 0 : onMount(_this.host);
    return _this;
  }
  var _proto = BuiltinSimulatorHostView.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    this.host.setProps(nextProps);
    return false;
  };
  _proto.render = function render() {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "lc-simulator"
    }, /*#__PURE__*/_react["default"].createElement(Canvas, {
      host: this.host
    }));
  };
  return BuiltinSimulatorHostView;
}(_react.Component);
var Canvas = (0, _lowcodeEditorCore.observer)(_class = /*#__PURE__*/function (_Component2) {
  (0, _inheritsLoose2["default"])(Canvas, _Component2);
  function Canvas() {
    return _Component2.apply(this, arguments) || this;
  }
  var _proto2 = Canvas.prototype;
  _proto2.render = function render() {
    var sim = this.props.host;
    var className = 'lc-simulator-canvas';
    var _ref = sim.deviceStyle || {},
      _ref$canvas = _ref.canvas,
      canvas = _ref$canvas === void 0 ? {} : _ref$canvas,
      _ref$viewport = _ref.viewport,
      viewport = _ref$viewport === void 0 ? {} : _ref$viewport;
    if (sim.deviceClassName) {
      className += " " + sim.deviceClassName;
    } else if (sim.device) {
      className += " lc-simulator-device-" + sim.device;
    }
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: className,
      style: canvas
    }, /*#__PURE__*/_react["default"].createElement("div", {
      ref: function ref(elmt) {
        return sim.mountViewport(elmt);
      },
      className: "lc-simulator-canvas-viewport",
      style: viewport
    }, /*#__PURE__*/_react["default"].createElement(_bemTools.BemTools, {
      host: sim
    }), /*#__PURE__*/_react["default"].createElement(Content, {
      host: sim
    })));
  };
  return Canvas;
}(_react.Component)) || _class;
var Content = (0, _lowcodeEditorCore.observer)(_class2 = /*#__PURE__*/function (_Component3) {
  (0, _inheritsLoose2["default"])(Content, _Component3);
  function Content() {
    var _this2;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _Component3.call.apply(_Component3, [this].concat(args)) || this;
    _this2.state = {
      disabledEvents: false
    };
    _this2.dispose = void 0;
    return _this2;
  }
  var _proto3 = Content.prototype;
  _proto3.componentDidMount = function componentDidMount() {
    var _this3 = this;
    var editor = this.props.host.designer.editor;
    var onEnableEvents = function onEnableEvents(type) {
      _this3.setState({
        disabledEvents: type
      });
    };
    editor.eventBus.on('designer.builtinSimulator.disabledEvents', onEnableEvents);
    this.dispose = function () {
      editor.removeListener('designer.builtinSimulator.disabledEvents', onEnableEvents);
    };
  };
  _proto3.componentWillUnmount = function componentWillUnmount() {
    var _this$dispose;
    (_this$dispose = this.dispose) === null || _this$dispose === void 0 ? void 0 : _this$dispose.call(this);
  };
  _proto3.render = function render() {
    var sim = this.props.host;
    var disabledEvents = this.state.disabledEvents;
    var viewport = sim.viewport,
      designer = sim.designer;
    var frameStyle = {
      transform: "scale(" + viewport.scale + ")",
      height: viewport.contentHeight,
      width: viewport.contentWidth
    };
    if (disabledEvents) {
      frameStyle.pointerEvents = 'none';
    }
    var viewName = designer.viewName;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "lc-simulator-content"
    }, /*#__PURE__*/_react["default"].createElement("iframe", {
      name: viewName + "-SimulatorRenderer",
      className: "lc-simulator-content-frame",
      style: frameStyle,
      ref: function ref(frame) {
        return sim.mountContentFrame(frame);
      }
    }));
  };
  return Content;
}(_react.Component)) || _class2;