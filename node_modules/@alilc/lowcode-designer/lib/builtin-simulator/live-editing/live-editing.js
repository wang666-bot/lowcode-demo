"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.LiveEditing = void 0;
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _dec, _class, _descriptor, _LiveEditing;
var EDITOR_KEY = 'data-setter-prop';
function getSetterPropElement(ele, root) {
  var box = ele.closest("[" + EDITOR_KEY + "]");
  if (!box || !root.contains(box)) {
    return null;
  }
  return box;
}
function defaultSaveContent(content, prop) {
  prop.setValue(content);
}
var saveHandlers = [];
function addLiveEditingSaveHandler(handler) {
  saveHandlers.push(handler);
}
function clearLiveEditingSaveHandler() {
  saveHandlers = [];
}
var specificRules = [];
function addLiveEditingSpecificRule(rule) {
  specificRules.push(rule);
}
function clearLiveEditingSpecificRule() {
  specificRules = [];
}
var LiveEditing = exports.LiveEditing = (_dec = _lowcodeEditorCore.obx.ref, (_class = (_LiveEditing = /*#__PURE__*/function () {
  function LiveEditing() {
    (0, _initializerDefineProperty2["default"])(this, "_editing", _descriptor, this);
    this._dispose = void 0;
    this._save = void 0;
  }
  var _proto = LiveEditing.prototype;
  _proto.apply = function apply(target) {
    var _node$document,
      _node$componentMeta,
      _node$componentMeta2,
      _setterPropElement,
      _this = this;
    var node = target.node,
      event = target.event,
      rootElement = target.rootElement;
    var targetElement = event.target;
    var liveTextEditing = node.componentMeta.liveTextEditing;
    var editor = (_node$document = node.document) === null || _node$document === void 0 ? void 0 : _node$document.designer.editor;
    var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.npm;
    var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
      return !!item;
    }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.componentName) || '';
    editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.builtinSimulator.liveEditing', {
      selected: selected
    });
    var setterPropElement = getSetterPropElement(targetElement, rootElement);
    var propTarget = (_setterPropElement = setterPropElement) === null || _setterPropElement === void 0 ? void 0 : _setterPropElement.dataset.setterProp;
    var matched;
    if (liveTextEditing) {
      if (propTarget) {
        // 已埋点命中 data-setter-prop="proptarget", 从 liveTextEditing 读取配置（mode|onSaveContent）
        matched = liveTextEditing.find(function (config) {
          return config.propTarget == propTarget;
        });
      } else {
        var _matched;
        // 执行 embedTextEditing selector 规则，获得第一个节点 是否 contains e.target，若匹配，读取配置
        matched = liveTextEditing.find(function (config) {
          if (!config.selector) {
            return false;
          }
          setterPropElement = queryPropElement(rootElement, targetElement, config.selector);
          return !!setterPropElement;
        });
        propTarget = (_matched = matched) === null || _matched === void 0 ? void 0 : _matched.propTarget;
      }
    } else {
      specificRules.some(function (rule) {
        matched = rule(target);
        return !!matched;
      });
      if (matched) {
        propTarget = matched.propTarget;
        setterPropElement = matched.propElement || queryPropElement(rootElement, targetElement, matched.selector);
      }
    }

    // if (!propTarget) {
    //   // 自动纯文本编辑满足一下情况：
    //   //  1. children 内容都是 Leaf 且都是文本（一期）
    //   //  2. DOM 节点是单层容器，子集都是文本节点 (已满足)
    //   const isAllText = node.children?.every(item => {
    //     return item.isLeaf() && item.getProp('children')?.type === 'literal';
    //   });
    //   // TODO:
    // }

    if (propTarget && setterPropElement) {
      var _matched2, _saveHandlers$find, _matched3;
      var _prop = node.getProp(propTarget, true);
      if (this._editing === _prop) {
        return;
      }

      // 进入编辑
      //  1. 设置 contentEditable="plaintext|..."
      //  2. 添加类名
      //  3. focus & cursor locate
      //  4. 监听 blur 事件
      //  5. 设置编辑锁定：disable hover | disable select | disable canvas drag

      var onSaveContent = ((_matched2 = matched) === null || _matched2 === void 0 ? void 0 : _matched2.onSaveContent) || ((_saveHandlers$find = saveHandlers.find(function (item) {
        return item.condition(_prop);
      })) === null || _saveHandlers$find === void 0 ? void 0 : _saveHandlers$find.onSaveContent) || defaultSaveContent;
      setterPropElement.setAttribute('contenteditable', (_matched3 = matched) !== null && _matched3 !== void 0 && _matched3.mode && matched.mode !== 'plaintext' ? 'true' : 'plaintext-only');
      setterPropElement.classList.add('engine-live-editing');
      // be sure
      setterPropElement.focus();
      setCaret(event);
      this._save = function () {
        onSaveContent(setterPropElement.innerText, _prop);
      };
      var keydown = function keydown(e) {
        var _setterPropElement2;
        console.info(e.code);
        switch (e.code) {
          case 'Enter':
            break;
          // TODO: check is richtext?
          case 'Escape':
            break;
          case 'Tab':
            (_setterPropElement2 = setterPropElement) === null || _setterPropElement2 === void 0 ? void 0 : _setterPropElement2.blur();
        }
        // esc
        // enter
        // tab
      };
      var focusout = function focusout( /* e: FocusEvent */
      ) {
        _this.saveAndDispose();
      };
      setterPropElement.addEventListener('focusout', focusout);
      setterPropElement.addEventListener('keydown', keydown, true);
      this._dispose = function () {
        setterPropElement.classList.remove('engine-live-editing');
        setterPropElement.removeAttribute('contenteditable');
        setterPropElement.removeEventListener('focusout', focusout);
        setterPropElement.removeEventListener('keydown', keydown, true);
      };
      this._editing = _prop;
    }

    // TODO: process enter | esc events & joint the FocusTracker

    // TODO: upward testing for b/i/a html elements
  };
  _proto.saveAndDispose = function saveAndDispose() {
    if (this._save) {
      this._save();
      this._save = undefined;
    }
    this.dispose();
  };
  _proto.dispose = function dispose() {
    if (this._dispose) {
      this._dispose();
      this._dispose = undefined;
    }
    this._editing = null;
  };
  (0, _createClass2["default"])(LiveEditing, [{
    key: "editing",
    get: function get() {
      return this._editing;
    }
  }]);
  return LiveEditing;
}(), _LiveEditing.addLiveEditingSpecificRule = addLiveEditingSpecificRule, _LiveEditing.clearLiveEditingSpecificRule = clearLiveEditingSpecificRule, _LiveEditing.addLiveEditingSaveHandler = addLiveEditingSaveHandler, _LiveEditing.clearLiveEditingSaveHandler = clearLiveEditingSaveHandler, _LiveEditing), (_descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "_editing", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
})), _class));
function setCaret(event) {
  var _event$view;
  var doc = (_event$view = event.view) === null || _event$view === void 0 ? void 0 : _event$view.document;
  if (!doc) return;
  var range = doc.caretRangeFromPoint(event.clientX, event.clientY);
  if (range) {
    selectRange(doc, range);
    setTimeout(function () {
      return selectRange(doc, range);
    }, 1);
  }
}
function selectRange(doc, range) {
  var selection = doc.getSelection();
  if (selection) {
    selection.removeAllRanges();
    selection.addRange(range);
  }
}
function queryPropElement(rootElement, targetElement, selector) {
  if (!selector) {
    return null;
  }
  var propElement = selector === ':root' ? rootElement : rootElement.querySelector(selector);
  if (!propElement) {
    return null;
  }
  if (!propElement.contains(targetElement)) {
    // try selectorAll
    propElement = Array.from(rootElement.querySelectorAll(selector)).find(function (item) {
      return item.contains(targetElement);
    });
    if (!propElement) {
      return null;
    }
  }
  return propElement;
}