"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _misc = require("../../utils/misc");
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
// 拖动缩放
var DragResizeEngine = exports["default"] = /*#__PURE__*/function () {
  function DragResizeEngine(designer) {
    this.emitter = void 0;
    this.dragResizing = false;
    this.designer = void 0;
    this.designer = designer;
    this.emitter = (0, _lowcodeEditorCore.createModuleEventBus)('DragResizeEngine');
  }
  var _proto = DragResizeEngine.prototype;
  _proto.isDragResizing = function isDragResizing() {
    return this.dragResizing;
  }

  /**
   * drag reszie from
   * @param shell
   * @param direction n/s/e/w
   * @param boost (e: MouseEvent) => VE.Node
   */;
  _proto.from = function from(shell, direction, boost) {
    var _this = this;
    var node;
    var startEvent;
    if (!shell) {
      return function () {};
    }
    var move = function move(e) {
      var x = createResizeEvent(e);
      var moveX = x.clientX - startEvent.clientX;
      var moveY = x.clientY - startEvent.clientY;
      _this.emitter.emit('resize', e, direction, node, moveX, moveY);
    };
    var masterSensors = this.getMasterSensors();

    /* istanbul ignore next */
    var createResizeEvent = function createResizeEvent(e) {
      var _e$view;
      var sourceDocument = (_e$view = e.view) === null || _e$view === void 0 ? void 0 : _e$view.document;
      if (!sourceDocument || sourceDocument === document) {
        return e;
      }
      var srcSim = masterSensors.find(function (sim) {
        return sim.contentDocument === sourceDocument;
      });
      if (srcSim) {
        return srcSim.viewport.toGlobalPoint(e);
      }
      return e;
    };
    var over = function over(e) {
      var handleEvents = (0, _misc.makeEventsHandler)(e, masterSensors);
      handleEvents(function (doc) {
        doc.removeEventListener('mousemove', move, true);
        doc.removeEventListener('mouseup', over, true);
      });
      _this.dragResizing = false;
      _this.designer.detecting.enable = true;
      _lowcodeUtils.cursor.release();
      _this.emitter.emit('resizeEnd', e, direction, node);
    };
    var mousedown = function mousedown(e) {
      node = boost(e);
      startEvent = createResizeEvent(e);
      var handleEvents = (0, _misc.makeEventsHandler)(e, masterSensors);
      handleEvents(function (doc) {
        doc.addEventListener('mousemove', move, true);
        doc.addEventListener('mouseup', over, true);
      });
      _this.emitter.emit('resizeStart', e, direction, node);
      _this.dragResizing = true;
      _this.designer.detecting.enable = false;
      _lowcodeUtils.cursor.addState('ew-resize');
    };
    shell.addEventListener('mousedown', mousedown);
    return function () {
      shell.removeEventListener('mousedown', mousedown);
    };
  };
  _proto.onResizeStart = function onResizeStart(func) {
    var _this2 = this;
    this.emitter.on('resizeStart', func);
    return function () {
      _this2.emitter.removeListener('resizeStart', func);
    };
  };
  _proto.onResize = function onResize(func) {
    var _this3 = this;
    this.emitter.on('resize', func);
    return function () {
      _this3.emitter.removeListener('resize', func);
    };
  };
  _proto.onResizeEnd = function onResizeEnd(func) {
    var _this4 = this;
    this.emitter.on('resizeEnd', func);
    return function () {
      _this4.emitter.removeListener('resizeEnd', func);
    };
  };
  _proto.getMasterSensors = function getMasterSensors() {
    return this.designer.project.documents.map(function (doc) {
      var _doc$simulator;
      if (doc.active && (_doc$simulator = doc.simulator) !== null && _doc$simulator !== void 0 && _doc$simulator.sensorAvailable) {
        return doc.simulator;
      }
      return null;
    }).filter(Boolean);
  };
  return DragResizeEngine;
}(); // new DragResizeEngine();