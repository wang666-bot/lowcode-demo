"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.BorderSelectingInstance = exports.BorderSelectingForNode = exports.BorderSelecting = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _nodeSelector = _interopRequireDefault(require("../node-selector"));
var _class, _class2, _class3, _class4, _class5, _class6;
var BorderSelectingInstance = exports.BorderSelectingInstance = (0, _lowcodeEditorCore.observer)(_class = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(BorderSelectingInstance, _Component);
  function BorderSelectingInstance() {
    return _Component.apply(this, arguments) || this;
  }
  var _proto = BorderSelectingInstance.prototype;
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.props.observed.purge();
  };
  _proto.render = function render() {
    var _this$props = this.props,
      observed = _this$props.observed,
      highlight = _this$props.highlight,
      dragging = _this$props.dragging;
    if (!observed.hasOffset) {
      return null;
    }
    var offsetWidth = observed.offsetWidth,
      offsetHeight = observed.offsetHeight,
      offsetTop = observed.offsetTop,
      offsetLeft = observed.offsetLeft;
    var style = {
      width: offsetWidth,
      height: offsetHeight,
      transform: "translate3d(" + offsetLeft + "px, " + offsetTop + "px, 0)"
    };
    var className = (0, _classnames["default"])('lc-borders lc-borders-selecting', {
      highlight: highlight,
      dragging: dragging
    });
    var hideSelectTools = observed.node.componentMeta.advanced.hideSelectTools;
    var hideComponentAction = _lowcodeEditorCore.engineConfig.get('hideComponentAction');
    if (hideSelectTools) {
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      style: style
    }, !dragging && !hideComponentAction ? /*#__PURE__*/React.createElement(Toolbar, {
      observed: observed
    }) : null);
  };
  return BorderSelectingInstance;
}(_react.Component)) || _class;
var Toolbar = (0, _lowcodeEditorCore.observer)(_class2 = /*#__PURE__*/function (_Component2) {
  (0, _inheritsLoose2["default"])(Toolbar, _Component2);
  function Toolbar() {
    return _Component2.apply(this, arguments) || this;
  }
  var _proto2 = Toolbar.prototype;
  _proto2.render = function render() {
    var observed = this.props.observed;
    var _observed$viewport = observed.viewport,
      height = _observed$viewport.height,
      width = _observed$viewport.width;
    var BAR_HEIGHT = 20;
    var MARGIN = 1;
    var BORDER = 2;
    var SPACE_HEIGHT = BAR_HEIGHT + MARGIN + BORDER;
    var SPACE_MINIMUM_WIDTH = 160; // magic number，大致是 toolbar 的宽度
    var style;
    // 计算 toolbar 的上/下位置
    if (observed.top > SPACE_HEIGHT) {
      style = {
        top: -SPACE_HEIGHT,
        height: BAR_HEIGHT
      };
    } else if (observed.bottom + SPACE_HEIGHT < height) {
      style = {
        bottom: -SPACE_HEIGHT,
        height: BAR_HEIGHT
      };
    } else {
      style = {
        height: BAR_HEIGHT,
        top: Math.max(MARGIN, MARGIN - observed.top)
      };
    }
    // 计算 toolbar 的左/右位置
    if (SPACE_MINIMUM_WIDTH > observed.left + observed.width) {
      style.left = Math.max(-BORDER, observed.left - width - BORDER);
    } else {
      style.right = Math.max(-BORDER, observed.right - width - BORDER);
      style.justifyContent = 'flex-start';
    }
    var node = observed.node;
    var actions = [];
    node.componentMeta.availableActions.forEach(function (action) {
      var _action$important = action.important,
        important = _action$important === void 0 ? true : _action$important,
        condition = action.condition,
        content = action.content,
        name = action.name;
      if (node.isSlot() && (name === 'copy' || name === 'remove')) {
        // FIXME: need this?
        return;
      }
      if (important && (typeof condition === 'function' ? condition(node) !== false : condition !== false)) {
        actions.push(createAction(content, name, node));
      }
    });
    return /*#__PURE__*/React.createElement("div", {
      className: "lc-borders-actions",
      style: style
    }, actions, /*#__PURE__*/React.createElement(_nodeSelector["default"], {
      node: node
    }));
  };
  return Toolbar;
}(_react.Component)) || _class2;
function createAction(content, key, node) {
  if ( /*#__PURE__*/(0, _react.isValidElement)(content)) {
    return /*#__PURE__*/(0, _react.cloneElement)(content, {
      key: key,
      node: node
    });
  }
  if ((0, _lowcodeUtils.isReactComponent)(content)) {
    return /*#__PURE__*/(0, _react.createElement)(content, {
      key: key,
      node: node
    });
  }
  if ((0, _lowcodeUtils.isActionContentObject)(content)) {
    var action = content.action,
      title = content.title,
      icon = content.icon;
    return /*#__PURE__*/React.createElement("div", {
      key: key,
      className: "lc-borders-action",
      onClick: function onClick() {
        var _node$document, _node$componentMeta, _node$componentMeta2;
        action && action(node.internalToShellNode());
        var editor = (_node$document = node.document) === null || _node$document === void 0 ? void 0 : _node$document.designer.editor;
        var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.npm;
        var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
          return !!item;
        }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.componentName) || '';
        editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.border.action', {
          name: key,
          selected: selected
        });
      }
    }, icon && (0, _lowcodeUtils.createIcon)(icon, {
      key: key,
      node: node.internalToShellNode()
    }), /*#__PURE__*/React.createElement(_lowcodeEditorCore.Tip, null, title));
  }
  return null;
}
var BorderSelectingForNode = exports.BorderSelectingForNode = (0, _lowcodeEditorCore.observer)(_class3 = (_class4 = /*#__PURE__*/function (_Component3) {
  (0, _inheritsLoose2["default"])(BorderSelectingForNode, _Component3);
  function BorderSelectingForNode() {
    return _Component3.apply(this, arguments) || this;
  }
  var _proto3 = BorderSelectingForNode.prototype;
  _proto3.render = function render() {
    var _this = this;
    var instances = this.instances;
    var node = this.props.node;
    var designer = this.host.designer;
    if (!instances || instances.length < 1) {
      return null;
    }
    return /*#__PURE__*/React.createElement(_react.Fragment, {
      key: node.id
    }, instances.map(function (instance) {
      var observed = designer.createOffsetObserver({
        node: node,
        instance: instance
      });
      if (!observed) {
        return null;
      }
      return /*#__PURE__*/React.createElement(BorderSelectingInstance, {
        key: observed.id,
        dragging: _this.dragging,
        observed: observed
      });
    }));
  };
  (0, _createClass2["default"])(BorderSelectingForNode, [{
    key: "host",
    get: function get() {
      return this.props.host;
    }
  }, {
    key: "dragging",
    get: function get() {
      return this.host.designer.dragon.dragging;
    }
  }, {
    key: "instances",
    get: function get() {
      return this.host.getComponentInstances(this.props.node);
    }
  }]);
  return BorderSelectingForNode;
}(_react.Component), ((0, _applyDecoratedDescriptor2["default"])(_class4.prototype, "instances", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class4.prototype, "instances"), _class4.prototype)), _class4)) || _class3;
var BorderSelecting = exports.BorderSelecting = (0, _lowcodeEditorCore.observer)(_class5 = (_class6 = /*#__PURE__*/function (_Component4) {
  (0, _inheritsLoose2["default"])(BorderSelecting, _Component4);
  function BorderSelecting() {
    return _Component4.apply(this, arguments) || this;
  }
  var _proto4 = BorderSelecting.prototype;
  _proto4.render = function render() {
    var _this2 = this;
    var selecting = this.selecting;
    if (!selecting || selecting.length < 1) {
      return null;
    }
    return /*#__PURE__*/React.createElement(_react.Fragment, null, selecting.map(function (node) {
      return /*#__PURE__*/React.createElement(BorderSelectingForNode, {
        key: node.id,
        host: _this2.props.host,
        node: node
      });
    }));
  };
  (0, _createClass2["default"])(BorderSelecting, [{
    key: "host",
    get: function get() {
      return this.props.host;
    }
  }, {
    key: "dragging",
    get: function get() {
      return this.host.designer.dragon.dragging;
    }
  }, {
    key: "selecting",
    get: function get() {
      var doc = this.host.currentDocument;
      if (!doc || doc.suspensed || this.host.liveEditing.editing) {
        return null;
      }
      var selection = doc.selection;
      return this.dragging ? selection.getTopNodes() : selection.getNodes();
    }
  }]);
  return BorderSelecting;
}(_react.Component), ((0, _applyDecoratedDescriptor2["default"])(_class6.prototype, "selecting", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class6.prototype, "selecting"), _class6.prototype)), _class6)) || _class5;