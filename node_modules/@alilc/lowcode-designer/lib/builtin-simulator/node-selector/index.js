"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _next = require("@alifd/next");
var _react = _interopRequireDefault(require("react"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeUtils = require("@alilc/lowcode-utils");
require("./index.less");
var _class;
var Popup = _next.Overlay.Popup;
var InstanceNodeSelector = exports["default"] = (0, _lowcodeEditorCore.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(InstanceNodeSelector, _React$Component);
  function InstanceNodeSelector() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      parentNodes: []
    };
    // 获取节点的父级节点（最多获取 5 层）
    _this.getParentNodes = function (node) {
      var _node$document;
      var parentNodes = [];
      var focusNode = (_node$document = node.document) === null || _node$document === void 0 ? void 0 : _node$document.focusNode;
      if (!focusNode) {
        return null;
      }
      if (node.contains(focusNode) || !focusNode.contains(node)) {
        return parentNodes;
      }
      var currentNode = node;
      while (currentNode && parentNodes.length < 5) {
        currentNode = currentNode.getParent();
        if (currentNode) {
          parentNodes.push(currentNode);
        }
        if (currentNode === focusNode) {
          break;
        }
      }
      return parentNodes;
    };
    _this.onSelect = function (node) {
      return function (event) {
        if (!node) {
          return;
        }
        var canClick = (0, _lowcodeUtils.canClickNode)(node.internalToShellNode(), event);
        if (canClick && typeof node.select === 'function') {
          var _node$document2, _node$componentMeta, _node$componentMeta2;
          node.select();
          var editor = (_node$document2 = node.document) === null || _node$document2 === void 0 ? void 0 : _node$document2.designer.editor;
          var npm = node === null || node === void 0 ? void 0 : (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.npm;
          var selected = [npm === null || npm === void 0 ? void 0 : npm["package"], npm === null || npm === void 0 ? void 0 : npm.componentName].filter(function (item) {
            return !!item;
          }).join('-') || (node === null || node === void 0 ? void 0 : (_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.componentName) || '';
          editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('designer.border.action', {
            name: 'select',
            selected: selected
          });
        }
      };
    };
    _this.onMouseOver = function (node) {
      return function (_, flag) {
        if (flag === void 0) {
          flag = true;
        }
        if (node && typeof node.hover === 'function') {
          node.hover(flag);
        }
      };
    };
    _this.onMouseOut = function (node) {
      return function (_, flag) {
        if (flag === void 0) {
          flag = false;
        }
        if (node && typeof node.hover === 'function') {
          node.hover(flag);
        }
      };
    };
    _this.renderNodes = function () {
      var nodes = _this.state.parentNodes;
      if (!nodes || nodes.length < 1) {
        return null;
      }
      var children = nodes.map(function (node, key) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          key: key,
          onClick: _this.onSelect(node),
          onMouseEnter: _this.onMouseOver(node),
          onMouseLeave: _this.onMouseOut(node),
          className: "instance-node-selector-node"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: "instance-node-selector-node-content"
        }, /*#__PURE__*/_react["default"].createElement(_lowcodeEditorCore.Title, {
          className: "instance-node-selector-node-title",
          title: {
            label: node.title,
            icon: node.icon
          }
        })));
      });
      return children;
    };
    return _this;
  }
  var _proto = InstanceNodeSelector.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var parentNodes = this.getParentNodes(this.props.node);
    this.setState({
      parentNodes: parentNodes !== null && parentNodes !== void 0 ? parentNodes : []
    });
  };
  _proto.render = function render() {
    var node = this.props.node;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "instance-node-selector"
    }, /*#__PURE__*/_react["default"].createElement(Popup, {
      trigger: /*#__PURE__*/_react["default"].createElement("div", {
        className: "instance-node-selector-current"
      }, /*#__PURE__*/_react["default"].createElement(_lowcodeEditorCore.Title, {
        className: "instance-node-selector-node-title",
        title: {
          label: node.title,
          icon: node.icon
        }
      })),
      triggerType: "hover",
      offset: [0, 0]
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "instance-node-selector"
    }, this.renderNodes())));
  };
  return InstanceNodeSelector;
}(_react["default"].Component)) || _class;