"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.NodeChildren = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _tree = require("../../utils/tree");
var _Symbol$toStringTag, _Symbol$iterator;
var _dec, _class, _descriptor;
var NodeChildren = exports.NodeChildren = (_dec = _lowcodeEditorCore.obx.shallow, (_class = (_Symbol$toStringTag = Symbol.toStringTag, _Symbol$iterator = Symbol.iterator, /*#__PURE__*/function () {
  function NodeChildren(owner, data, options) {
    var _this = this;
    if (options === void 0) {
      options = {};
    }
    this.owner = owner;
    (0, _initializerDefineProperty2["default"])(this, "children", _descriptor, this);
    this.emitter = (0, _lowcodeEditorCore.createModuleEventBus)('NodeChildren');
    this.purged = false;
    (0, _lowcodeEditorCore.makeObservable)(this);
    this.children = (Array.isArray(data) ? data : [data]).filter(function (child) {
      return !!child;
    }).map(function (child) {
      var _this$owner$document;
      return (_this$owner$document = _this.owner.document) === null || _this$owner$document === void 0 ? void 0 : _this$owner$document.createNode(child, options.checkId);
    });
  }
  var _proto = NodeChildren.prototype;
  _proto.internalInitParent = function internalInitParent() {
    var _this2 = this;
    this.children.forEach(function (child) {
      return child.internalSetParent(_this2.owner);
    });
  }

  /**
   * 导出 schema
   */;
  _proto["export"] = function _export(stage) {
    if (stage === void 0) {
      stage = _lowcodeTypes.IPublicEnumTransformStage.Save;
    }
    stage = (0, _lowcodeUtils.compatStage)(stage);
    return this.children.map(function (node) {
      var data = node["export"](stage);
      if (node.isLeafNode && _lowcodeTypes.IPublicEnumTransformStage.Save === stage) {
        // FIXME: filter empty
        return data.children;
      }
      return data;
    });
  };
  _proto["import"] = function _import(data, checkId) {
    if (checkId === void 0) {
      checkId = false;
    }
    data = (data ? Array.isArray(data) ? data : [data] : []).filter(function (d) {
      return !!d;
    });
    var originChildren = this.children.slice();
    this.children.forEach(function (child) {
      return child.internalSetParent(null);
    });
    var children = new Array(data.length);
    for (var i = 0, l = data.length; i < l; i++) {
      var child = originChildren[i];
      var _item = data[i];
      var _node = void 0;
      if ((0, _lowcodeUtils.isNodeSchema)(_item) && !checkId && child && child.componentName === _item.componentName) {
        _node = child;
        _node["import"](_item);
      } else {
        var _this$owner$document2;
        _node = (_this$owner$document2 = this.owner.document) === null || _this$owner$document2 === void 0 ? void 0 : _this$owner$document2.createNode(_item, checkId);
      }
      children[i] = _node;
    }
    this.children = children;
    this.internalInitParent();
    if (!(0, _lowcodeUtils.shallowEqual)(children, originChildren)) {
      this.emitter.emit('change');
    }
  }

  /**
   * @deprecated
   * @param nodes
   */;
  _proto.concat = function concat(nodes) {
    return this.children.concat(nodes);
  }

  /**
   *
   */;
  _proto.isEmpty = function isEmpty() {
    return this.isEmptyNode;
  };
  _proto.notEmpty = function notEmpty() {
    return this.notEmptyNode;
  }

  /**
   * 回收销毁
   */;
  _proto.purge = function purge(useMutator) {
    if (useMutator === void 0) {
      useMutator = true;
    }
    if (this.purged) {
      return;
    }
    this.purged = true;
    this.children.forEach(function (child) {
      child.purge(useMutator);
    });
  };
  _proto.unlinkChild = function unlinkChild(node) {
    var i = this.children.map(function (d) {
      return d.id;
    }).indexOf(node.id);
    if (i < 0) {
      return false;
    }
    this.children.splice(i, 1);
    this.emitter.emit('change', {
      type: 'unlink',
      node: node
    });
  }

  /**
   * 删除一个节点
   */;
  _proto["delete"] = function _delete(node) {
    return this.internalDelete(node);
  }

  /**
   * 删除一个节点
   */;
  _proto.internalDelete = function internalDelete(node, purge, useMutator, options) {
    var _node$document;
    if (purge === void 0) {
      purge = false;
    }
    if (useMutator === void 0) {
      useMutator = true;
    }
    if (options === void 0) {
      options = {};
    }
    node.internalPurgeStart();
    if (node.isParentalNode) {
      (0, _tree.foreachReverse)(node.children, function (subNode) {
        subNode.remove(useMutator, purge, options);
      }, function (iterable, idx) {
        return iterable.get(idx);
      });
      (0, _tree.foreachReverse)(node.slots, function (slotNode) {
        slotNode.remove(useMutator, purge);
      }, function (iterable, idx) {
        return iterable[idx];
      });
    }
    // 需要在从 children 中删除 node 前记录下 index，internalSetParent 中会执行删除 (unlink) 操作
    var i = this.children.map(function (d) {
      return d.id;
    }).indexOf(node.id);
    if (purge) {
      // should set parent null
      node.internalSetParent(null, useMutator);
      try {
        node.purge();
      } catch (err) {
        console.error(err);
      }
    }
    var document = node.document;
    /* istanbul ignore next */
    var editor = (_node$document = node.document) === null || _node$document === void 0 ? void 0 : _node$document.designer.editor;
    editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('node.remove', {
      node: node,
      index: i
    });
    document === null || document === void 0 ? void 0 : document.unlinkNode(node);
    document === null || document === void 0 ? void 0 : document.selection.remove(node.id);
    document === null || document === void 0 ? void 0 : document.destroyNode(node);
    this.emitter.emit('change', {
      type: 'delete',
      node: node
    });
    if (useMutator) {
      this.reportModified(node, this.owner, {
        type: 'remove',
        propagated: false,
        isSubDeleting: this.owner.isPurging,
        removeIndex: i,
        removeNode: node
      });
    }
    // purge 为 true 时，已在 internalSetParent 中删除了子节点
    if (i > -1 && !purge) {
      this.children.splice(i, 1);
    }
    return false;
  };
  _proto.insert = function insert(node, at) {
    this.internalInsert(node, at, true);
  }

  /**
   * 插入一个节点，返回新长度
   */;
  _proto.internalInsert = function internalInsert(node, at, useMutator) {
    var _node$document3;
    if (useMutator === void 0) {
      useMutator = true;
    }
    var children = this.children;
    var index = at == null || at === -1 ? children.length : at;
    var i = children.map(function (d) {
      return d.id;
    }).indexOf(node.id);
    if (node.parent) {
      var _node$document2;
      var _editor = (_node$document2 = node.document) === null || _node$document2 === void 0 ? void 0 : _node$document2.designer.editor;
      _editor === null || _editor === void 0 ? void 0 : _editor.eventBus.emit('node.remove.topLevel', {
        node: node,
        index: node.index
      });
    }
    if (i < 0) {
      if (index < children.length) {
        children.splice(index, 0, node);
      } else {
        children.push(node);
      }
      node.internalSetParent(this.owner, useMutator);
    } else {
      if (index > i) {
        index -= 1;
      }
      if (index === i) {
        return;
      }
      children.splice(i, 1);
      children.splice(index, 0, node);
    }
    this.emitter.emit('change', {
      type: 'insert',
      node: node
    });
    this.emitter.emit('insert', node);
    /* istanbul ignore next */
    var editor = (_node$document3 = node.document) === null || _node$document3 === void 0 ? void 0 : _node$document3.designer.editor;
    editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('node.add', {
      node: node
    });
    if (useMutator) {
      this.reportModified(node, this.owner, {
        type: 'insert'
      });
    }

    // check condition group
    if (node.conditionGroup) {
      if (!(
      // just sort at condition group

      node.prevSibling && node.prevSibling.conditionGroup === node.conditionGroup || node.nextSibling && node.nextSibling.conditionGroup === node.conditionGroup)) {
        node.setConditionGroup(null);
      }
    }
    if (node.prevSibling && node.nextSibling) {
      var conditionGroup = node.prevSibling.conditionGroup;
      // insert at condition group
      if (conditionGroup && conditionGroup === node.nextSibling.conditionGroup) {
        node.setConditionGroup(conditionGroup);
      }
    }
  }

  /**
   * 取得节点索引编号
   */;
  _proto.indexOf = function indexOf(node) {
    return this.children.map(function (d) {
      return d.id;
    }).indexOf(node.id);
  }

  /**
   *
   */;
  _proto.splice = function splice(start, deleteCount, node) {
    if (node) {
      return this.children.splice(start, deleteCount, node);
    }
    return this.children.splice(start, deleteCount);
  }

  /**
   * 根据索引获得节点
   */;
  _proto.get = function get(index) {
    return this.children.length > index ? this.children[index] : null;
  }

  /**
   * 是否存在节点
   */;
  _proto.has = function has(node) {
    return this.indexOf(node) > -1;
  }

  /**
   * 迭代器
   */;
  _proto[_Symbol$iterator] = function () {
    var index = 0;
    var children = this.children;
    var length = children.length || 0;
    return {
      next: function next() {
        if (index < length) {
          return {
            value: children[index++],
            done: false
          };
        }
        return {
          value: undefined,
          done: true
        };
      }
    };
  }

  /**
   * 遍历
   */;
  _proto.forEach = function forEach(fn) {
    this.children.forEach(function (child, index) {
      return fn(child, index);
    });
  }

  /**
   * 遍历
   */;
  _proto.map = function map(fn) {
    return this.children.map(function (child, index) {
      return fn(child, index);
    });
  };
  _proto.every = function every(fn) {
    return this.children.every(function (child, index) {
      return fn(child, index);
    });
  };
  _proto.some = function some(fn) {
    return this.children.some(function (child, index) {
      return fn(child, index);
    });
  };
  _proto.filter = function filter(fn) {
    return this.children.filter(fn);
  };
  _proto.find = function find(fn) {
    return this.children.find(fn);
  };
  _proto.reduce = function reduce(fn, initialValue) {
    return this.children.reduce(fn, initialValue);
  };
  _proto.reverse = function reverse() {
    return this.children.reverse();
  };
  _proto.mergeChildren = function mergeChildren(remover, adder, sorter) {
    var _this3 = this;
    var changed = false;
    if (remover) {
      var willRemove = this.children.filter(remover);
      if (willRemove.length > 0) {
        willRemove.forEach(function (node) {
          var i = _this3.children.map(function (d) {
            return d.id;
          }).indexOf(node.id);
          if (i > -1) {
            _this3.children.splice(i, 1);
            node.remove(false);
          }
        });
        changed = true;
      }
    }
    if (adder) {
      var items = adder(this.children);
      if (items && items.length > 0) {
        items.forEach(function (child) {
          var _this3$owner$document, _node$document4;
          var node = (_this3$owner$document = _this3.owner.document) === null || _this3$owner$document === void 0 ? void 0 : _this3$owner$document.createNode(child);
          _this3.children.push(node);
          node.internalSetParent(_this3.owner);
          /* istanbul ignore next */
          var editor = (_node$document4 = node.document) === null || _node$document4 === void 0 ? void 0 : _node$document4.designer.editor;
          editor === null || editor === void 0 ? void 0 : editor.eventBus.emit('node.add', {
            node: node
          });
        });
        changed = true;
      }
    }
    if (sorter) {
      this.children = this.children.sort(sorter);
      changed = true;
    }
    if (changed) {
      this.emitter.emit('change');
    }
  };
  _proto.onChange = function onChange(fn) {
    var _this4 = this;
    this.emitter.on('change', fn);
    return function () {
      _this4.emitter.removeListener('change', fn);
    };
  };
  _proto.onInsert = function onInsert(fn) {
    var _this5 = this;
    this.emitter.on('insert', fn);
    return function () {
      _this5.emitter.removeListener('insert', fn);
    };
  };
  _proto.reportModified = function reportModified(node, owner, options) {
    var _owner$componentMeta;
    if (options === void 0) {
      options = {};
    }
    if (!node) {
      return;
    }
    if (node.isRootNode) {
      return;
    }
    var callbacks = (_owner$componentMeta = owner.componentMeta) === null || _owner$componentMeta === void 0 ? void 0 : _owner$componentMeta.advanced.callbacks;
    if (callbacks !== null && callbacks !== void 0 && callbacks.onSubtreeModified) {
      try {
        callbacks === null || callbacks === void 0 ? void 0 : callbacks.onSubtreeModified.call(node.internalToShellNode(), owner.internalToShellNode(), options);
      } catch (e) {
        console.error('error when execute advanced.callbacks.onSubtreeModified', e);
      }
    }
    if (owner.parent && !owner.parent.isRootNode) {
      this.reportModified(node, owner.parent, (0, _extends2["default"])({}, options, {
        propagated: true
      }));
    }
  };
  (0, _createClass2["default"])(NodeChildren, [{
    key: "size",
    get:
    /**
     * 元素个数
     */
    function get() {
      return this.children.length;
    }
  }, {
    key: "isEmptyNode",
    get: function get() {
      return this.size < 1;
    }
  }, {
    key: "notEmptyNode",
    get: function get() {
      return this.size > 0;
    }
  }, {
    key: "length",
    get: function get() {
      return this.children.length;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      // 保证向前兼容性
      return 'Array';
    }
  }]);
  return NodeChildren;
}()), (_descriptor = (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "children", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "size", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "size"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "length", [_lowcodeEditorCore.computed], Object.getOwnPropertyDescriptor(_class.prototype, "length"), _class.prototype)), _class));