import { IPublicTypeTitleContent, IPublicModelExclusiveGroup } from '@alilc/lowcode-types';
import type { INode } from './node';
export interface IExclusiveGroup extends IPublicModelExclusiveGroup<INode> {
    readonly name: string;
    get index(): number | undefined;
    remove(node: INode): void;
    add(node: INode): void;
    isVisible(node: INode): boolean;
    get length(): number;
    get visibleNode(): INode;
}
export declare class ExclusiveGroup implements IExclusiveGroup {
    readonly name: string;
    readonly isExclusiveGroup = true;
    readonly id: string;
    readonly title: IPublicTypeTitleContent;
    readonly children: INode[];
    private visibleIndex;
    get document(): import("..").IDocumentModel;
    get zLevel(): number;
    get length(): number;
    get visibleNode(): INode;
    get firstNode(): INode;
    get index(): number;
    constructor(name: string, title?: IPublicTypeTitleContent);
    add(node: INode): void;
    remove(node: INode): void;
    setVisible(node: INode): void;
    isVisible(node: INode): boolean;
}
export declare function isExclusiveGroup(obj: any): obj is ExclusiveGroup;
