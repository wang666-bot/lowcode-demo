import { ILowCodePluginRuntime, ILowCodePluginManager, IPluginContextOptions, PluginPreference, ILowCodePluginContextApiAssembler } from './plugin-types';
import LowCodePluginContext from './plugin-context';
import { IPublicTypePluginRegisterOptions, IPublicTypePreferenceValueType, IPublicTypePlugin } from '@alilc/lowcode-types';
export declare class LowCodePluginManager implements ILowCodePluginManager {
    readonly viewName: string;
    private plugins;
    pluginsMap: Map<string, ILowCodePluginRuntime>;
    pluginContextMap: Map<string, LowCodePluginContext>;
    private pluginPreference?;
    contextApiAssembler: ILowCodePluginContextApiAssembler;
    constructor(contextApiAssembler: ILowCodePluginContextApiAssembler, viewName?: string);
    _getLowCodePluginContext: (options: IPluginContextOptions) => LowCodePluginContext;
    isEngineVersionMatched(versionExp: string): boolean;
    /**
     * register a plugin
     * @param pluginConfigCreator - a creator function which returns the plugin config
     * @param options - the plugin options
     * @param registerOptions - the plugin register options
     */
    register(pluginModel: IPublicTypePlugin, options?: any, registerOptions?: IPublicTypePluginRegisterOptions): Promise<void>;
    get(pluginName: string): ILowCodePluginRuntime | undefined;
    getAll(): ILowCodePluginRuntime[];
    has(pluginName: string): boolean;
    delete(pluginName: string): Promise<boolean>;
    init(pluginPreference?: PluginPreference): Promise<void>;
    destroy(): Promise<void>;
    get size(): number;
    getPluginPreference(pluginName: string): Record<string, IPublicTypePreferenceValueType> | null | undefined;
    toProxy(): this;
    setDisabled(pluginName: string, flag?: boolean): void;
    dispose(): Promise<void>;
}
