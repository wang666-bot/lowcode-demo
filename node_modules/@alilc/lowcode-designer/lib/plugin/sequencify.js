"use strict";

exports.__esModule = true;
exports["default"] = _default;
exports.sequence = sequence;
function sequence(_ref) {
  var tasks = _ref.tasks,
    names = _ref.names,
    results = _ref.results,
    missing = _ref.missing,
    recursive = _ref.recursive,
    nest = _ref.nest,
    parentName = _ref.parentName;
  names.forEach(function (name) {
    if (results.indexOf(name) !== -1) {
      return; // de-dup results
    }
    var node = tasks[name];
    if (!node) {
      missing.push([parentName, name].filter(function (d) {
        return !!d;
      }).join('.'));
    } else if (nest.indexOf(name) > -1) {
      nest.push(name);
      recursive.push(nest.slice(0));
      nest.pop();
    } else if (node.dep.length) {
      nest.push(name);
      sequence({
        tasks: tasks,
        parentName: name,
        names: node.dep,
        results: results,
        missing: missing,
        recursive: recursive,
        nest: nest
      }); // recurse
      nest.pop();
    }
    results.push(name);
  });
}

// tasks: object with keys as task names
// names: array of task names
function _default(tasks, names) {
  var results = []; // the final sequence
  var missing = []; // missing tasks
  var recursive = []; // recursive task dependencies

  sequence({
    tasks: tasks,
    names: names,
    results: results,
    missing: missing,
    recursive: recursive,
    nest: []
  });
  if (missing.length || recursive.length) {
    results = []; // results are incomplete at best, completely wrong at worst, remove them to avoid confusion
  }
  return {
    sequence: results,
    missingTasks: missing,
    recursiveDependencies: recursive
  };
}