"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _pluginUtils = require("./plugin-utils");
/* eslint-disable no-multi-assign */
var PluginContext = exports["default"] = /*#__PURE__*/function () {
  function PluginContext(options, contextApiAssembler) {
    this.hotkey = void 0;
    this.project = void 0;
    this.skeleton = void 0;
    this.setters = void 0;
    this.material = void 0;
    this.event = void 0;
    this.config = void 0;
    this.common = void 0;
    this.logger = void 0;
    this.plugins = void 0;
    this.preference = void 0;
    this.pluginEvent = void 0;
    this.canvas = void 0;
    this.workspace = void 0;
    this.registerLevel = void 0;
    this.editorWindow = void 0;
    this.commonUI = void 0;
    this.isPluginRegisteredInWorkspace = void 0;
    var _options$pluginName = options.pluginName,
      pluginName = _options$pluginName === void 0 ? 'anonymous' : _options$pluginName,
      _options$meta = options.meta,
      meta = _options$meta === void 0 ? {} : _options$meta;
    contextApiAssembler.assembleApis(this, pluginName, meta);
    this.pluginEvent = (0, _lowcodeEditorCore.createModuleEventBus)(pluginName, 200);
    var enhancePluginContextHook = _lowcodeEditorCore.engineConfig.get('enhancePluginContextHook');
    if (enhancePluginContextHook) {
      enhancePluginContextHook(this);
    }
  }
  var _proto = PluginContext.prototype;
  _proto.setPreference = function setPreference(pluginName, preferenceDeclaration) {
    var _this = this;
    var getPreferenceValue = function getPreferenceValue(key, defaultValue) {
      if (!(0, _pluginUtils.isValidPreferenceKey)(key, preferenceDeclaration)) {
        return undefined;
      }
      var pluginPreference = _this.plugins.getPluginPreference(pluginName) || {};
      if (pluginPreference[key] === undefined || pluginPreference[key] === null) {
        return defaultValue;
      }
      return pluginPreference[key];
    };
    this.preference = {
      getPreferenceValue: getPreferenceValue
    };
  };
  return PluginContext;
}();