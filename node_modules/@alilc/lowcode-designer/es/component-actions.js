import _extends from "@babel/runtime/helpers/extends";
import { engineConfig } from '@alilc/lowcode-editor-core';
import { intlNode } from './locale';
import { IconLock, IconUnlock, IconRemove, IconClone, IconHidden } from './icons';
import { componentDefaults, legacyIssues } from './transducers';
function deduplicateRef(node) {
  var _node$children;
  var currentRef = node === null || node === void 0 ? void 0 : node.getPropValue('ref');
  if (currentRef) {
    node === null || node === void 0 ? void 0 : node.setPropValue('ref', node.componentName.toLowerCase() + "-" + Math.random().toString(36).slice(2, 9));
  }
  node === null || node === void 0 ? void 0 : (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.forEach(deduplicateRef);
}
export var ComponentActions = /*#__PURE__*/function () {
  function ComponentActions() {
    this.metadataTransducers = [];
    this.actions = [{
      name: 'remove',
      content: {
        icon: IconRemove,
        title: intlNode('remove'),
        /* istanbul ignore next */action: function action(node) {
          node.remove();
        }
      },
      important: true
    }, {
      name: 'hide',
      content: {
        icon: IconHidden,
        title: intlNode('hide'),
        /* istanbul ignore next */action: function action(node) {
          node.visible = false;
        }
      },
      /* istanbul ignore next */
      condition: function condition(node) {
        var _node$componentMeta;
        return (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0 ? void 0 : _node$componentMeta.isModal;
      },
      important: true
    }, {
      name: 'copy',
      content: {
        icon: IconClone,
        title: intlNode('copy'),
        /* istanbul ignore next */action: function action(node) {
          // node.remove();
          var doc = node.document,
            parent = node.parent,
            index = node.index;
          if (parent) {
            var newNode = doc === null || doc === void 0 ? void 0 : doc.insertNode(parent, node, (index !== null && index !== void 0 ? index : 0) + 1, true);
            deduplicateRef(newNode);
            newNode === null || newNode === void 0 ? void 0 : newNode.select();
            var _node$getRGL = node === null || node === void 0 ? void 0 : node.getRGL(),
              isRGL = _node$getRGL.isRGL,
              rglNode = _node$getRGL.rglNode;
            if (isRGL) {
              // 复制 layout 信息
              var layout = (rglNode === null || rglNode === void 0 ? void 0 : rglNode.getPropValue('layout')) || [];
              var curLayout = layout.filter(function (item) {
                return item.i === node.getPropValue('fieldId');
              });
              if (curLayout && curLayout[0]) {
                layout.push(_extends({}, curLayout[0], {
                  i: newNode === null || newNode === void 0 ? void 0 : newNode.getPropValue('fieldId')
                }));
                rglNode === null || rglNode === void 0 ? void 0 : rglNode.setPropValue('layout', layout);
                // 如果是磁贴块复制，则需要滚动到影响位置
                setTimeout(function () {
                  var _newNode$document, _newNode$document$pro, _newNode$document$pro2;
                  return newNode === null || newNode === void 0 ? void 0 : (_newNode$document = newNode.document) === null || _newNode$document === void 0 ? void 0 : (_newNode$document$pro = _newNode$document.project) === null || _newNode$document$pro === void 0 ? void 0 : (_newNode$document$pro2 = _newNode$document$pro.simulatorHost) === null || _newNode$document$pro2 === void 0 ? void 0 : _newNode$document$pro2.scrollToNode(newNode);
                }, 10);
              }
            }
          }
        }
      },
      important: true
    }, {
      name: 'lock',
      content: {
        icon: IconLock,
        // 锁定 icon
        title: intlNode('lock'),
        /* istanbul ignore next */action: function action(node) {
          node.lock();
        }
      },
      /* istanbul ignore next */
      condition: function condition(node) {
        return engineConfig.get('enableCanvasLock', false) && node.isContainerNode && !node.isLocked;
      },
      important: true
    }, {
      name: 'unlock',
      content: {
        icon: IconUnlock,
        // 解锁 icon
        title: intlNode('unlock'),
        /* istanbul ignore next */action: function action(node) {
          node.lock(false);
        }
      },
      /* istanbul ignore next */
      condition: function condition(node) {
        return engineConfig.get('enableCanvasLock', false) && node.isContainerNode && node.isLocked;
      },
      important: true
    }];
    this.registerMetadataTransducer(legacyIssues, 2, 'legacy-issues'); // should use a high level priority, eg: 2
    this.registerMetadataTransducer(componentDefaults, 100, 'component-defaults');
  }
  var _proto = ComponentActions.prototype;
  _proto.removeBuiltinComponentAction = function removeBuiltinComponentAction(name) {
    var i = this.actions.findIndex(function (action) {
      return action.name === name;
    });
    if (i > -1) {
      this.actions.splice(i, 1);
    }
  };
  _proto.addBuiltinComponentAction = function addBuiltinComponentAction(action) {
    this.actions.push(action);
  };
  _proto.modifyBuiltinComponentAction = function modifyBuiltinComponentAction(actionName, handle) {
    var builtinAction = this.actions.find(function (action) {
      return action.name === actionName;
    });
    if (builtinAction) {
      handle(builtinAction);
    }
  };
  _proto.registerMetadataTransducer = function registerMetadataTransducer(transducer, level, id) {
    if (level === void 0) {
      level = 100;
    }
    transducer.level = level;
    transducer.id = id;
    var i = this.metadataTransducers.findIndex(function (item) {
      return item.level != null && item.level > level;
    });
    if (i < 0) {
      this.metadataTransducers.push(transducer);
    } else {
      this.metadataTransducers.splice(i, 0, transducer);
    }
  };
  _proto.getRegisteredMetadataTransducers = function getRegisteredMetadataTransducers() {
    return this.metadataTransducers;
  };
  return ComponentActions;
}();