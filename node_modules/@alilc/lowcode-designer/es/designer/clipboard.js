function getDataFromPasteEvent(event) {
  var clipboardData = event.clipboardData;
  if (!clipboardData) {
    return null;
  }
  try {
    // { componentsMap, componentsTree, ... }
    var _data = JSON.parse(clipboardData.getData('text/plain'));
    if (!_data) {
      return {};
    }
    if (_data.componentsTree) {
      return _data;
    } else if (_data.componentName) {
      return {
        componentsTree: [_data]
      };
    }
  } catch (error) {
    // TODO: open the parser implement
    return {};
  }
}
var Clipboard = /*#__PURE__*/function () {
  function Clipboard() {
    this.copyPasters = [];
    this.waitFn = void 0;
    this.injectCopyPaster(document);
  }
  var _proto = Clipboard.prototype;
  _proto.isCopyPasteEvent = function isCopyPasteEvent(e) {
    this.isCopyPaster(e.target);
  };
  _proto.isCopyPaster = function isCopyPaster(el) {
    return this.copyPasters.includes(el);
  };
  _proto.initCopyPaster = function initCopyPaster(el) {
    var _this = this;
    this.copyPasters.push(el);
    var onPaste = function onPaste(e) {
      if (_this.waitFn) {
        _this.waitFn(getDataFromPasteEvent(e), e);
        _this.waitFn = undefined;
      }
      el.blur();
    };
    el.addEventListener('paste', onPaste, false);
    return function () {
      el.removeEventListener('paste', onPaste, false);
      var i = _this.copyPasters.indexOf(el);
      if (i > -1) {
        _this.copyPasters.splice(i, 1);
      }
    };
  };
  _proto.injectCopyPaster = function injectCopyPaster(document) {
    if (this.copyPasters.find(function (x) {
      return x.ownerDocument === document;
    })) {
      return;
    }
    var copyPaster = document.createElement('textarea');
    copyPaster.style.cssText = 'position: absolute;left: -9999px;top:-100px';
    if (document.body) {
      document.body.appendChild(copyPaster);
    } else {
      document.addEventListener('DOMContentLoaded', function () {
        document.body.appendChild(copyPaster);
      });
    }
    var dispose = this.initCopyPaster(copyPaster);
    return function () {
      dispose();
      document.removeChild(copyPaster);
    };
  };
  _proto.setData = function setData(data) {
    var copyPaster = this.copyPasters.find(function (x) {
      return x.ownerDocument;
    });
    if (!copyPaster) {
      return;
    }
    copyPaster.value = typeof data === 'string' ? data : JSON.stringify(data);
    copyPaster.select();
    copyPaster.ownerDocument.execCommand('copy');
    copyPaster.blur();
  };
  _proto.waitPasteData = function waitPasteData(keyboardEvent, cb) {
    var win = keyboardEvent.view;
    if (!win) {
      return;
    }
    var copyPaster = this.copyPasters.find(function (cp) {
      return cp.ownerDocument === win.document;
    });
    if (copyPaster) {
      copyPaster.select();
      this.waitFn = cb;
    }
  };
  return Clipboard;
}();
export var clipboard = new Clipboard();