import { IEventBus } from '@alilc/lowcode-editor-core';
import { IPublicApiSetters, IPublicModelEditor, IPublicModelSettingField, IPublicTypeFieldExtraProps, IPublicTypeSetValueOptions } from '@alilc/lowcode-types';
import { ISettingEntry } from './setting-entry-type';
import { INode } from '../../document';
import type { IComponentMeta } from '../../component-meta';
import { IDesigner } from '../designer';
import { ISettingTopEntry } from './setting-top-entry';
import { ISettingField } from './setting-field';
export interface ISettingPropEntry extends ISettingEntry {
    readonly isGroup: boolean;
    get props(): ISettingTopEntry;
    get name(): string | number | undefined;
    valueChange(options: IPublicTypeSetValueOptions): void;
    getKey(): string | number | undefined;
    setKey(key: string | number): void;
    getDefaultValue(): any;
    setUseVariable(flag: boolean): void;
    getProps(): ISettingTopEntry;
    isUseVariable(): boolean;
    getMockOrValue(): any;
    remove(): void;
    setValue(val: any, isHotValue?: boolean, force?: boolean, extraOptions?: IPublicTypeSetValueOptions): void;
    internalToShellField(): IPublicModelSettingField;
}
export declare class SettingPropEntry implements ISettingPropEntry {
    readonly parent: ISettingTopEntry | ISettingField;
    readonly editor: IPublicModelEditor;
    readonly isSameComponent: boolean;
    readonly isMultiple: boolean;
    readonly isSingle: boolean;
    readonly setters: IPublicApiSetters;
    readonly nodes: INode[];
    readonly componentMeta: IComponentMeta | null;
    readonly designer: IDesigner | undefined;
    readonly top: ISettingTopEntry;
    readonly isGroup: boolean;
    readonly type: 'field' | 'group';
    readonly id: string;
    readonly emitter: IEventBus;
    private _name;
    get name(): string | number;
    get path(): (string | number)[];
    extraProps: IPublicTypeFieldExtraProps;
    constructor(parent: ISettingTopEntry | ISettingField, name: string | number | undefined, type?: 'field' | 'group');
    getId(): string;
    setKey(key: string | number): void;
    getKey(): string | number;
    remove(): void;
    /**
     * 判断当前属性值是否一致
     * -1 多种值
     * 0 无值
     * 1 类似值，比如数组长度一样
     * 2 单一植
     */
    get valueState(): number;
    /**
     * 获取当前属性值
     */
    getValue(): any;
    /**
     * 设置当前属性值
     */
    setValue(val: any, isHotValue?: boolean, force?: boolean, extraOptions?: IPublicTypeSetValueOptions): void;
    /**
     * 清除已设置的值
     */
    clearValue(): void;
    /**
     * 获取子项
     */
    get(propName: string | number): ISettingField;
    /**
     * 设置子级属性值
     */
    setPropValue(propName: string | number, value: any): void;
    /**
     * 清除已设置值
     */
    clearPropValue(propName: string | number): void;
    /**
     * 获取子级属性值
     */
    getPropValue(propName: string | number): any;
    /**
     * 获取顶层附属属性值
     */
    getExtraPropValue(propName: string): void;
    /**
     * 设置顶层附属属性值
     */
    setExtraPropValue(propName: string, value: any): void;
    getNode(): INode;
    getName(): string;
    getProps(): ISettingTopEntry;
    get props(): ISettingTopEntry;
    onValueChange(func: () => any): () => void;
    /**
     * @deprecated
     */
    valueChange(options?: IPublicTypeSetValueOptions): void;
    notifyValueChange(oldValue: any, newValue: any): void;
    getDefaultValue(): any;
    isIgnore(): boolean;
    getVariableValue(): string;
    setVariableValue(value: string): void;
    setUseVariable(flag: boolean): void;
    isUseVariable(): boolean;
    get useVariable(): boolean;
    getMockOrValue(): any;
    internalToShellField(): IPublicModelSettingField;
}
