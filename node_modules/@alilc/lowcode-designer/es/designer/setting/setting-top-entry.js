import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
var _class;
import { isCustomView } from '@alilc/lowcode-utils';
import { computed, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { SettingField } from './setting-field';
function generateSessionId(nodes) {
  return nodes.map(function (node) {
    return node.id;
  }).sort().join(',');
}
export var SettingTopEntry = (_class = /*#__PURE__*/function () {
  function SettingTopEntry(editor, nodes) {
    var _this$first$document;
    this.editor = editor;
    this.nodes = nodes;
    this.emitter = createModuleEventBus('SettingTopEntry');
    this._items = [];
    this._componentMeta = null;
    this._isSame = true;
    this._settingFieldMap = {};
    this.path = [];
    this.top = this;
    this.parent = this;
    this.id = void 0;
    this.first = void 0;
    this.designer = void 0;
    this.setters = void 0;
    this.disposeFunctions = [];
    if (!Array.isArray(nodes) || nodes.length < 1) {
      throw new ReferenceError('nodes should not be empty');
    }
    this.id = generateSessionId(nodes);
    this.first = nodes[0];
    this.designer = (_this$first$document = this.first.document) === null || _this$first$document === void 0 ? void 0 : _this$first$document.designer;
    this.setters = editor.get('setters');

    // setups
    this.setupComponentMeta();

    // clear fields
    this.setupItems();
    this.disposeFunctions.push(this.setupEvents());
  }
  var _proto = SettingTopEntry.prototype;
  _proto.setupComponentMeta = function setupComponentMeta() {
    // todo: enhance compile a temp configure.compiled
    var first = this.first;
    var meta = first.componentMeta;
    var l = this.nodes.length;
    var theSame = true;
    for (var i = 1; i < l; i++) {
      var other = this.nodes[i];
      if (other.componentMeta !== meta) {
        theSame = false;
        break;
      }
    }
    if (theSame) {
      this._isSame = true;
      this._componentMeta = meta;
    } else {
      this._isSame = false;
      this._componentMeta = null;
    }
  };
  _proto.setupItems = function setupItems() {
    var _this = this;
    if (this.componentMeta) {
      var settingFieldMap = {};
      var settingFieldCollector = function settingFieldCollector(name, field) {
        settingFieldMap[name] = field;
      };
      this._items = this.componentMeta.configure.map(function (item) {
        if (isCustomView(item)) {
          return item;
        }
        return new SettingField(_this, item, settingFieldCollector);
      });
      this._settingFieldMap = settingFieldMap;
    }
  };
  _proto.setupEvents = function setupEvents() {
    var _this$componentMeta,
      _this2 = this;
    return (_this$componentMeta = this.componentMeta) === null || _this$componentMeta === void 0 ? void 0 : _this$componentMeta.onMetadataChange(function () {
      _this2.setupItems();
    });
  }

  /**
   * 获取当前属性值
   */;
  _proto.getValue = function getValue() {
    var _this$first;
    return (_this$first = this.first) === null || _this$first === void 0 ? void 0 : _this$first.propsData;
  }

  /**
   * 设置当前属性值
   */;
  _proto.setValue = function setValue(val) {
    this.setProps(val);
    // TODO: emit value change
  }

  /**
   * 获取子项
   */;
  _proto.get = function get(propName) {
    if (!propName) return null;
    return this._settingFieldMap[propName] || new SettingField(this, {
      name: propName
    });
  }

  /**
   * 设置子级属性值
   */;
  _proto.setPropValue = function setPropValue(propName, value) {
    this.nodes.forEach(function (node) {
      node.setPropValue(propName.toString(), value);
    });
  }

  /**
   * 清除已设置值
   */;
  _proto.clearPropValue = function clearPropValue(propName) {
    this.nodes.forEach(function (node) {
      node.clearPropValue(propName.toString());
    });
  }

  /**
   * 获取子级属性值
   */;
  _proto.getPropValue = function getPropValue(propName) {
    var _this$first$getProp;
    return (_this$first$getProp = this.first.getProp(propName.toString(), true)) === null || _this$first$getProp === void 0 ? void 0 : _this$first$getProp.getValue();
  }

  /**
   * 获取顶层附属属性值
   */;
  _proto.getExtraPropValue = function getExtraPropValue(propName) {
    var _this$first$getExtraP;
    return (_this$first$getExtraP = this.first.getExtraProp(propName, false)) === null || _this$first$getExtraP === void 0 ? void 0 : _this$first$getExtraP.getValue();
  }

  /**
   * 设置顶层附属属性值
   */;
  _proto.setExtraPropValue = function setExtraPropValue(propName, value) {
    this.nodes.forEach(function (node) {
      var _node$getExtraProp;
      (_node$getExtraProp = node.getExtraProp(propName, true)) === null || _node$getExtraProp === void 0 ? void 0 : _node$getExtraProp.setValue(value);
    });
  }

  // 设置多个属性值，替换原有值
  ;
  _proto.setProps = function setProps(data) {
    this.nodes.forEach(function (node) {
      node.setProps(data);
    });
  }

  // 设置多个属性值，和原有值合并
  ;
  _proto.mergeProps = function mergeProps(data) {
    this.nodes.forEach(function (node) {
      node.mergeProps(data);
    });
  };
  _proto.disposeItems = function disposeItems() {
    this._items.forEach(function (item) {
      return isPurgeable(item) && item.purge();
    });
    this._items = [];
  };
  _proto.purge = function purge() {
    this.disposeItems();
    this._settingFieldMap = {};
    this.emitter.removeAllListeners();
    this.disposeFunctions.forEach(function (f) {
      return f();
    });
    this.disposeFunctions = [];
  };
  _proto.getProp = function getProp(propName) {
    return this.get(propName);
  }

  // ==== copy some Node api =====
  ;
  _proto.getStatus = function getStatus() {};
  _proto.setStatus = function setStatus() {};
  _proto.getChildren = function getChildren() {
    // this.nodes.map()
  };
  _proto.getDOMNode = function getDOMNode() {};
  _proto.getId = function getId() {
    return this.id;
  };
  _proto.getPage = function getPage() {
    return this.first.document;
  }

  /**
   * @deprecated
   */;
  _proto.getNode = function getNode() {
    return this.nodes[0];
  };
  _createClass(SettingTopEntry, [{
    key: "componentMeta",
    get: function get() {
      return this._componentMeta;
    }
  }, {
    key: "items",
    get: function get() {
      return this._items;
    }

    /**
     * 同样的
     */
  }, {
    key: "isSameComponent",
    get: function get() {
      return this._isSame;
    }

    /**
     * 一个
     */
  }, {
    key: "isSingle",
    get: function get() {
      return this.nodes.length === 1;
    }
  }, {
    key: "isLocked",
    get: function get() {
      return this.first.isLocked;
    }

    /**
     * 多个
     */
  }, {
    key: "isMultiple",
    get: function get() {
      return this.nodes.length > 1;
    }
  }, {
    key: "node",
    get: function get() {
      return this.getNode();
    }
  }]);
  return SettingTopEntry;
}(), (_applyDecoratedDescriptor(_class.prototype, "getValue", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "getValue"), _class.prototype)), _class);
function isPurgeable(obj) {
  return obj && obj.purge;
}