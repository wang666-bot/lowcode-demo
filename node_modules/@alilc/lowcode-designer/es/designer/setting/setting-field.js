import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _excluded = ["title", "items", "setter", "extraProps"];
var _dec, _class, _descriptor;
import { Transducer } from './utils';
import { SettingPropEntry } from './setting-prop-entry';
import { computed, obx, makeObservable, action, untracked, intl } from '@alilc/lowcode-editor-core';
import { cloneDeep, isCustomView, isDynamicSetter, isJSExpression } from '@alilc/lowcode-utils';
function getSettingFieldCollectorKey(parent, config) {
  var cur = parent;
  var path = [config.name];
  while (cur !== parent.top) {
    if (cur instanceof SettingField && cur.type !== 'group') {
      path.unshift(cur.name);
    }
    cur = cur.parent;
  }
  return path.join('.');
}
export var SettingField = (_dec = obx.ref, (_class = /*#__PURE__*/function (_SettingPropEntry) {
  _inheritsLoose(SettingField, _SettingPropEntry);
  function SettingField(parent, config, settingFieldCollector) {
    var _this;
    _this = _SettingPropEntry.call(this, parent, config.name, config.type) || this;
    _this.settingFieldCollector = settingFieldCollector;
    _this.isSettingField = true;
    _this.isRequired = void 0;
    _this.transducer = void 0;
    _this._config = void 0;
    _this.hotValue = void 0;
    _this.parent = void 0;
    _this.extraProps = void 0;
    // ==== dynamic properties ====
    _this._title = void 0;
    _this._setter = void 0;
    _initializerDefineProperty(_this, "_expanded", _descriptor, _assertThisInitialized(_this));
    _this._items = [];
    makeObservable(_assertThisInitialized(_this));
    var title = config.title,
      items = config.items,
      setter = config.setter,
      extraProps = config.extraProps,
      rest = _objectWithoutPropertiesLoose(config, _excluded);
    _this.parent = parent;
    _this._config = config;
    _this._title = title;
    _this._setter = setter;
    _this.extraProps = _extends({}, rest, extraProps);
    _this.isRequired = config.isRequired || (setter === null || setter === void 0 ? void 0 : setter.isRequired);
    _this._expanded = !(extraProps !== null && extraProps !== void 0 && extraProps.defaultCollapsed);

    // initial items
    if (items && items.length > 0) {
      _this.initItems(items, settingFieldCollector);
    }
    if (_this.type !== 'group' && settingFieldCollector && config.name) {
      settingFieldCollector(getSettingFieldCollectorKey(parent, config), _assertThisInitialized(_this));
    }

    // compatiable old config
    _this.transducer = new Transducer(_assertThisInitialized(_this), {
      setter: setter
    });
    return _this;
  }
  var _proto = SettingField.prototype;
  _proto.setExpanded = function setExpanded(value) {
    this._expanded = value;
  };
  _proto.initItems = function initItems(items, settingFieldCollector) {
    var _this2 = this;
    this._items = items.map(function (item) {
      if (isCustomView(item)) {
        return item;
      }
      return new SettingField(_this2, item, settingFieldCollector);
    });
  };
  _proto.disposeItems = function disposeItems() {
    this._items.forEach(function (item) {
      return isSettingField(item) && item.purge();
    });
    this._items = [];
  }

  // 创建子配置项，通常用于 object/array 类型数据
  ;
  _proto.createField = function createField(config) {
    var _this$settingFieldCol;
    (_this$settingFieldCol = this.settingFieldCollector) === null || _this$settingFieldCol === void 0 ? void 0 : _this$settingFieldCol.call(this, getSettingFieldCollectorKey(this.parent, config), this);
    return new SettingField(this, config, this.settingFieldCollector);
  };
  _proto.purge = function purge() {
    this.disposeItems();
  }

  // ======= compatibles for vision ======
  ;
  _proto.getConfig = function getConfig(configName) {
    if (configName) {
      return this.config[configName];
    }
    return this._config;
  };
  _proto.getItems = function getItems(filter) {
    return this._items.filter(function (item) {
      if (filter) {
        return filter(item);
      }
      return true;
    });
  };
  _proto.setValue = function setValue(val, isHotValue, force, extraOptions) {
    if (isHotValue) {
      this.setHotValue(val, extraOptions);
      return;
    }
    _SettingPropEntry.prototype.setValue.call(this, val, false, false, extraOptions);
  };
  _proto.getHotValue = function getHotValue() {
    if (this.hotValue) {
      return this.hotValue;
    }
    // avoid View modify
    var v = cloneDeep(this.getMockOrValue());
    if (v == null) {
      v = this.extraProps.defaultValue;
    }
    return this.transducer.toHot(v);
  }

  /* istanbul ignore next */;
  _proto.setMiniAppDataSourceValue = function setMiniAppDataSourceValue(data, options) {
    this.hotValue = data;
    var v = this.transducer.toNative(data);
    this.setValue(v, false, false, options);
    // dirty fix list setter
    if (Array.isArray(data) && data[0] && data[0].__sid__) {
      return;
    }
    this.valueChange();
  };
  _proto.setHotValue = function setHotValue(data, options) {
    this.hotValue = data;
    var value = this.transducer.toNative(data);
    if (options) {
      options.fromSetHotValue = true;
    } else {
      options = {
        fromSetHotValue: true
      };
    }
    if (this.isUseVariable()) {
      var oldValue = this.getValue();
      if (isJSExpression(value)) {
        this.setValue({
          type: 'JSExpression',
          value: value.value,
          mock: oldValue.mock
        }, false, false, options);
      } else {
        this.setValue({
          type: 'JSExpression',
          value: oldValue.value,
          mock: value
        }, false, false, options);
      }
    } else {
      this.setValue(value, false, false, options);
    }

    // dirty fix list setter
    if (Array.isArray(data) && data[0] && data[0].__sid__) {
      return;
    }
    this.valueChange(options);
  };
  _proto.onEffect = function onEffect(action) {
    return this.designer.autorun(action, true);
  };
  _proto.internalToShellField = function internalToShellField() {
    return this.designer.shellModelFactory.createSettingField(this);
  };
  _createClass(SettingField, [{
    key: "title",
    get: function get() {
      return this._title || (typeof this.name === 'number' ? intl('Item') + " " + this.name : this.name);
    }
  }, {
    key: "setter",
    get: function get() {
      var _this3 = this;
      if (!this._setter) {
        return null;
      }
      if (isDynamicSetter(this._setter)) {
        return untracked(function () {
          var _this3$_setter;
          var shellThis = _this3.internalToShellField();
          return (_this3$_setter = _this3._setter) === null || _this3$_setter === void 0 ? void 0 : _this3$_setter.call(shellThis, shellThis);
        });
      }
      return this._setter;
    }
  }, {
    key: "expanded",
    get: function get() {
      return this._expanded;
    }
  }, {
    key: "items",
    get: function get() {
      return this._items;
    }
  }, {
    key: "config",
    get: function get() {
      return this._config;
    }
  }]);
  return SettingField;
}(SettingPropEntry), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_expanded", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), _applyDecoratedDescriptor(_class.prototype, "setter", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "setter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setMiniAppDataSourceValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setMiniAppDataSourceValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setHotValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setHotValue"), _class.prototype)), _class));

/**
 * @deprecated use same function from '@alilc/lowcode-utils' instead
 */
export function isSettingField(obj) {
  return obj && obj.isSettingField;
}