// all this file for polyfill vision logic
import { isValidElement } from 'react';
import { isSetterConfig, isDynamicSetter } from '@alilc/lowcode-utils';
function getHotterFromSetter(setter) {
  return setter && (setter.Hotter || setter.type && setter.type.Hotter) || []; // eslint-disable-line
}
function getTransducerFromSetter(setter) {
  return setter && (setter.transducer || setter.Transducer || setter.type && (setter.type.transducer || setter.type.Transducer)) || null; // eslint-disable-line
}
function combineTransducer(transducer, arr, context) {
  if (!transducer && Array.isArray(arr)) {
    var toHot = arr[0],
      toNative = arr[1];
    transducer = {
      toHot: toHot,
      toNative: toNative
    };
  }
  return {
    toHot: (transducer && transducer.toHot || function (x) {
      return x;
    }).bind(context),
    // eslint-disable-line
    toNative: (transducer && transducer.toNative || function (x) {
      return x;
    }).bind(context) // eslint-disable-line
  };
}
export var Transducer = /*#__PURE__*/function () {
  function Transducer(context, config) {
    this.setterTransducer = void 0;
    this.context = void 0;
    var setter = config.setter;

    // 1. validElement
    // 2. IPublicTypeSetterConfig
    // 3. IPublicTypeSetterConfig[]
    if (Array.isArray(setter)) {
      setter = setter[0];
    } else if ( /*#__PURE__*/isValidElement(setter) && setter.type.displayName === 'MixedSetter') {
      var _setter$props, _setter$props$setters;
      setter = (_setter$props = setter.props) === null || _setter$props === void 0 ? void 0 : (_setter$props$setters = _setter$props.setters) === null || _setter$props$setters === void 0 ? void 0 : _setter$props$setters[0];
    } else if (typeof setter === 'object' && setter.componentName === 'MixedSetter') {
      var _setter, _setter$props2;
      setter = Array.isArray((_setter = setter) === null || _setter === void 0 ? void 0 : (_setter$props2 = _setter.props) === null || _setter$props2 === void 0 ? void 0 : _setter$props2.setters) && setter.props.setters[0];
    }

    /**
     * 两种方式标识是 FC 而不是动态 setter
     * 1. 物料描述里面 setter 的配置，显式设置为 false
     * 2. registerSetter 注册 setter 时显式设置为 false
     */

    var isDynamic = true;
    if (isSetterConfig(setter)) {
      var _ref = setter,
        componentName = _ref.componentName,
        dynamicFlag = _ref.isDynamic;
      setter = componentName;
      isDynamic = dynamicFlag !== false;
    }
    if (typeof setter === 'string') {
      var _ref2 = context.setters.getSetter(setter) || {},
        component = _ref2.component,
        _dynamicFlag = _ref2.isDynamic;
      setter = component;
      // 如果在物料配置中声明了，在 registerSetter 没有声明，取物料配置中的声明
      isDynamic = _dynamicFlag === undefined ? isDynamic : _dynamicFlag !== false;
    }
    if (isDynamicSetter(setter) && isDynamic) {
      try {
        setter = setter.call(context.internalToShellField(), context.internalToShellField());
      } catch (e) {
        console.error(e);
      }
    }
    this.setterTransducer = combineTransducer(getTransducerFromSetter(setter), getHotterFromSetter(setter), context);
    this.context = context;
  }
  var _proto = Transducer.prototype;
  _proto.toHot = function toHot(data) {
    return this.setterTransducer.toHot(data);
  };
  _proto.toNative = function toNative(data) {
    return this.setterTransducer.toNative(data);
  };
  return Transducer;
}();