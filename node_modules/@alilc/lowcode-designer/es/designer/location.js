import _createClass from "@babel/runtime/helpers/createClass";
import { IPublicTypeLocationDetailType } from '@alilc/lowcode-types';
/**
 * @deprecated use same function in @alilc/lowcode-utils
 */
export function isLocationData(obj) {
  return obj && obj.target && obj.detail;
}

/**
 * @deprecated use same function in @alilc/lowcode-utils
 */
export function isLocationChildrenDetail(obj) {
  return obj && obj.type === IPublicTypeLocationDetailType.Children;
}
export function isRowContainer(container, win) {
  if (isText(container)) {
    return true;
  }
  var style = (win || getWindow(container)).getComputedStyle(container);
  var display = style.getPropertyValue('display');
  if (/flex$/.test(display)) {
    var direction = style.getPropertyValue('flex-direction') || 'row';
    if (direction === 'row' || direction === 'row-reverse') {
      return true;
    }
  }
  if (/grid$/.test(display)) {
    return true;
  }
  return false;
}
export function isChildInline(child, win) {
  if (isText(child)) {
    return true;
  }
  var style = (win || getWindow(child)).getComputedStyle(child);
  return /^inline/.test(style.getPropertyValue('display')) || /^(left|right)$/.test(style.getPropertyValue('float'));
}
export function getRectTarget(rect) {
  if (!rect || rect.computed) {
    return null;
  }
  var els = rect.elements;
  return els && els.length > 0 ? els[0] : null;
}
export function isVerticalContainer(rect) {
  var el = getRectTarget(rect);
  if (!el) {
    return false;
  }
  return isRowContainer(el);
}
export function isVertical(rect) {
  var el = getRectTarget(rect);
  if (!el) {
    return false;
  }
  return isChildInline(el) || (el.parentElement ? isRowContainer(el.parentElement) : false);
}
function isText(elem) {
  return elem.nodeType === Node.TEXT_NODE;
}
function isDocument(elem) {
  return elem.nodeType === Node.DOCUMENT_NODE;
}
export function getWindow(elem) {
  return (isDocument(elem) ? elem : elem.ownerDocument).defaultView;
}
export var DropLocation = /*#__PURE__*/function () {
  function DropLocation(_ref) {
    var target = _ref.target,
      detail = _ref.detail,
      source = _ref.source,
      event = _ref.event;
    this.target = void 0;
    this.detail = void 0;
    this.event = void 0;
    this.source = void 0;
    this.target = target;
    this.detail = detail;
    this.source = source;
    this.event = event;
  }
  var _proto = DropLocation.prototype;
  _proto.clone = function clone(event) {
    return new DropLocation({
      target: this.target,
      detail: this.detail,
      source: this.source,
      event: event
    });
  }

  /**
   * @deprecated
   * 兼容 vision
   */;
  _proto.getContainer = function getContainer() {
    return this.target;
  }

  /**
   * @deprecated
   * 兼容 vision
   */;
  _proto.getInsertion = function getInsertion() {
    var _this$detail, _this$detail$near;
    if (!this.detail) {
      return null;
    }
    if (this.detail.type === 'Children') {
      var _this$target$children;
      if (this.detail.index <= 0) {
        return null;
      }
      return (_this$target$children = this.target.children) === null || _this$target$children === void 0 ? void 0 : _this$target$children.get(this.detail.index - 1);
    }
    return (_this$detail = this.detail) === null || _this$detail === void 0 ? void 0 : (_this$detail$near = _this$detail.near) === null || _this$detail$near === void 0 ? void 0 : _this$detail$near.node;
  };
  _createClass(DropLocation, [{
    key: "document",
    get: function get() {
      return this.target.document;
    }
  }]);
  return DropLocation;
}();