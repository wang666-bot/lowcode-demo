import type { IDocumentModel, INode } from '../document';
import { ILocateEvent } from './dragon';
import { IPublicModelDropLocation, IPublicTypeRect, IPublicTypeLocationDetail, IPublicTypeLocationData, IPublicModelLocateEvent } from '@alilc/lowcode-types';
export interface Point {
    clientX: number;
    clientY: number;
}
export interface CanvasPoint {
    canvasX: number;
    canvasY: number;
}
export declare type Rects = DOMRect[] & {
    elements: Array<Element | Text>;
};
/**
 * @deprecated use same function in @alilc/lowcode-utils
 */
export declare function isLocationData(obj: any): boolean;
/**
 * @deprecated use same function in @alilc/lowcode-utils
 */
export declare function isLocationChildrenDetail(obj: any): boolean;
export declare function isRowContainer(container: Element | Text, win?: Window): boolean;
export declare function isChildInline(child: Element | Text, win?: Window): boolean;
export declare function getRectTarget(rect: IPublicTypeRect | null): Element | Text;
export declare function isVerticalContainer(rect: IPublicTypeRect | null): boolean;
export declare function isVertical(rect: IPublicTypeRect | null): boolean;
export declare function getWindow(elem: Element | Document): Window;
export interface IDropLocation extends Omit<IPublicModelDropLocation, 'target' | 'clone'> {
    readonly source: string;
    get target(): INode;
    get document(): IDocumentModel | null;
    clone(event: IPublicModelLocateEvent): IDropLocation;
}
export declare class DropLocation implements IDropLocation {
    readonly target: INode;
    readonly detail: IPublicTypeLocationDetail;
    readonly event: ILocateEvent;
    readonly source: string;
    get document(): IDocumentModel | null;
    constructor({ target, detail, source, event }: IPublicTypeLocationData<INode>);
    clone(event: ILocateEvent): IDropLocation;
    /**
     * @deprecated
     * 兼容 vision
     */
    getContainer(): INode;
    /**
     * @deprecated
     * 兼容 vision
     */
    getInsertion(): any;
}
