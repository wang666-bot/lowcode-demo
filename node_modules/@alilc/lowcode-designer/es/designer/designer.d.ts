import { ComponentType } from 'react';
import { IReactionPublic, IReactionOptions, IReactionDisposer } from '@alilc/lowcode-editor-core';
import { IPublicTypeProjectSchema, IPublicTypeComponentMetadata, IPublicTypeComponentAction, IPublicTypeNpmInfo, IPublicModelEditor, IPublicTypeCompositeObject, IPublicTypePropsList, IPublicTypeNodeSchema, IPublicTypePropsTransducer, IShellModelFactory, IPublicModelDragObject, IPublicTypeScrollable, IPublicModelScroller, IPublicTypeLocationData, IPublicEnumTransformStage, IPublicModelLocateEvent } from '@alilc/lowcode-types';
import { IPublicTypeAssetsJson } from '@alilc/lowcode-utils';
import { IProject } from '../project';
import { Node, DocumentModel, INode, ISelection } from '../document';
import { IComponentMeta } from '../component-meta';
import { INodeSelector, Component } from '../simulator';
import { IDragon } from './dragon';
import { ActiveTracker, IActiveTracker } from './active-tracker';
import { Detecting } from './detecting';
import { DropLocation } from './location';
import { OffsetObserver } from './offset-observer';
import { ISettingTopEntry } from './setting';
import { BemToolsManager } from '../builtin-simulator/bem-tools/manager';
import { ComponentActions } from '../component-actions';
import { ContextMenuActions, IContextMenuActions } from '../context-menu-actions';
export interface DesignerProps {
    [key: string]: any;
    editor: IPublicModelEditor;
    shellModelFactory: IShellModelFactory;
    className?: string;
    style?: object;
    defaultSchema?: IPublicTypeProjectSchema;
    hotkeys?: object;
    viewName?: string;
    simulatorProps?: Record<string, any> | ((document: DocumentModel) => object);
    simulatorComponent?: ComponentType<any>;
    dragGhostComponent?: ComponentType<any>;
    suspensed?: boolean;
    componentMetadatas?: IPublicTypeComponentMetadata[];
    globalComponentActions?: IPublicTypeComponentAction[];
    onMount?: (designer: Designer) => void;
    onDragstart?: (e: IPublicModelLocateEvent) => void;
    onDrag?: (e: IPublicModelLocateEvent) => void;
    onDragend?: (e: {
        dragObject: IPublicModelDragObject;
        copy: boolean;
    }, loc?: DropLocation) => void;
}
export interface IDesigner {
    readonly shellModelFactory: IShellModelFactory;
    viewName: string | undefined;
    readonly project: IProject;
    get dragon(): IDragon;
    get activeTracker(): IActiveTracker;
    get componentActions(): ComponentActions;
    get contextMenuActions(): ContextMenuActions;
    get editor(): IPublicModelEditor;
    get detecting(): Detecting;
    get simulatorComponent(): ComponentType<any> | undefined;
    get currentSelection(): ISelection;
    createScroller(scrollable: IPublicTypeScrollable): IPublicModelScroller;
    refreshComponentMetasMap(): void;
    createOffsetObserver(nodeInstance: INodeSelector): OffsetObserver | null;
    /**
     * 创建插入位置，考虑放到 dragon 中
     */
    createLocation(locationData: IPublicTypeLocationData<INode>): DropLocation;
    get componentsMap(): {
        [key: string]: IPublicTypeNpmInfo | Component;
    };
    loadIncrementalAssets(incrementalAssets: IPublicTypeAssetsJson): Promise<void>;
    getComponentMeta(componentName: string, generateMetadata?: () => IPublicTypeComponentMetadata | null): IComponentMeta;
    clearLocation(): void;
    createComponentMeta(data: IPublicTypeComponentMetadata): IComponentMeta | null;
    getComponentMetasMap(): Map<string, IComponentMeta>;
    addPropsReducer(reducer: IPublicTypePropsTransducer, stage: IPublicEnumTransformStage): void;
    postEvent(event: string, ...args: any[]): void;
    transformProps(props: IPublicTypeCompositeObject | IPublicTypePropsList, node: Node, stage: IPublicEnumTransformStage): IPublicTypeCompositeObject | IPublicTypePropsList;
    createSettingEntry(nodes: INode[]): ISettingTopEntry;
    autorun(effect: (reaction: IReactionPublic) => void, options?: IReactionOptions<any, any>): IReactionDisposer;
}
export declare class Designer implements IDesigner {
    dragon: IDragon;
    viewName: string | undefined;
    readonly componentActions: ComponentActions;
    readonly contextMenuActions: IContextMenuActions;
    readonly activeTracker: ActiveTracker;
    readonly detecting: Detecting;
    readonly project: IProject;
    readonly editor: IPublicModelEditor;
    readonly bemToolsManager: BemToolsManager;
    readonly shellModelFactory: IShellModelFactory;
    private _dropLocation?;
    private propsReducers;
    private _lostComponentMetasMap;
    private props?;
    private oobxList;
    private selectionDispose;
    private _componentMetasMap;
    private _simulatorComponent?;
    private _simulatorProps?;
    private _suspensed;
    get currentDocument(): import("../document").IDocumentModel;
    get currentHistory(): import("../document").IHistory;
    get currentSelection(): ISelection;
    constructor(props: DesignerProps);
    setupSelection: () => void;
    postEvent(event: string, ...args: any[]): void;
    get dropLocation(): DropLocation;
    /**
     * 创建插入位置，考虑放到 dragon 中
     */
    createLocation(locationData: IPublicTypeLocationData<INode>): DropLocation;
    /**
     * 清除插入位置
     */
    clearLocation(): void;
    createScroller(scrollable: IPublicTypeScrollable): IPublicModelScroller;
    createOffsetObserver(nodeInstance: INodeSelector): OffsetObserver | null;
    private clearOobxList;
    touchOffsetObserver(): void;
    createSettingEntry(nodes: INode[]): ISettingTopEntry;
    /**
     * 获得合适的插入位置
     * @deprecated
     */
    getSuitableInsertion(insertNode?: INode | IPublicTypeNodeSchema | IPublicTypeNodeSchema[]): {
        target: INode;
        index?: number;
    } | null;
    setProps(nextProps: DesignerProps): void;
    loadIncrementalAssets(incrementalAssets: IPublicTypeAssetsJson): Promise<void>;
    /**
     * 刷新 componentMetasMap，可间接触发模拟器里的 buildComponents
     */
    refreshComponentMetasMap(): void;
    get(key: string): any;
    get simulatorComponent(): ComponentType<any> | undefined;
    get simulatorProps(): Record<string, any>;
    /**
     * 提供给模拟器的参数
     */
    get projectSimulatorProps(): any;
    get suspensed(): boolean;
    set suspensed(flag: boolean);
    get schema(): IPublicTypeProjectSchema;
    setSchema(schema?: IPublicTypeProjectSchema): void;
    buildComponentMetasMap(metas: IPublicTypeComponentMetadata[]): void;
    createComponentMeta(data: IPublicTypeComponentMetadata): IComponentMeta | null;
    getGlobalComponentActions(): IPublicTypeComponentAction[] | null;
    getComponentMeta(componentName: string, generateMetadata?: () => IPublicTypeComponentMetadata | null): IComponentMeta;
    getComponentMetasMap(): Map<string, IComponentMeta>;
    get componentsMap(): {
        [key: string]: IPublicTypeNpmInfo | Component;
    };
    transformProps(props: IPublicTypeCompositeObject | IPublicTypePropsList, node: Node, stage: IPublicEnumTransformStage): IPublicTypePropsList | IPublicTypeCompositeObject<import("@alilc/lowcode-types").IPublicTypeCompositeValue>;
    addPropsReducer(reducer: IPublicTypePropsTransducer, stage: IPublicEnumTransformStage): void;
    autorun(effect: (reaction: IReactionPublic) => void, options?: IReactionOptions<any, any>): IReactionDisposer;
    purge(): void;
}
