import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;
import { makeObservable, obx, createModuleEventBus } from '@alilc/lowcode-editor-core';
var DETECTING_CHANGE_EVENT = 'detectingChange';
export var Detecting = (_dec = obx.ref, _dec2 = obx.ref, _dec3 = obx.ref, (_class = /*#__PURE__*/function () {
  function Detecting() {
    _initializerDefineProperty(this, "_enable", _descriptor, this);
    _initializerDefineProperty(this, "xRayMode", _descriptor2, this);
    _initializerDefineProperty(this, "_current", _descriptor3, this);
    this.emitter = createModuleEventBus('Detecting');
    makeObservable(this);
  }
  var _proto = Detecting.prototype;
  _proto.capture = function capture(node) {
    if (this._current !== node) {
      this._current = node;
      this.emitter.emit(DETECTING_CHANGE_EVENT, this.current);
    }
  };
  _proto.release = function release(node) {
    if (this._current === node) {
      this._current = null;
      this.emitter.emit(DETECTING_CHANGE_EVENT, this.current);
    }
  };
  _proto.leave = function leave(document) {
    if (this.current && this.current.document === document) {
      this._current = null;
    }
  };
  _proto.onDetectingChange = function onDetectingChange(fn) {
    var _this = this;
    this.emitter.on(DETECTING_CHANGE_EVENT, fn);
    return function () {
      _this.emitter.off(DETECTING_CHANGE_EVENT, fn);
    };
  };
  _createClass(Detecting, [{
    key: "enable",
    get:
    /**
     * 控制大纲树 hover 时是否出现悬停效果
     * TODO: 将该逻辑从设计器中抽离出来
     */
    function get() {
      return this._enable;
    },
    set: function set(flag) {
      this._enable = flag;
      if (!flag) {
        this._current = null;
      }
    }
  }, {
    key: "current",
    get: function get() {
      return this._current;
    }
  }]);
  return Detecting;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_enable", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "xRayMode", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_current", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
})), _class));