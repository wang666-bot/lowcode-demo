import _extends from "@babel/runtime/helpers/extends";
import { IPublicEnumContextMenuType } from '@alilc/lowcode-types';
import { createContextMenu, parseContextMenuAsReactNode, parseContextMenuProperties, uniqueId } from '@alilc/lowcode-utils';
import { Menu } from '@alifd/next';
import { engineConfig } from '@alilc/lowcode-editor-core';
import './context-menu-actions.scss';
var adjustMenuLayoutFn = function adjustMenuLayoutFn(actions) {
  return actions;
};
export var GlobalContextMenuActions = /*#__PURE__*/function () {
  function GlobalContextMenuActions() {
    var _this = this;
    this.enableContextMenu = void 0;
    this.dispose = void 0;
    this.contextMenuActionsMap = new Map();
    this.handleContextMenu = function (event) {
      event.stopPropagation();
      event.preventDefault();
      var actions = [];
      var contextMenu = _this.contextMenuActionsMap.values().next().value;
      _this.contextMenuActionsMap.forEach(function (contextMenu) {
        actions.push.apply(actions, contextMenu.actions);
      });
      var destroyFn;
      var destroy = function destroy() {
        var _destroyFn;
        (_destroyFn = destroyFn) === null || _destroyFn === void 0 ? void 0 : _destroyFn();
      };
      var pluginContext = contextMenu.designer.editor.get('pluginContext');
      var menus = parseContextMenuProperties(actions, {
        nodes: [],
        destroy: destroy,
        event: event,
        pluginContext: pluginContext
      });
      if (!menus.length) {
        return;
      }
      var layoutMenu = adjustMenuLayoutFn(menus);
      var menuNode = parseContextMenuAsReactNode(layoutMenu, {
        destroy: destroy,
        nodes: [],
        pluginContext: pluginContext
      });
      var target = event.target;
      var _target$getBoundingCl = target === null || target === void 0 ? void 0 : target.getBoundingClientRect(),
        top = _target$getBoundingCl.top,
        left = _target$getBoundingCl.left;
      var menuInstance = Menu.create({
        target: event.target,
        offset: [event.clientX - left, event.clientY - top],
        children: menuNode,
        className: 'engine-context-menu'
      });
      destroyFn = menuInstance.destroy;
    };
    this.dispose = [];
    engineConfig.onGot('enableContextMenu', function (enable) {
      if (_this.enableContextMenu === enable) {
        return;
      }
      _this.enableContextMenu = enable;
      _this.dispose.forEach(function (d) {
        return d();
      });
      if (enable) {
        _this.initEvent();
      }
    });
  }
  var _proto = GlobalContextMenuActions.prototype;
  _proto.initEvent = function initEvent() {
    var _this2 = this;
    this.dispose.push(function () {
      var handleContextMenu = function handleContextMenu(e) {
        _this2.handleContextMenu(e);
      };
      document.addEventListener('contextmenu', handleContextMenu);
      return function () {
        document.removeEventListener('contextmenu', handleContextMenu);
      };
    }());
  };
  _proto.registerContextMenuActions = function registerContextMenuActions(contextMenu) {
    this.contextMenuActionsMap.set(contextMenu.id, contextMenu);
  };
  return GlobalContextMenuActions;
}();
var globalContextMenuActions = new GlobalContextMenuActions();
export var ContextMenuActions = /*#__PURE__*/function () {
  function ContextMenuActions(_designer) {
    var _this3 = this;
    this.actions = [];
    this.designer = void 0;
    this.dispose = void 0;
    this.enableContextMenu = void 0;
    this.id = uniqueId('contextMenu');
    this.handleContextMenu = function (nodes, event) {
      var _designer$project$sim;
      var designer = _this3.designer;
      event.stopPropagation();
      event.preventDefault();
      var actions = designer.contextMenuActions.actions;
      var _ref = ((_designer$project$sim = designer.project.simulator) === null || _designer$project$sim === void 0 ? void 0 : _designer$project$sim.viewport) || {
          bounds: {
            left: 0,
            top: 0
          }
        },
        bounds = _ref.bounds;
      var simulatorLeft = bounds.left,
        simulatorTop = bounds.top;
      var destroyFn;
      var destroy = function destroy() {
        var _destroyFn2;
        (_destroyFn2 = destroyFn) === null || _destroyFn2 === void 0 ? void 0 : _destroyFn2();
      };
      var pluginContext = _this3.designer.editor.get('pluginContext');
      var menus = parseContextMenuProperties(actions, {
        nodes: nodes.map(function (d) {
          return designer.shellModelFactory.createNode(d);
        }),
        destroy: destroy,
        event: event,
        pluginContext: pluginContext
      });
      if (!menus.length) {
        return;
      }
      var layoutMenu = adjustMenuLayoutFn(menus);
      var menuNode = parseContextMenuAsReactNode(layoutMenu, {
        destroy: destroy,
        nodes: nodes.map(function (d) {
          return designer.shellModelFactory.createNode(d);
        }),
        pluginContext: pluginContext
      });
      destroyFn = createContextMenu(menuNode, {
        event: event,
        offset: [simulatorLeft, simulatorTop]
      });
    };
    this.designer = _designer;
    this.dispose = [];
    engineConfig.onGot('enableContextMenu', function (enable) {
      if (_this3.enableContextMenu === enable) {
        return;
      }
      _this3.enableContextMenu = enable;
      _this3.dispose.forEach(function (d) {
        return d();
      });
      if (enable) {
        _this3.initEvent();
      }
    });
    globalContextMenuActions.registerContextMenuActions(this);
  }
  var _proto2 = ContextMenuActions.prototype;
  _proto2.initEvent = function initEvent() {
    var _this4 = this;
    var designer = this.designer;
    this.dispose.push(designer.editor.eventBus.on('designer.builtinSimulator.contextmenu', function (_ref2) {
      var node = _ref2.node,
        originalEvent = _ref2.originalEvent;
      originalEvent.stopPropagation();
      originalEvent.preventDefault();
      // 如果右键的节点不在 当前选中的节点中，选中该节点
      if (!designer.currentSelection.has(node.id)) {
        designer.currentSelection.select(node.id);
      }
      var nodes = designer.currentSelection.getNodes();
      _this4.handleContextMenu(nodes, originalEvent);
    }));
  };
  _proto2.addMenuAction = function addMenuAction(action) {
    this.actions.push(_extends({
      type: IPublicEnumContextMenuType.MENU_ITEM
    }, action));
  };
  _proto2.removeMenuAction = function removeMenuAction(name) {
    var i = this.actions.findIndex(function (action) {
      return action.name === name;
    });
    if (i > -1) {
      this.actions.splice(i, 1);
    }
  };
  _proto2.adjustMenuLayout = function adjustMenuLayout(fn) {
    adjustMenuLayoutFn = fn;
  };
  return ContextMenuActions;
}();