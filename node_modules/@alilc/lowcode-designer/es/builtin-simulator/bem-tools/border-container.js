import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
var _class, _class2;
import * as React from 'react';
import { Component, Fragment, PureComponent } from 'react';
import classNames from 'classnames';
import { computed, observer, Title, globalLocale } from '@alilc/lowcode-editor-core';
import { isI18nData } from '@alilc/lowcode-utils';
export var BorderContainerInstance = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(BorderContainerInstance, _PureComponent);
  function BorderContainerInstance() {
    return _PureComponent.apply(this, arguments) || this;
  }
  var _proto = BorderContainerInstance.prototype;
  _proto.render = function render() {
    var _this$props = this.props,
      title = _this$props.title,
      rect = _this$props.rect,
      scale = _this$props.scale,
      scrollX = _this$props.scrollX,
      scrollY = _this$props.scrollY;
    if (!rect) {
      return null;
    }
    var style = {
      width: rect.width * scale,
      height: rect.height * scale,
      transform: "translate(" + (scrollX + rect.left) * scale + "px, " + (scrollY + rect.top) * scale + "px)"
    };
    var className = classNames('lc-borders lc-borders-detecting');
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      style: style
    }, /*#__PURE__*/React.createElement(Title, {
      title: title,
      className: "lc-borders-title"
    }));
  };
  return BorderContainerInstance;
}(PureComponent);
function getTitle(title) {
  if (typeof title === 'string') return title;
  if (isI18nData(title)) {
    var locale = globalLocale.getLocale() || 'zh-CN';
    return "\u5C06\u653E\u5165\u5230\u6B64" + title[locale];
  }
  return '';
}
export var BorderContainer = observer(_class = (_class2 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(BorderContainer, _Component);
  function BorderContainer() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {};
    return _this;
  }
  var _proto2 = BorderContainer.prototype;
  _proto2.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var host = this.props.host;
    host.designer.editor.eventBus.on('designer.dropLocation.change', function (loc) {
      var target = _this2.state.target;
      if (target === (loc === null || loc === void 0 ? void 0 : loc.target)) return;
      _this2.setState({
        target: loc === null || loc === void 0 ? void 0 : loc.target
      });
    });
  };
  _proto2.render = function render() {
    var _this3 = this;
    var host = this.props.host;
    var target = this.state.target;
    if (target == undefined) {
      return null;
    }
    var instances = host.getComponentInstances(target);
    if (!instances || instances.length < 1) {
      return null;
    }
    if (instances.length === 1) {
      return /*#__PURE__*/React.createElement(BorderContainerInstance, {
        key: "line-h",
        title: getTitle(target.componentMeta.title),
        scale: this.scale,
        scrollX: this.scrollX,
        scrollY: this.scrollY,
        rect: host.computeComponentInstanceRect(instances[0], target.componentMeta.rootSelector)
      });
    }
    return /*#__PURE__*/React.createElement(Fragment, null, instances.map(function (inst, i) {
      return /*#__PURE__*/React.createElement(BorderContainerInstance, {
        key: "line-h-" + i,
        title: getTitle(target.componentMeta.title),
        scale: _this3.scale,
        scrollX: _this3.scrollX,
        scrollY: _this3.scrollY,
        rect: host.computeComponentInstanceRect(inst, target.componentMeta.rootSelector)
      });
    }));
  };
  _createClass(BorderContainer, [{
    key: "scale",
    get: function get() {
      return this.props.host.viewport.scale;
    }
  }, {
    key: "scrollX",
    get: function get() {
      return this.props.host.viewport.scrollX;
    }
  }, {
    key: "scrollY",
    get: function get() {
      return this.props.host.viewport.scrollY;
    }
  }]);
  return BorderContainer;
}(Component), (_applyDecoratedDescriptor(_class2.prototype, "scale", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, "scale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "scrollX", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, "scrollX"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "scrollY", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, "scrollY"), _class2.prototype)), _class2)) || _class;