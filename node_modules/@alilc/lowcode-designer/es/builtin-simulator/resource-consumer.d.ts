import { BuiltinSimulatorHost } from './host';
import { BuiltinSimulatorRenderer } from './renderer';
export declare type MasterProvider = (master: BuiltinSimulatorHost) => any;
export declare type RendererConsumer<T> = (renderer: BuiltinSimulatorRenderer, data: T) => Promise<any>;
export default class ResourceConsumer<T = any> {
    private consumer?;
    private emitter;
    private _data;
    private _providing?;
    private _consuming?;
    private _firstConsumed;
    private resolveFirst?;
    constructor(provider: () => T, consumer?: RendererConsumer<T>);
    consume(consumerOrRenderer: BuiltinSimulatorRenderer | ((data: T) => any)): void;
    dispose(): void;
    waitFirstConsume(): Promise<any>;
}
