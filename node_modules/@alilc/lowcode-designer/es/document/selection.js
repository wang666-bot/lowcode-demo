import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _class, _descriptor;
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { obx, makeObservable, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { comparePosition, PositionNO } from './node/node';
export var Selection = (_dec = obx.shallow, (_class = /*#__PURE__*/function () {
  function Selection(doc) {
    this.doc = doc;
    this.emitter = createModuleEventBus('Selection');
    _initializerDefineProperty(this, "_selected", _descriptor, this);
    makeObservable(this);
  }

  /**
   * 选中的节点 id
   */
  var _proto = Selection.prototype;
  /**
   * 选中
   */
  _proto.select = function select(id) {
    if (this._selected.length === 1 && this._selected.indexOf(id) > -1) {
      // avoid cause reaction
      return;
    }
    var node = this.doc.getNode(id);
    if (!(node !== null && node !== void 0 && node.canSelect())) {
      return;
    }
    this._selected = [id];
    this.emitter.emit('selectionchange', this._selected);
  }

  /**
   * 批量选中
   */;
  _proto.selectAll = function selectAll(ids) {
    var _this = this;
    var selectIds = [];
    ids.forEach(function (d) {
      var node = _this.doc.getNode(d);
      if (node !== null && node !== void 0 && node.canSelect()) {
        selectIds.push(d);
      }
    });
    this._selected = selectIds;
    this.emitter.emit('selectionchange', this._selected);
  }

  /**
   * 清除选中
   */;
  _proto.clear = function clear() {
    if (this._selected.length < 1) {
      return;
    }
    this._selected = [];
    this.emitter.emit('selectionchange', this._selected);
  }

  /**
   * 整理选中
   */;
  _proto.dispose = function dispose() {
    var l = this._selected.length;
    var i = l;
    while (i-- > 0) {
      var id = this._selected[i];
      if (!this.doc.hasNode(id)) {
        this._selected.splice(i, 1);
      }
    }
    if (this._selected.length !== l) {
      this.emitter.emit('selectionchange', this._selected);
    }
  }

  /**
   * 添加选中
   */;
  _proto.add = function add(id) {
    if (this._selected.indexOf(id) > -1) {
      return;
    }
    this._selected.push(id);
    this.emitter.emit('selectionchange', this._selected);
  }

  /**
   * 是否选中
   */;
  _proto.has = function has(id) {
    return this._selected.indexOf(id) > -1;
  }

  /**
   * 移除选中
   */;
  _proto.remove = function remove(id) {
    var i = this._selected.indexOf(id);
    if (i > -1) {
      this._selected.splice(i, 1);
      this.emitter.emit('selectionchange', this._selected);
    }
  }

  /**
   * 选区是否包含节点
   */;
  _proto.containsNode = function containsNode(node, excludeRoot) {
    if (excludeRoot === void 0) {
      excludeRoot = false;
    }
    for (var _iterator = _createForOfIteratorHelperLoose(this._selected), _step; !(_step = _iterator()).done;) {
      var id = _step.value;
      var parent = this.doc.getNode(id);
      if (excludeRoot && parent !== null && parent !== void 0 && parent.contains(this.doc.focusNode)) {
        continue;
      }
      if (parent !== null && parent !== void 0 && parent.contains(node)) {
        return true;
      }
    }
    return false;
  }

  /**
   * 获取选中的节点
   */;
  _proto.getNodes = function getNodes() {
    var nodes = [];
    for (var _iterator2 = _createForOfIteratorHelperLoose(this._selected), _step2; !(_step2 = _iterator2()).done;) {
      var id = _step2.value;
      var _node = this.doc.getNode(id);
      if (_node) {
        nodes.push(_node);
      }
    }
    return nodes;
  }

  /**
   * 获取顶层选区节点，场景：拖拽时，建立蒙层，只蒙在最上层
   */;
  _proto.getTopNodes = function getTopNodes(includeRoot) {
    if (includeRoot === void 0) {
      includeRoot = false;
    }
    var nodes = [];
    for (var _iterator3 = _createForOfIteratorHelperLoose(this._selected), _step3; !(_step3 = _iterator3()).done;) {
      var id = _step3.value;
      var _node2 = this.doc.getNode(id);
      // 排除根节点
      if (!_node2 || !includeRoot && _node2.contains(this.doc.focusNode)) {
        continue;
      }
      var i = nodes.length;
      var isTop = true;
      while (i-- > 0) {
        var n = comparePosition(nodes[i], _node2);
        // nodes[i] contains node
        if (n === PositionNO.Contains || n === PositionNO.TheSame) {
          isTop = false;
          break;
        } else if (n === PositionNO.ContainedBy) {
          // node contains nodes[i], delete nodes[i]
          nodes.splice(i, 1);
        }
      }
      // node is top item, push to nodes
      if (isTop) {
        nodes.push(_node2);
      }
    }
    return nodes;
  };
  _proto.onSelectionChange = function onSelectionChange(fn) {
    var _this2 = this;
    this.emitter.on('selectionchange', fn);
    return function () {
      _this2.emitter.removeListener('selectionchange', fn);
    };
  };
  _createClass(Selection, [{
    key: "selected",
    get: function get() {
      return this._selected;
    }
  }]);
  return Selection;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_selected", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
})), _class));