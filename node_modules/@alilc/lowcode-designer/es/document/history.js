import _createClass from "@babel/runtime/helpers/createClass";
import { reaction, untracked, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { Logger } from '@alilc/lowcode-utils';
var logger = new Logger({
  level: 'warn',
  bizName: 'history'
});
export var History = /*#__PURE__*/function () {
  function History(dataFn, redoer, document) {
    var _this = this;
    this.redoer = redoer;
    this.document = document;
    this.session = void 0;
    this.records = void 0;
    this.point = 0;
    this.emitter = createModuleEventBus('History');
    this.asleep = false;
    this.currentSerialization = {
      serialize: function serialize(data) {
        return JSON.stringify(data);
      },
      unserialize: function unserialize(data) {
        return JSON.parse(data);
      }
    };
    this.timeGap = 1000;
    this.session = new Session(0, null, this.timeGap);
    this.records = [this.session];
    reaction(function () {
      return dataFn();
    }, function (data) {
      if (_this.asleep) return;
      untracked(function () {
        var log = _this.currentSerialization.serialize(data);

        // do not record unchanged data
        if (_this.session.data === log) {
          return;
        }
        if (_this.session.isActive()) {
          _this.session.log(log);
        } else {
          _this.session.end();
          var lastState = _this.getState();
          var _cursor = _this.session.cursor + 1;
          var session = new Session(_cursor, log, _this.timeGap);
          _this.session = session;
          _this.records.splice(_cursor, _this.records.length - _cursor, session);
          var currentState = _this.getState();
          if (currentState !== lastState) {
            _this.emitter.emit('statechange', currentState);
          }
        }
      });
    }, {
      fireImmediately: true
    });
  }
  var _proto = History.prototype;
  _proto.setSerialization = function setSerialization(serialization) {
    this.currentSerialization = serialization;
  };
  _proto.isSavePoint = function isSavePoint() {
    return this.point !== this.session.cursor;
  };
  _proto.sleep = function sleep() {
    this.asleep = true;
  };
  _proto.wakeup = function wakeup() {
    this.asleep = false;
  };
  _proto.go = function go(originalCursor) {
    this.session.end();
    var cursor = originalCursor;
    cursor = +cursor;
    if (cursor < 0) {
      cursor = 0;
    } else if (cursor >= this.records.length) {
      cursor = this.records.length - 1;
    }
    var currentCursor = this.session.cursor;
    if (cursor === currentCursor) {
      return;
    }
    var session = this.records[cursor];
    var hotData = session.data;
    this.sleep();
    try {
      this.redoer(this.currentSerialization.unserialize(hotData));
      this.emitter.emit('cursor', hotData);
    } catch (e) /* istanbul ignore next */{
      logger.error(e);
    }
    this.wakeup();
    this.session = session;
    this.emitter.emit('statechange', this.getState());
  };
  _proto.back = function back() {
    var _this$document;
    if (!this.session) {
      return;
    }
    var cursor = this.session.cursor - 1;
    this.go(cursor);
    var editor = (_this$document = this.document) === null || _this$document === void 0 ? void 0 : _this$document.designer.editor;
    if (!editor) {
      return;
    }
    editor.eventBus.emit('history.back', cursor);
  };
  _proto.forward = function forward() {
    var _this$document2;
    if (!this.session) {
      return;
    }
    var cursor = this.session.cursor + 1;
    this.go(cursor);
    var editor = (_this$document2 = this.document) === null || _this$document2 === void 0 ? void 0 : _this$document2.designer.editor;
    if (!editor) {
      return;
    }
    editor.eventBus.emit('history.forward', cursor);
  };
  _proto.savePoint = function savePoint() {
    if (!this.session) {
      return;
    }
    this.session.end();
    this.point = this.session.cursor;
    this.emitter.emit('statechange', this.getState());
  }

  /**
   *  |    1     |     1    |    1     |
   *  | -------- | -------- | -------- |
   *  | modified | redoable | undoable |
   */;
  _proto.getState = function getState() {
    var cursor = this.session.cursor;
    var state = 7;
    // undoable ?
    if (cursor <= 0) {
      state -= 1;
    }
    // redoable ?
    if (cursor >= this.records.length - 1) {
      state -= 2;
    }
    // modified ?
    if (this.point === cursor) {
      state -= 4;
    }
    return state;
  }

  /**
   * 监听 state 变更事件
   * @param func
   * @returns
   */;
  _proto.onChangeState = function onChangeState(func) {
    return this.onStateChange(func);
  };
  _proto.onStateChange = function onStateChange(func) {
    var _this2 = this;
    this.emitter.on('statechange', func);
    return function () {
      _this2.emitter.removeListener('statechange', func);
    };
  }

  /**
   * 监听历史记录游标位置变更事件
   * @param func
   * @returns
   */;
  _proto.onChangeCursor = function onChangeCursor(func) {
    return this.onCursor(func);
  };
  _proto.onCursor = function onCursor(func) {
    var _this3 = this;
    this.emitter.on('cursor', func);
    return function () {
      _this3.emitter.removeListener('cursor', func);
    };
  };
  _proto.destroy = function destroy() {
    this.emitter.removeAllListeners();
    this.records = [];
  }

  /**
   *
   * @deprecated
   * @returns
   * @memberof History
   */;
  _proto.isModified = function isModified() {
    return this.isSavePoint();
  };
  _createClass(History, [{
    key: "hotData",
    get: function get() {
      return this.session.data;
    }
  }]);
  return History;
}();
export var Session = /*#__PURE__*/function () {
  function Session(cursor, data, timeGap) {
    if (timeGap === void 0) {
      timeGap = 1000;
    }
    this.cursor = cursor;
    this.timeGap = timeGap;
    this._data = void 0;
    this.activeTimer = void 0;
    this.setTimer();
    this.log(data);
  }
  var _proto2 = Session.prototype;
  _proto2.log = function log(data) {
    if (!this.isActive()) {
      return;
    }
    this._data = data;
    this.setTimer();
  };
  _proto2.isActive = function isActive() {
    return this.activeTimer != null;
  };
  _proto2.end = function end() {
    if (this.isActive()) {
      this.clearTimer();
    }
  };
  _proto2.setTimer = function setTimer() {
    var _this4 = this;
    this.clearTimer();
    this.activeTimer = setTimeout(function () {
      return _this4.end();
    }, this.timeGap);
  };
  _proto2.clearTimer = function clearTimer() {
    if (this.activeTimer) {
      clearTimeout(this.activeTimer);
    }
    this.activeTimer = null;
  };
  _createClass(Session, [{
    key: "data",
    get: function get() {
      return this._data;
    }
  }]);
  return Session;
}();