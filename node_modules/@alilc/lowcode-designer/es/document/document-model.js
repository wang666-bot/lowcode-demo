import _extends from "@babel/runtime/helpers/extends";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { makeObservable, obx, engineConfig, action, runWithGlobalEventOff, wrapWithEventSwitch, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { IPublicEnumTransformStage } from '@alilc/lowcode-types';
import { uniqueId, isPlainObject, compatStage, isJSExpression, isDOMText, isNodeSchema, isDragNodeObject, isDragNodeDataObject, isNode } from '@alilc/lowcode-utils';
import { insertChildren, insertChild } from './node/node';
import { Selection } from './selection';
import { History } from './history';
import { ModalNodesManager, Node } from './node';
import { EDITOR_EVENT } from '../types';
export var DocumentModel = (_dec = obx.shallow, _dec2 = obx.ref, _dec3 = obx.shallow, _dec4 = obx.shallow, _dec5 = obx.ref, _dec6 = obx.ref, _dec7 = obx.ref, (_class = /*#__PURE__*/function () {
  function DocumentModel(project, schema) {
    var _this$project,
      _project$getSchema,
      _this = this;
    /**
     * 根节点 类型有：Page/Component/Block
     */
    this.rootNode = void 0;
    /**
     * 文档编号
     */
    this.id = uniqueId('doc');
    /**
     * 选区控制
     */
    this.selection = new Selection(this);
    /**
     * 操作记录控制
     */
    this.history = void 0;
    /**
     * 模态节点管理
     */
    this.modalNodesManager = void 0;
    this._nodesMap = new Map();
    this.project = void 0;
    this.designer = void 0;
    _initializerDefineProperty(this, "nodes", _descriptor, this);
    this.seqId = 0;
    this.emitter = void 0;
    this.rootNodeVisitorMap = {};
    /**
     * @deprecated
     */
    this._addons = [];
    _initializerDefineProperty(this, "_drillDownNode", _descriptor2, this);
    this._modalNode = void 0;
    this._blank = void 0;
    this.inited = false;
    _initializerDefineProperty(this, "willPurgeSpace", _descriptor3, this);
    _initializerDefineProperty(this, "activeNodes", _descriptor4, this);
    _initializerDefineProperty(this, "_dropLocation", _descriptor5, this);
    _initializerDefineProperty(this, "_opened", _descriptor6, this);
    _initializerDefineProperty(this, "_suspensed", _descriptor7, this);
    makeObservable(this);
    this.project = project;
    this.designer = (_this$project = this.project) === null || _this$project === void 0 ? void 0 : _this$project.designer;
    this.emitter = createModuleEventBus('DocumentModel');
    if (!schema) {
      this._blank = true;
    }

    // 兼容 vision
    this.id = ((_project$getSchema = project.getSchema()) === null || _project$getSchema === void 0 ? void 0 : _project$getSchema.id) || this.id;
    this.rootNode = this.createNode(schema || {
      componentName: 'Page',
      id: 'root',
      fileName: ''
    });
    this.history = new History(function () {
      return _this["export"](IPublicEnumTransformStage.Serilize);
    }, function (schema) {
      var _this$simulator;
      _this["import"](schema, true);
      (_this$simulator = _this.simulator) === null || _this$simulator === void 0 ? void 0 : _this$simulator.rerender();
    }, this);
    this.setupListenActiveNodes();
    this.modalNodesManager = new ModalNodesManager(this);
    this.inited = true;
  }
  var _proto = DocumentModel.prototype;
  _proto.drillDown = function drillDown(node) {
    this._drillDownNode = node;
  };
  _proto.onChangeNodeVisible = function onChangeNodeVisible(fn) {
    var _this$designer$editor,
      _this2 = this;
    (_this$designer$editor = this.designer.editor) === null || _this$designer$editor === void 0 ? void 0 : _this$designer$editor.eventBus.on(EDITOR_EVENT.NODE_VISIBLE_CHANGE, fn);
    return function () {
      var _this2$designer$edito;
      (_this2$designer$edito = _this2.designer.editor) === null || _this2$designer$edito === void 0 ? void 0 : _this2$designer$edito.eventBus.off(EDITOR_EVENT.NODE_VISIBLE_CHANGE, fn);
    };
  };
  _proto.onChangeNodeChildren = function onChangeNodeChildren(fn) {
    var _this$designer$editor2,
      _this3 = this;
    (_this$designer$editor2 = this.designer.editor) === null || _this$designer$editor2 === void 0 ? void 0 : _this$designer$editor2.eventBus.on(EDITOR_EVENT.NODE_CHILDREN_CHANGE, fn);
    return function () {
      var _this3$designer$edito;
      (_this3$designer$edito = _this3.designer.editor) === null || _this3$designer$edito === void 0 ? void 0 : _this3$designer$edito.eventBus.off(EDITOR_EVENT.NODE_CHILDREN_CHANGE, fn);
    };
  };
  _proto.addWillPurge = function addWillPurge(node) {
    this.willPurgeSpace.push(node);
  };
  _proto.removeWillPurge = function removeWillPurge(node) {
    var i = this.willPurgeSpace.indexOf(node);
    if (i > -1) {
      this.willPurgeSpace.splice(i, 1);
    }
  };
  _proto.isBlank = function isBlank() {
    return !!(this._blank && !this.isModified());
  }

  /**
   * 生成唯一 id
   */;
  _proto.nextId = function nextId(possibleId) {
    var id = possibleId;
    while (!id || this.nodesMap.get(id)) {
      id = "node_" + (String(this.id).slice(-10) + (++this.seqId).toString(36)).toLocaleLowerCase();
    }
    return id;
  }

  /**
   * 根据 id 获取节点
   */;
  _proto.getNode = function getNode(id) {
    return this._nodesMap.get(id) || null;
  }

  /**
   * 根据 id 获取节点
   */;
  _proto.getNodeCount = function getNodeCount() {
    var _this$_nodesMap;
    return (_this$_nodesMap = this._nodesMap) === null || _this$_nodesMap === void 0 ? void 0 : _this$_nodesMap.size;
  }

  /**
   * 是否存在节点
   */;
  _proto.hasNode = function hasNode(id) {
    var node = this.getNode(id);
    return node ? !node.isPurged : false;
  };
  _proto.onMountNode = function onMountNode(fn) {
    var _this4 = this;
    this.designer.editor.eventBus.on('node.add', fn);
    return function () {
      _this4.designer.editor.eventBus.off('node.add', fn);
    };
  }

  /**
   * 根据 schema 创建一个节点
   */;
  _proto.createNode = function createNode(data) {
    var _schema;
    var schema;
    if (isDOMText(data) || isJSExpression(data)) {
      schema = {
        componentName: 'Leaf',
        children: data
      };
    } else {
      schema = data;
    }
    var node = null;
    if (this.hasNode((_schema = schema) === null || _schema === void 0 ? void 0 : _schema.id)) {
      schema.id = null;
    }
    /* istanbul ignore next */
    if (schema.id) {
      node = this.getNode(schema.id);
      // TODO: 底下这几段代码似乎永远都进不去
      if (node && node.componentName === schema.componentName) {
        if (node.parent) {
          node.internalSetParent(null, false);
          // will move to another position
          // todo: this.activeNodes?.push(node);
        }
        node["import"](schema, true);
      } else if (node) {
        node = null;
      }
    }
    if (!node) {
      node = new Node(this, schema);
      // will add
      // todo: this.activeNodes?.push(node);
    }
    this._nodesMap.set(node.id, node);
    this.nodes.add(node);
    this.emitter.emit('nodecreate', node);
    return node;
  };
  _proto.destroyNode = function destroyNode(node) {
    this.emitter.emit('nodedestroy', node);
  }

  /**
   * 插入一个节点
   */;
  _proto.insertNode = function insertNode(parent, thing, at, copy) {
    return insertChild(parent, thing, at, copy);
  }

  /**
   * 插入多个节点
   */;
  _proto.insertNodes = function insertNodes(parent, thing, at, copy) {
    return insertChildren(parent, thing, at, copy);
  }

  /**
   * 移除一个节点
   */;
  _proto.removeNode = function removeNode(idOrNode) {
    var id;
    var node = null;
    if (typeof idOrNode === 'string') {
      id = idOrNode;
      node = this.getNode(id);
    } else if (idOrNode.id) {
      id = idOrNode.id;
      node = this.getNode(id);
    }
    if (!node) {
      return;
    }
    this.internalRemoveAndPurgeNode(node, true);
  }

  /**
   * 内部方法，请勿调用
   */;
  _proto.internalRemoveAndPurgeNode = function internalRemoveAndPurgeNode(node, useMutator) {
    if (useMutator === void 0) {
      useMutator = false;
    }
    if (!this.nodes.has(node)) {
      return;
    }
    node.remove(useMutator);
  };
  _proto.unlinkNode = function unlinkNode(node) {
    this.nodes["delete"](node);
    this._nodesMap["delete"](node.id);
  }

  /**
   * 包裹当前选区中的节点
   */;
  _proto.wrapWith = function wrapWith(schema) {
    var nodes = this.selection.getTopNodes();
    if (nodes.length < 1) {
      return null;
    }
    var wrapper = this.createNode(schema);
    if (wrapper.isParental()) {
      var first = nodes[0];
      // TODO: check nesting rules x 2
      insertChild(first.parent, wrapper, first.index);
      insertChildren(wrapper, nodes);
      this.selection.select(wrapper.id);
      return wrapper;
    }
    this.removeNode(wrapper);
    return null;
  };
  _proto["import"] = function _import(schema, checkId) {
    var _this$_drillDownNode,
      _this5 = this;
    if (checkId === void 0) {
      checkId = false;
    }
    var drillDownNodeId = (_this$_drillDownNode = this._drillDownNode) === null || _this$_drillDownNode === void 0 ? void 0 : _this$_drillDownNode.id;
    runWithGlobalEventOff(function () {
      var _this5$rootNode;
      // TODO: 暂时用饱和式删除，原因是 Slot 节点并不是树节点，无法正常递归删除
      _this5.nodes.forEach(function (node) {
        if (node.isRoot()) return;
        _this5.internalRemoveAndPurgeNode(node, true);
      });
      (_this5$rootNode = _this5.rootNode) === null || _this5$rootNode === void 0 ? void 0 : _this5$rootNode["import"](schema, checkId);
      _this5.modalNodesManager = new ModalNodesManager(_this5);
      // todo: select added and active track added
      if (drillDownNodeId) {
        _this5.drillDown(_this5.getNode(drillDownNodeId));
      }
    });
  };
  _proto["export"] = function _export(stage) {
    var _this$rootNode, _currentSchema$childr, _currentSchema$childr2;
    if (stage === void 0) {
      stage = IPublicEnumTransformStage.Serilize;
    }
    stage = compatStage(stage);
    // 置顶只作用于 Page 的第一级子节点，目前还用不到里层的置顶；如果后面有需要可以考虑将这段写到 node-children 中的 export
    var currentSchema = (_this$rootNode = this.rootNode) === null || _this$rootNode === void 0 ? void 0 : _this$rootNode["export"](stage);
    if (Array.isArray(currentSchema === null || currentSchema === void 0 ? void 0 : currentSchema.children) && currentSchema !== null && currentSchema !== void 0 && (_currentSchema$childr = currentSchema.children) !== null && _currentSchema$childr !== void 0 && _currentSchema$childr.length && (currentSchema === null || currentSchema === void 0 ? void 0 : (_currentSchema$childr2 = currentSchema.children) === null || _currentSchema$childr2 === void 0 ? void 0 : _currentSchema$childr2.length) > 0) {
      var FixedTopNodeIndex = currentSchema === null || currentSchema === void 0 ? void 0 : currentSchema.children.filter(function (i) {
        return isPlainObject(i);
      }).findIndex(function (i) {
        var _props;
        return (_props = i.props) === null || _props === void 0 ? void 0 : _props.__isTopFixed__;
      });
      if (FixedTopNodeIndex > 0) {
        var FixedTopNode = currentSchema === null || currentSchema === void 0 ? void 0 : currentSchema.children.splice(FixedTopNodeIndex, 1);
        currentSchema === null || currentSchema === void 0 ? void 0 : currentSchema.children.unshift(FixedTopNode[0]);
      }
    }
    return currentSchema;
  }

  /**
   * 导出节点数据
   */;
  _proto.getNodeSchema = function getNodeSchema(id) {
    var node = this.getNode(id);
    if (node) {
      return node.schema;
    }
    return null;
  }

  /**
   * 是否已修改
   */;
  _proto.isModified = function isModified() {
    return this.history.isSavePoint();
  }

  // FIXME: does needed?
  ;
  _proto.getComponent = function getComponent(componentName) {
    return this.simulator.getComponent(componentName);
  };
  _proto.getComponentMeta = function getComponentMeta(componentName) {
    var _this6 = this;
    return this.designer.getComponentMeta(componentName, function () {
      var _this6$simulator;
      return ((_this6$simulator = _this6.simulator) === null || _this6$simulator === void 0 ? void 0 : _this6$simulator.generateComponentMetadata(componentName)) || null;
    });
  }

  /**
   * 切换激活，只有打开的才能激活
   * 不激活，打开之后切换到另外一个时发生，比如 tab 视图，切换到另外一个标签页
   */;
  _proto.setSuspense = function setSuspense(flag) {
    var _this$simulator2;
    if (!this._opened && !flag) {
      return;
    }
    this._suspensed = flag;
    (_this$simulator2 = this.simulator) === null || _this$simulator2 === void 0 ? void 0 : _this$simulator2.setSuspense(flag);
    if (!flag) {
      this.project.checkExclusive(this);
    }
  };
  _proto.suspense = function suspense() {
    this.setSuspense(true);
  };
  _proto.activate = function activate() {
    this.setSuspense(false);
  }

  /**
   * 打开，已载入，默认建立时就打开状态，除非手动关闭
   */;
  _proto.open = function open() {
    var originState = this._opened;
    this._opened = true;
    if (originState === false) {
      this.designer.postEvent('document-open', this);
    }
    if (this._suspensed) {
      this.setSuspense(false);
    } else {
      this.project.checkExclusive(this);
    }
    return this;
  }

  /**
   * 关闭，相当于 sleep，仍然缓存，停止一切响应，如果有发生的变更没被保存，仍然需要去取数据保存
   */;
  _proto.close = function close() {
    this.setSuspense(true);
    this._opened = false;
  }

  /**
   * 从项目中移除
   */;
  _proto.remove = function remove() {
    this.designer.postEvent('document.remove', {
      id: this.id
    });
    this.purge();
    this.project.removeDocument(this);
  };
  _proto.purge = function purge() {
    var _this$rootNode2;
    (_this$rootNode2 = this.rootNode) === null || _this$rootNode2 === void 0 ? void 0 : _this$rootNode2.purge();
    this.nodes.clear();
    this._nodesMap.clear();
    this.rootNode = null;
  };
  _proto.checkNesting = function checkNesting(dropTarget, dragObject) {
    var _this7 = this;
    var items;
    if (isDragNodeDataObject(dragObject)) {
      items = Array.isArray(dragObject.data) ? dragObject.data : [dragObject.data];
    } else if (isDragNodeObject(dragObject)) {
      items = dragObject.nodes;
    } else if (isNode(dragObject) || isNodeSchema(dragObject)) {
      items = [dragObject];
    } else {
      console.warn('the dragObject is not in the correct type, dragObject:', dragObject);
      return true;
    }
    return items.every(function (item) {
      return _this7.checkNestingDown(dropTarget, item) && _this7.checkNestingUp(dropTarget, item);
    });
  }

  /**
   * @deprecated since version 1.0.16.
   * Will be deleted in version 2.0.0.
   * Use checkNesting method instead.
   */;
  _proto.checkDropTarget = function checkDropTarget(dropTarget, dragObject) {
    var _this8 = this;
    var items;
    if (isDragNodeDataObject(dragObject)) {
      items = Array.isArray(dragObject.data) ? dragObject.data : [dragObject.data];
    } else if (isDragNodeObject(dragObject)) {
      items = dragObject.nodes;
    } else {
      return false;
    }
    return items.every(function (item) {
      return _this8.checkNestingUp(dropTarget, item);
    });
  }

  /**
   * 检查对象对父级的要求，涉及配置 parentWhitelist
   */;
  _proto.checkNestingUp = function checkNestingUp(parent, obj) {
    if (isNode(obj) || isNodeSchema(obj)) {
      var config = isNode(obj) ? obj.componentMeta : this.getComponentMeta(obj.componentName);
      if (config) {
        return config.checkNestingUp(obj, parent);
      }
    }
    return true;
  }

  /**
   * 检查投放位置对子级的要求，涉及配置 childWhitelist
   */;
  _proto.checkNestingDown = function checkNestingDown(parent, obj) {
    var config = parent.componentMeta;
    return config.checkNestingDown(parent, obj);
  }

  // ======= compatibles for vision
  ;
  _proto.getRoot = function getRoot() {
    return this.rootNode;
  }

  // add toData
  ;
  _proto.toData = function toData(extraComps) {
    var node = this["export"](IPublicEnumTransformStage.Save);
    var data = {
      componentsMap: this.getComponentsMap(extraComps),
      utils: this.getUtilsMap(),
      componentsTree: [node]
    };
    return data;
  };
  _proto.getHistory = function getHistory() {
    return this.history;
  }

  /**
   * @deprecated
   */
  /* istanbul ignore next */;
  _proto.getAddonData = function getAddonData(name) {
    var addon = this._addons.find(function (item) {
      return item.name === name;
    });
    if (addon) {
      return addon.exportData();
    }
  }

  /**
   * @deprecated
  */
  /* istanbul ignore next */;
  _proto.exportAddonData = function exportAddonData() {
    var addons = {};
    this._addons.forEach(function (addon) {
      var data = addon.exportData();
      if (data === null) {
        delete addons[addon.name];
      } else {
        addons[addon.name] = data;
      }
    });
    return addons;
  }

  /**
   * @deprecated
   */
  /* istanbul ignore next */;
  _proto.registerAddon = function registerAddon(name, exportData) {
    if (['id', 'params', 'layout'].indexOf(name) > -1) {
      throw new Error('addon name cannot be id, params, layout');
    }
    var i = this._addons.findIndex(function (item) {
      return item.name === name;
    });
    if (i > -1) {
      this._addons.splice(i, 1);
    }
    this._addons.push({
      exportData: exportData,
      name: name
    });
  }

  /* istanbul ignore next */;
  _proto.acceptRootNodeVisitor = function acceptRootNodeVisitor(visitorName, visitorFn) {
    if (visitorName === void 0) {
      visitorName = 'default';
    }
    var visitorResult = {};
    if (!visitorName) {
      /* eslint-disable-next-line no-console */
      console.warn('Invalid or empty RootNodeVisitor name.');
    }
    try {
      if (this.rootNode) {
        visitorResult = visitorFn.call(this, this.rootNode);
        this.rootNodeVisitorMap[visitorName] = visitorResult;
      }
    } catch (e) {
      console.error('RootNodeVisitor is not valid.');
      console.error(e);
    }
    return visitorResult;
  }

  /* istanbul ignore next */;
  _proto.getRootNodeVisitor = function getRootNodeVisitor(name) {
    return this.rootNodeVisitorMap[name];
  };
  _proto.getComponentsMap = function getComponentsMap(extraComps) {
    var _this9 = this;
    var componentsMap = [];
    // 组件去重
    var exsitingMap = {};
    for (var _iterator = _createForOfIteratorHelperLoose(this._nodesMap.values()), _step; !(_step = _iterator()).done;) {
      var _node = _step.value;
      var _ref = _node || {},
        _componentName = _ref.componentName;
      if (_componentName === 'Slot') continue;
      if (!exsitingMap[_componentName]) {
        var _node$componentMeta, _node$componentMeta$n;
        exsitingMap[_componentName] = true;
        if ((_node$componentMeta = _node.componentMeta) !== null && _node$componentMeta !== void 0 && (_node$componentMeta$n = _node$componentMeta.npm) !== null && _node$componentMeta$n !== void 0 && _node$componentMeta$n["package"]) {
          componentsMap.push(_extends({}, _node.componentMeta.npm, {
            componentName: _componentName
          }));
        } else {
          componentsMap.push({
            devMode: 'lowCode',
            componentName: _componentName
          });
        }
      }
    }
    // 合并外界传入的自定义渲染的组件
    if (Array.isArray(extraComps)) {
      extraComps.forEach(function (componentName) {
        if (componentName && !exsitingMap[componentName]) {
          var _meta$npm;
          var meta = _this9.getComponentMeta(componentName);
          if (meta !== null && meta !== void 0 && (_meta$npm = meta.npm) !== null && _meta$npm !== void 0 && _meta$npm["package"]) {
            componentsMap.push(_extends({}, meta === null || meta === void 0 ? void 0 : meta.npm, {
              componentName: componentName
            }));
          } else {
            componentsMap.push({
              devMode: 'lowCode',
              componentName: componentName
            });
          }
        }
      });
    }
    return componentsMap;
  }

  /**
   * 获取 schema 中的 utils 节点，当前版本不判断页面中使用了哪些 utils，直接返回资产包中所有的 utils
   * @returns
   */;
  _proto.getUtilsMap = function getUtilsMap() {
    var _this$designer, _this$designer$editor3, _this$designer$editor4, _this$designer$editor5;
    return (_this$designer = this.designer) === null || _this$designer === void 0 ? void 0 : (_this$designer$editor3 = _this$designer.editor) === null || _this$designer$editor3 === void 0 ? void 0 : (_this$designer$editor4 = _this$designer$editor3.get('assets')) === null || _this$designer$editor4 === void 0 ? void 0 : (_this$designer$editor5 = _this$designer$editor4.utils) === null || _this$designer$editor5 === void 0 ? void 0 : _this$designer$editor5.map(function (item) {
      return {
        name: item.name,
        type: item.type || 'npm',
        // TODO 当前只有 npm 类型，content 直接设置为 item.npm，有 function 类型之后需要处理
        content: item.npm
      };
    });
  };
  _proto.onNodeCreate = function onNodeCreate(func) {
    var _this10 = this;
    var wrappedFunc = wrapWithEventSwitch(func);
    this.emitter.on('nodecreate', wrappedFunc);
    return function () {
      _this10.emitter.removeListener('nodecreate', wrappedFunc);
    };
  };
  _proto.onNodeDestroy = function onNodeDestroy(func) {
    var _this11 = this;
    var wrappedFunc = wrapWithEventSwitch(func);
    this.emitter.on('nodedestroy', wrappedFunc);
    return function () {
      _this11.emitter.removeListener('nodedestroy', wrappedFunc);
    };
  }

  /**
   * @deprecated
   */;
  _proto.refresh = function refresh() {
    console.warn('refresh method is deprecated');
  }

  /**
   * @deprecated
   */;
  _proto.onRefresh = function onRefresh( /* func: () => void */
  ) {
    console.warn('onRefresh method is deprecated');
  };
  _proto.onReady = function onReady(fn) {
    var _this12 = this;
    this.designer.editor.eventBus.on('document-open', fn);
    return function () {
      _this12.designer.editor.eventBus.off('document-open', fn);
    };
  };
  _proto.setupListenActiveNodes = function setupListenActiveNodes() {
    // todo:
  };
  _createClass(DocumentModel, [{
    key: "simulator",
    get:
    /**
     * 模拟器
     */
    function get() {
      return this.project.simulator;
    }
  }, {
    key: "nodesMap",
    get: function get() {
      return this._nodesMap;
    }
  }, {
    key: "fileName",
    get: function get() {
      var _this$rootNode3, _this$rootNode3$getEx;
      return ((_this$rootNode3 = this.rootNode) === null || _this$rootNode3 === void 0 ? void 0 : (_this$rootNode3$getEx = _this$rootNode3.getExtraProp('fileName', false)) === null || _this$rootNode3$getEx === void 0 ? void 0 : _this$rootNode3$getEx.getAsString()) || this.id;
    },
    set: function set(fileName) {
      var _this$rootNode4, _this$rootNode4$getEx;
      (_this$rootNode4 = this.rootNode) === null || _this$rootNode4 === void 0 ? void 0 : (_this$rootNode4$getEx = _this$rootNode4.getExtraProp('fileName', true)) === null || _this$rootNode4$getEx === void 0 ? void 0 : _this$rootNode4$getEx.setValue(fileName);
    }
  }, {
    key: "focusNode",
    get: function get() {
      if (this._drillDownNode) {
        return this._drillDownNode;
      }
      var selector = engineConfig.get('focusNodeSelector');
      if (selector && typeof selector === 'function') {
        return selector(this.rootNode);
      }
      return this.rootNode;
    }
  }, {
    key: "modalNode",
    get: function get() {
      return this._modalNode;
    }
  }, {
    key: "currentRoot",
    get: function get() {
      return this.modalNode || this.focusNode;
    }
  }, {
    key: "dropLocation",
    get:
    /**
     * 投放插入位置标记
     */
    function get() {
      return this._dropLocation;
    }

    /**
     * 导出 schema 数据
     */,
    set: function set(loc) {
      this._dropLocation = loc;
      // pub event
      this.designer.editor.eventBus.emit('document.dropLocation.changed', {
        document: this,
        location: loc
      });
    }
  }, {
    key: "schema",
    get: function get() {
      var _this$rootNode5;
      return (_this$rootNode5 = this.rootNode) === null || _this$rootNode5 === void 0 ? void 0 : _this$rootNode5.schema;
    }
  }, {
    key: "suspensed",
    get:
    /**
     * 是否为非激活状态
     */
    function get() {
      return this._suspensed || !this._opened;
    }

    /**
     * 与 suspensed 相反，是否为激活状态，这个函数可能用的更多一点
     */
  }, {
    key: "active",
    get: function get() {
      return !this._suspensed;
    }

    /**
     * @deprecated 兼容
     */
  }, {
    key: "actived",
    get: function get() {
      return this.active;
    }

    /**
     * 是否打开
     */
  }, {
    key: "opened",
    get: function get() {
      return this._opened;
    }
  }, {
    key: "root",
    get: function get() {
      return this.rootNode;
    }
  }]);
  return DocumentModel;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "nodes", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return new Set();
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "_drillDownNode", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "willPurgeSpace", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "activeNodes", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "_dropLocation", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "_opened", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "_suspensed", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _applyDecoratedDescriptor(_class.prototype, "createNode", [action], Object.getOwnPropertyDescriptor(_class.prototype, "createNode"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "import", [action], Object.getOwnPropertyDescriptor(_class.prototype, "import"), _class.prototype)), _class));
export function isDocumentModel(obj) {
  return obj && obj.rootNode;
}
export function isPageSchema(obj) {
  return (obj === null || obj === void 0 ? void 0 : obj.componentName) === 'Page';
}