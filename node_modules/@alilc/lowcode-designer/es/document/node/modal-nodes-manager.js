import { createModuleEventBus } from '@alilc/lowcode-editor-core';
export function getModalNodes(node) {
  if (!node) return [];
  var nodes = [];
  if (node.componentMeta.isModal) {
    nodes.push(node);
  }
  var children = node.children;
  if (children) {
    children.forEach(function (child) {
      nodes = nodes.concat(getModalNodes(child));
    });
  }
  return nodes;
}
export var ModalNodesManager = /*#__PURE__*/function () {
  function ModalNodesManager(page) {
    var _this = this;
    this.willDestroy = void 0;
    this.page = void 0;
    this.modalNodes = void 0;
    this.nodeRemoveEvents = void 0;
    this.emitter = void 0;
    this.page = page;
    this.emitter = createModuleEventBus('ModalNodesManager');
    this.nodeRemoveEvents = {};
    this.setNodes();
    this.hideModalNodes();
    this.willDestroy = [page.onNodeCreate(function (node) {
      return _this.addNode(node);
    }), page.onNodeDestroy(function (node) {
      return _this.removeNode(node);
    })];
  }
  var _proto = ModalNodesManager.prototype;
  _proto.getModalNodes = function getModalNodes() {
    return this.modalNodes;
  };
  _proto.getVisibleModalNode = function getVisibleModalNode() {
    var visibleNode = this.getModalNodes().find(function (node) {
      return node.getVisible();
    });
    return visibleNode || null;
  };
  _proto.hideModalNodes = function hideModalNodes() {
    this.modalNodes.forEach(function (node) {
      node.setVisible(false);
    });
  };
  _proto.setVisible = function setVisible(node) {
    this.hideModalNodes();
    node.setVisible(true);
  };
  _proto.setInvisible = function setInvisible(node) {
    node.setVisible(false);
  };
  _proto.onVisibleChange = function onVisibleChange(func) {
    var _this2 = this;
    this.emitter.on('visibleChange', func);
    return function () {
      _this2.emitter.removeListener('visibleChange', func);
    };
  };
  _proto.onModalNodesChange = function onModalNodesChange(func) {
    var _this3 = this;
    this.emitter.on('modalNodesChange', func);
    return function () {
      _this3.emitter.removeListener('modalNodesChange', func);
    };
  };
  _proto.addNode = function addNode(node) {
    if (node !== null && node !== void 0 && node.componentMeta.isModal) {
      this.hideModalNodes();
      this.modalNodes.push(node);
      this.addNodeEvent(node);
      this.emitter.emit('modalNodesChange');
      this.emitter.emit('visibleChange');
    }
  };
  _proto.removeNode = function removeNode(node) {
    if (node.componentMeta.isModal) {
      var index = this.modalNodes.indexOf(node);
      if (index >= 0) {
        this.modalNodes.splice(index, 1);
      }
      this.removeNodeEvent(node);
      this.emitter.emit('modalNodesChange');
      if (node.getVisible()) {
        this.emitter.emit('visibleChange');
      }
    }
  };
  _proto.addNodeEvent = function addNodeEvent(node) {
    var _this4 = this;
    this.nodeRemoveEvents[node.id] = node.onVisibleChange(function () {
      _this4.emitter.emit('visibleChange');
    });
  };
  _proto.removeNodeEvent = function removeNodeEvent(node) {
    if (this.nodeRemoveEvents[node.id]) {
      this.nodeRemoveEvents[node.id]();
      delete this.nodeRemoveEvents[node.id];
    }
  };
  _proto.setNodes = function setNodes() {
    var _this5 = this;
    var nodes = getModalNodes(this.page.rootNode);
    this.modalNodes = nodes;
    this.modalNodes.forEach(function (node) {
      _this5.addNodeEvent(node);
    });
    this.emitter.emit('modalNodesChange');
  };
  return ModalNodesManager;
}();