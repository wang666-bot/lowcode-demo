import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _excluded = ["componentName", "id", "children", "props"],
  _excluded2 = ["componentName", "id", "children", "props"];
var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
import { obx, computed, autorun, makeObservable, runInAction, wrapWithEventSwitch, action, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { IPublicEnumTransformStage } from '@alilc/lowcode-types';
import { compatStage, isDOMText, isJSExpression, isNode, isNodeSchema } from '@alilc/lowcode-utils';
import { Props, getConvertedExtraKey } from './props/props';
import { NodeChildren } from './node-children';
import { ExclusiveGroup, isExclusiveGroup } from './exclusive-group';
import { includeSlot, removeSlot } from '../../utils/slot';
import { foreachReverse } from '../../utils/tree';
import { EDITOR_EVENT } from '../../types';
/**
 * 基础节点
 *
 * [Node Properties]
 *  componentName: Page/Block/Component
 *  props
 *  children
 *
 * [Directives]
 *  loop
 *  loopArgs
 *  condition
 *  ------- addition support -----
 *  conditionGroup use for condition, for exclusive
 *  title          display on outline
 *  ignored        ignore this node will not publish to render, but will store
 *  isLocked       can not select/hover/ item on canvas and outline
 *  hidden         not visible on canvas
 *  slotArgs       like loopArgs, for slot node
 *
 * 根容器节点
 *
 * [Node Properties]
 *  componentName: Page/Block/Component
 *  props
 *  children
 *
 * [Root Container Extra Properties]
 *  fileName
 *  meta
 *  state
 *  defaultProps
 *  dataSource
 *  lifeCycles
 *  methods
 *  css
 *
 * [Directives **not used**]
 *  loop
 *  loopArgs
 *  condition
 *  ------- future support -----
 *  conditionGroup
 *  title
 *  ignored
 *  isLocked
 *  hidden
 */
export var Node = (_dec = obx.ref, _dec2 = obx.shallow, _dec3 = obx.ref, _dec4 = obx.shallow, (_class = /*#__PURE__*/function () {
  function Node(document, nodeSchema) {
    var _this = this;
    this.document = document;
    this.emitter = void 0;
    /**
     * 是节点实例
     */
    this.isNode = true;
    /**
     * 节点 id
     */
    this.id = void 0;
    /**
     * 节点组件类型
     * 特殊节点：
     *  * Page 页面
     *  * Block 区块
     *  * Component 组件/元件
     *  * Fragment 碎片节点，无 props，有指令
     *  * Leaf 文字节点 | 表达式节点，无 props，无指令？
     *  * Slot 插槽节点，无 props，正常 children，有 slotArgs，有指令
     */
    this.componentName = void 0;
    /**
     * 属性抽象
     */
    this.props = void 0;
    this._children = void 0;
    /**
     * @deprecated
     */
    this._addons = {};
    _initializerDefineProperty(this, "_parent", _descriptor, this);
    this.isInited = false;
    this._settingEntry = void 0;
    this.autoruns = void 0;
    this._isRGLContainer = false;
    this._slotFor = null;
    _initializerDefineProperty(this, "_slots", _descriptor2, this);
    /* istanbul ignore next */
    _initializerDefineProperty(this, "_conditionGroup", _descriptor3, this);
    this.purged = false;
    this.purging = false;
    _initializerDefineProperty(this, "status", _descriptor4, this);
    makeObservable(this);
    var componentName = nodeSchema.componentName,
      id = nodeSchema.id,
      children = nodeSchema.children,
      props = nodeSchema.props,
      extras = _objectWithoutPropertiesLoose(nodeSchema, _excluded);
    this.id = document.nextId(id);
    this.componentName = componentName;
    if (this.componentName === 'Leaf') {
      this.props = new Props(this, {
        children: isDOMText(children) || isJSExpression(children) ? children : ''
      });
    } else {
      this.props = new Props(this, props, extras);
      this._children = new NodeChildren(this, this.initialChildren(children));
      this._children.internalInitParent();
      this.props.merge(this.upgradeProps(this.initProps(props || {})), this.upgradeProps(extras));
      this.setupAutoruns();
    }
    this.initBuiltinProps();
    this.isInited = true;
    this.emitter = createModuleEventBus('Node');
    var editor = this.document.designer.editor;
    this.onVisibleChange(function (visible) {
      editor === null || editor === void 0 ? void 0 : editor.eventBus.emit(EDITOR_EVENT.NODE_VISIBLE_CHANGE, _this, visible);
    });
    this.onChildrenChange(function (info) {
      editor === null || editor === void 0 ? void 0 : editor.eventBus.emit(EDITOR_EVENT.NODE_CHILDREN_CHANGE, {
        type: info === null || info === void 0 ? void 0 : info.type,
        node: _this
      });
    });
  }

  /**
   * 节点初始化期间就把内置的一些 prop 初始化好，避免后续不断构造实例导致 reaction 执行多次
   */
  var _proto = Node.prototype;
  _proto.initBuiltinProps = function initBuiltinProps() {
    this.props.has(getConvertedExtraKey('hidden')) || this.props.add(false, getConvertedExtraKey('hidden'));
    this.props.has(getConvertedExtraKey('title')) || this.props.add('', getConvertedExtraKey('title'));
    this.props.has(getConvertedExtraKey('isLocked')) || this.props.add(false, getConvertedExtraKey('isLocked'));
    this.props.has(getConvertedExtraKey('condition')) || this.props.add(true, getConvertedExtraKey('condition'));
    this.props.has(getConvertedExtraKey('conditionGroup')) || this.props.add('', getConvertedExtraKey('conditionGroup'));
    this.props.has(getConvertedExtraKey('loop')) || this.props.add(undefined, getConvertedExtraKey('loop'));
  };
  _proto.initProps = function initProps(props) {
    return this.document.designer.transformProps(props, this, IPublicEnumTransformStage.Init);
  };
  _proto.upgradeProps = function upgradeProps(props) {
    return this.document.designer.transformProps(props, this, IPublicEnumTransformStage.Upgrade);
  };
  _proto.setupAutoruns = function setupAutoruns() {
    var _this2 = this;
    var autoruns = this.componentMeta.advanced.autoruns;
    if (!autoruns || autoruns.length < 1) {
      return;
    }
    this.autoruns = autoruns.map(function (item) {
      return autorun(function () {
        var _this2$props$getNode$;
        item.autorun((_this2$props$getNode$ = _this2.props.getNode().settingEntry.get(item.name)) === null || _this2$props$getNode$ === void 0 ? void 0 : _this2$props$getNode$.internalToShellField());
      });
    });
  };
  _proto.initialChildren = function initialChildren(children) {
    var initialChildren = this.componentMeta.advanced.initialChildren;
    if (children == null) {
      if (initialChildren) {
        if (typeof initialChildren === 'function') {
          return initialChildren(this.internalToShellNode()) || [];
        }
        return initialChildren;
      }
      return [];
    }
    if (Array.isArray(children)) {
      return children;
    }
    return [children];
  };
  _proto.isContainer = function isContainer() {
    return this.isContainerNode;
  };
  _proto.isModal = function isModal() {
    return this.isModalNode;
  };
  _proto.isRoot = function isRoot() {
    return this.isRootNode;
  };
  _proto.isPage = function isPage() {
    return this.isPageNode;
  };
  _proto.isComponent = function isComponent() {
    return this.isComponentNode;
  };
  _proto.isSlot = function isSlot() {
    return this.isSlotNode;
  };
  /**
   * 是否一个父亲类节点
   */
  _proto.isParental = function isParental() {
    return this.isParentalNode;
  };
  /**
   * 终端节点，内容一般为 文字 或者 表达式
   */
  _proto.isLeaf = function isLeaf() {
    return this.isLeafNode;
  };
  _proto.internalSetWillPurge = function internalSetWillPurge() {
    this.internalSetParent(null);
    this.document.addWillPurge(this);
  };
  _proto.didDropIn = function didDropIn(dragment) {
    var callbacks = this.componentMeta.advanced.callbacks;
    if (callbacks !== null && callbacks !== void 0 && callbacks.onNodeAdd) {
      var cbThis = this.internalToShellNode();
      callbacks === null || callbacks === void 0 ? void 0 : callbacks.onNodeAdd.call(cbThis, dragment.internalToShellNode(), cbThis);
    }
    if (this._parent) {
      this._parent.didDropIn(dragment);
    }
  };
  _proto.didDropOut = function didDropOut(dragment) {
    var callbacks = this.componentMeta.advanced.callbacks;
    if (callbacks !== null && callbacks !== void 0 && callbacks.onNodeRemove) {
      var cbThis = this.internalToShellNode();
      callbacks === null || callbacks === void 0 ? void 0 : callbacks.onNodeRemove.call(cbThis, dragment.internalToShellNode(), cbThis);
    }
    if (this._parent) {
      this._parent.didDropOut(dragment);
    }
  }

  /**
   * 内部方法，请勿使用
   * @param useMutator 是否触发联动逻辑
   */;
  _proto.internalSetParent = function internalSetParent(parent, useMutator) {
    if (useMutator === void 0) {
      useMutator = false;
    }
    if (this._parent === parent) {
      return;
    }

    // 解除老的父子关系，但不需要真的删除节点
    if (this._parent) {
      if (this.isSlot()) {
        this._parent.unlinkSlot(this);
      } else {
        var _this$_parent$childre;
        (_this$_parent$childre = this._parent.children) === null || _this$_parent$childre === void 0 ? void 0 : _this$_parent$childre.unlinkChild(this);
      }
    }
    if (useMutator) {
      var _this$_parent;
      (_this$_parent = this._parent) === null || _this$_parent === void 0 ? void 0 : _this$_parent.didDropOut(this);
    }
    if (parent) {
      // 建立新的父子关系，尤其注意：对于 parent 为 null 的场景，不会赋值，因为 subtreeModified 等事件可能需要知道该 node 被删除前的父子关系
      this._parent = parent;
      this.document.removeWillPurge(this);
      /* istanbul ignore next */
      if (!this.conditionGroup) {
        var _this$getExtraProp;
        // initial conditionGroup
        var _grp2 = (_this$getExtraProp = this.getExtraProp('conditionGroup', false)) === null || _this$getExtraProp === void 0 ? void 0 : _this$getExtraProp.getAsString();
        if (_grp2) {
          this.setConditionGroup(_grp2);
        }
      }
      if (useMutator) {
        parent.didDropIn(this);
      }
    }
  };
  _proto.internalSetSlotFor = function internalSetSlotFor(slotFor) {
    this._slotFor = slotFor;
  };
  _proto.internalToShellNode = function internalToShellNode() {
    return this.document.designer.shellModelFactory.createNode(this);
  }

  /**
   * 关联属性
   */;
  /**
   * 移除当前节点
   */
  _proto.remove = function remove(useMutator, purge, options) {
    if (useMutator === void 0) {
      useMutator = true;
    }
    if (purge === void 0) {
      purge = true;
    }
    if (options === void 0) {
      options = {
        suppressRemoveEvent: false
      };
    }
    if (this.parent) {
      if (!options.suppressRemoveEvent) {
        var _this$document$design, _this$parent, _this$parent$children;
        (_this$document$design = this.document.designer.editor) === null || _this$document$design === void 0 ? void 0 : _this$document$design.eventBus.emit('node.remove.topLevel', {
          node: this,
          index: (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$children = _this$parent.children) === null || _this$parent$children === void 0 ? void 0 : _this$parent$children.indexOf(this)
        });
      }
      if (this.isSlot()) {
        var _this$parent$children2;
        this.parent.removeSlot(this);
        (_this$parent$children2 = this.parent.children) === null || _this$parent$children2 === void 0 ? void 0 : _this$parent$children2.internalDelete(this, purge, useMutator, {
          suppressRemoveEvent: true
        });
      } else {
        var _this$parent$children3;
        (_this$parent$children3 = this.parent.children) === null || _this$parent$children3 === void 0 ? void 0 : _this$parent$children3.internalDelete(this, purge, useMutator, {
          suppressRemoveEvent: true
        });
      }
    }
  }

  /**
   * 锁住当前节点
   */;
  _proto.lock = function lock(flag) {
    if (flag === void 0) {
      flag = true;
    }
    this.setExtraProp('isLocked', flag);
  }

  /**
   * 获取当前节点的锁定状态
   */;
  _proto.canSelect = function canSelect() {
    var _this$componentMeta, _this$componentMeta$a, _this$componentMeta$a2;
    var onSelectHook = (_this$componentMeta = this.componentMeta) === null || _this$componentMeta === void 0 ? void 0 : (_this$componentMeta$a = _this$componentMeta.advanced) === null || _this$componentMeta$a === void 0 ? void 0 : (_this$componentMeta$a2 = _this$componentMeta$a.callbacks) === null || _this$componentMeta$a2 === void 0 ? void 0 : _this$componentMeta$a2.onSelectHook;
    var canSelect = typeof onSelectHook === 'function' ? onSelectHook(this.internalToShellNode()) : true;
    return canSelect;
  }

  /**
   * 选择当前节点
   */;
  _proto.select = function select() {
    this.document.selection.select(this.id);
  }

  /**
   * 悬停高亮
   */;
  _proto.hover = function hover(flag) {
    if (flag === void 0) {
      flag = true;
    }
    if (flag) {
      this.document.designer.detecting.capture(this);
    } else {
      this.document.designer.detecting.release(this);
    }
  }

  /**
   * 节点组件描述
   */;
  _proto.hasSlots = function hasSlots() {
    return this._slots.length > 0;
  }

  /* istanbul ignore next */;
  _proto.setConditionGroup = function setConditionGroup(grp) {
    var _grp = null;
    if (!grp) {
      var _this$getExtraProp2;
      (_this$getExtraProp2 = this.getExtraProp('conditionGroup', false)) === null || _this$getExtraProp2 === void 0 ? void 0 : _this$getExtraProp2.remove();
      if (this._conditionGroup) {
        this._conditionGroup.remove(this);
        this._conditionGroup = null;
      }
      return;
    }
    if (!isExclusiveGroup(grp)) {
      var _this$prevSibling, _this$prevSibling$con, _this$nextSibling, _this$nextSibling$con;
      if (((_this$prevSibling = this.prevSibling) === null || _this$prevSibling === void 0 ? void 0 : (_this$prevSibling$con = _this$prevSibling.conditionGroup) === null || _this$prevSibling$con === void 0 ? void 0 : _this$prevSibling$con.name) === grp) {
        _grp = this.prevSibling.conditionGroup;
      } else if (((_this$nextSibling = this.nextSibling) === null || _this$nextSibling === void 0 ? void 0 : (_this$nextSibling$con = _this$nextSibling.conditionGroup) === null || _this$nextSibling$con === void 0 ? void 0 : _this$nextSibling$con.name) === grp) {
        _grp = this.nextSibling.conditionGroup;
      } else if (typeof grp === 'string') {
        _grp = new ExclusiveGroup(grp);
      }
    }
    if (_grp && this._conditionGroup !== _grp) {
      var _this$getExtraProp3, _grp3;
      (_this$getExtraProp3 = this.getExtraProp('conditionGroup', true)) === null || _this$getExtraProp3 === void 0 ? void 0 : _this$getExtraProp3.setValue(_grp.name);
      if (this._conditionGroup) {
        this._conditionGroup.remove(this);
      }
      this._conditionGroup = _grp;
      (_grp3 = _grp) === null || _grp3 === void 0 ? void 0 : _grp3.add(this);
    }
  }

  /* istanbul ignore next */;
  _proto.isConditionalVisible = function isConditionalVisible() {
    var _this$_conditionGroup;
    return (_this$_conditionGroup = this._conditionGroup) === null || _this$_conditionGroup === void 0 ? void 0 : _this$_conditionGroup.isVisible(this);
  }

  /* istanbul ignore next */;
  _proto.setConditionalVisible = function setConditionalVisible() {
    var _this$_conditionGroup2;
    (_this$_conditionGroup2 = this._conditionGroup) === null || _this$_conditionGroup2 === void 0 ? void 0 : _this$_conditionGroup2.setVisible(this);
  };
  _proto.hasCondition = function hasCondition() {
    var _this$getExtraProp4;
    var v = (_this$getExtraProp4 = this.getExtraProp('condition', false)) === null || _this$getExtraProp4 === void 0 ? void 0 : _this$getExtraProp4.getValue();
    return v != null && v !== '' && v !== true;
  }

  /**
   * has loop when 1. loop is validArray with length > 1 ; OR  2. loop is variable object
   * @return boolean, has loop config or not
   */;
  _proto.hasLoop = function hasLoop() {
    var _this$getExtraProp5;
    var value = (_this$getExtraProp5 = this.getExtraProp('loop', false)) === null || _this$getExtraProp5 === void 0 ? void 0 : _this$getExtraProp5.getValue();
    if (value === undefined || value === null) {
      return false;
    }
    if (Array.isArray(value)) {
      return true;
    }
    if (isJSExpression(value)) {
      return true;
    }
    return false;
  }

  /* istanbul ignore next */;
  _proto.wrapWith = function wrapWith(schema) {
    var wrappedNode = this.replaceWith(_extends({}, schema, {
      children: [this["export"]()]
    }));
    return wrappedNode.children.get(0);
  };
  _proto.replaceWith = function replaceWith(schema, migrate) {
    var _this$parent2;
    if (migrate === void 0) {
      migrate = false;
    }
    // reuse the same id? or replaceSelection
    schema = Object.assign({}, migrate ? this["export"]() : {}, schema);
    return (_this$parent2 = this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.replaceChild(this, schema);
  }

  /**
   * 替换子节点
   *
   * @param {INode} node
   * @param {object} data
   */;
  _proto.replaceChild = function replaceChild(node, data) {
    var _this$children;
    if ((_this$children = this.children) !== null && _this$children !== void 0 && _this$children.has(node)) {
      var selected = this.document.selection.has(node.id);
      delete data.id;
      var newNode = this.document.createNode(data);
      if (!isNode(newNode)) {
        return null;
      }
      this.insertBefore(newNode, node, false);
      node.remove(false);
      if (selected) {
        this.document.selection.select(newNode.id);
      }
      return newNode;
    }
    return node;
  };
  _proto.setVisible = function setVisible(flag) {
    var _this$getExtraProp6;
    (_this$getExtraProp6 = this.getExtraProp('hidden')) === null || _this$getExtraProp6 === void 0 ? void 0 : _this$getExtraProp6.setValue(!flag);
    this.emitter.emit('visibleChange', flag);
  };
  _proto.getVisible = function getVisible() {
    var _this$getExtraProp7;
    return !((_this$getExtraProp7 = this.getExtraProp('hidden')) !== null && _this$getExtraProp7 !== void 0 && _this$getExtraProp7.getValue());
  };
  _proto.onVisibleChange = function onVisibleChange(func) {
    var _this3 = this;
    var wrappedFunc = wrapWithEventSwitch(func);
    this.emitter.on('visibleChange', wrappedFunc);
    return function () {
      _this3.emitter.removeListener('visibleChange', wrappedFunc);
    };
  };
  _proto.getProp = function getProp(path, createIfNone) {
    if (createIfNone === void 0) {
      createIfNone = true;
    }
    return this.props.query(path, createIfNone) || null;
  };
  _proto.getExtraProp = function getExtraProp(key, createIfNone) {
    if (createIfNone === void 0) {
      createIfNone = true;
    }
    return this.props.get(getConvertedExtraKey(key), createIfNone) || null;
  };
  _proto.setExtraProp = function setExtraProp(key, value) {
    var _this$getProp;
    (_this$getProp = this.getProp(getConvertedExtraKey(key), true)) === null || _this$getProp === void 0 ? void 0 : _this$getProp.setValue(value);
  }

  /**
   * 获取单个属性值
   */;
  _proto.getPropValue = function getPropValue(path) {
    var _this$getProp2;
    return (_this$getProp2 = this.getProp(path, false)) === null || _this$getProp2 === void 0 ? void 0 : _this$getProp2.value;
  }

  /**
   * 设置单个属性值
   */;
  _proto.setPropValue = function setPropValue(path, value) {
    this.getProp(path, true).setValue(value);
  }

  /**
   * 清除已设置的值
   */;
  _proto.clearPropValue = function clearPropValue(path) {
    var _this$getProp3;
    (_this$getProp3 = this.getProp(path, false)) === null || _this$getProp3 === void 0 ? void 0 : _this$getProp3.unset();
  }

  /**
   * 设置多个属性值，和原有值合并
   */;
  _proto.mergeProps = function mergeProps(props) {
    this.props.merge(props);
  }

  /**
   * 设置多个属性值，替换原有值
   */;
  _proto.setProps = function setProps(props) {
    if (props instanceof Props) {
      this.props = props;
      return;
    }
    this.props["import"](props);
  }

  /**
   * 获取节点在父容器中的索引
   */;
  _proto["import"] = function _import(data, checkId) {
    if (checkId === void 0) {
      checkId = false;
    }
    var componentName = data.componentName,
      id = data.id,
      children = data.children,
      props = data.props,
      extras = _objectWithoutPropertiesLoose(data, _excluded2);
    if (this.isSlot()) {
      foreachReverse(this.children, function (subNode) {
        subNode.remove(true, true);
      }, function (iterable, idx) {
        return iterable.get(idx);
      });
    }
    if (this.isParental()) {
      var _this$_children;
      this.props["import"](props, extras);
      (_this$_children = this._children) === null || _this$_children === void 0 ? void 0 : _this$_children["import"](children, checkId);
    } else {
      this.props.get('children', true).setValue(isDOMText(children) || isJSExpression(children) ? children : '');
    }
  };
  _proto.toData = function toData() {
    return this["export"]();
  }

  /**
   * 导出 schema
   */;
  _proto["export"] = function _export(stage, options) {
    var _this4 = this;
    if (stage === void 0) {
      stage = IPublicEnumTransformStage.Save;
    }
    if (options === void 0) {
      options = {};
    }
    stage = compatStage(stage);
    var baseSchema = {
      componentName: this.componentName
    };
    if (stage !== IPublicEnumTransformStage.Clone) {
      baseSchema.id = this.id;
    }
    if (stage === IPublicEnumTransformStage.Render) {
      baseSchema.docId = this.document.id;
    }
    if (this.isLeaf()) {
      if (!options.bypassChildren) {
        var _this$props$get;
        baseSchema.children = (_this$props$get = this.props.get('children')) === null || _this$props$get === void 0 ? void 0 : _this$props$get["export"](stage);
      }
      return baseSchema;
    }
    var _ref = this.props["export"](stage) || {},
      _ref$props = _ref.props,
      props = _ref$props === void 0 ? {} : _ref$props,
      extras = _ref.extras;
    var _extras_ = _extends({}, extras);
    /* istanbul ignore next */
    Object.keys(this._addons).forEach(function (key) {
      var addon = _this4._addons[key];
      if (addon) {
        if (addon.isProp) {
          props[getConvertedExtraKey(key)] = addon.exportData();
        } else {
          _extras_[key] = addon.exportData();
        }
      }
    });
    var schema = _extends({}, baseSchema, {
      props: this.document.designer.transformProps(props, this, stage)
    }, this.document.designer.transformProps(_extras_, this, stage));
    if (this.isParental() && this.children && this.children.size > 0 && !options.bypassChildren) {
      schema.children = this.children["export"](stage);
    }
    return schema;
  }

  /**
   * 判断是否包含特定节点
   */;
  _proto.contains = function contains(node) {
    return _contains(this, node);
  }

  /**
   * 获取特定深度的父亲节点
   */;
  _proto.getZLevelTop = function getZLevelTop(zLevel) {
    return _getZLevelTop(this, zLevel);
  }

  /**
   * 判断与其它节点的位置关系
   *
   *  16 thisNode contains otherNode
   *  8  thisNode contained_by otherNode
   *  2  thisNode before or after otherNode
   *  0  thisNode same as otherNode
   */;
  _proto.comparePosition = function comparePosition(otherNode) {
    return _comparePosition(this, otherNode);
  };
  _proto.unlinkSlot = function unlinkSlot(slotNode) {
    var i = this._slots.indexOf(slotNode);
    if (i < 0) {
      return false;
    }
    this._slots.splice(i, 1);
  }

  /**
   * 删除一个Slot节点
   */;
  _proto.removeSlot = function removeSlot(slotNode) {
    // if (purge) {
    //   // should set parent null
    //   slotNode?.internalSetParent(null, false);
    //   slotNode?.purge();
    // }
    // this.document.unlinkNode(slotNode);
    // this.document.selection.remove(slotNode.id);
    var i = this._slots.indexOf(slotNode);
    if (i < 0) {
      return false;
    }
    this._slots.splice(i, 1);
    return false;
  };
  _proto.addSlot = function addSlot(slotNode) {
    var _slotNode$getExtraPro;
    var slotName = slotNode === null || slotNode === void 0 ? void 0 : (_slotNode$getExtraPro = slotNode.getExtraProp('name')) === null || _slotNode$getExtraPro === void 0 ? void 0 : _slotNode$getExtraPro.getAsString();
    // 一个组件下的所有 slot，相同 slotName 的 slot 应该是唯一的
    if (includeSlot(this, slotName)) {
      removeSlot(this, slotName);
    }
    slotNode.internalSetParent(this, true);
    this._slots.push(slotNode);
  }

  /**
   * 当前node对应组件是否已注册可用
   */;
  _proto.isValidComponent = function isValidComponent() {
    var _this$document, _this$document$design2;
    var allComponents = (_this$document = this.document) === null || _this$document === void 0 ? void 0 : (_this$document$design2 = _this$document.designer) === null || _this$document$design2 === void 0 ? void 0 : _this$document$design2.componentsMap;
    if (allComponents && allComponents[this.componentName]) {
      return true;
    }
    return false;
  }

  /**
   * 删除一个节点
   * @param node
   */;
  _proto.removeChild = function removeChild(node) {
    var _this$children2;
    (_this$children2 = this.children) === null || _this$children2 === void 0 ? void 0 : _this$children2["delete"](node);
  }

  /**
   * 销毁
   */;
  _proto.purge = function purge() {
    var _this$autoruns, _this$settingEntry;
    if (this.purged) {
      return;
    }
    this.purged = true;
    (_this$autoruns = this.autoruns) === null || _this$autoruns === void 0 ? void 0 : _this$autoruns.forEach(function (dispose) {
      return dispose();
    });
    this.props.purge();
    (_this$settingEntry = this.settingEntry) === null || _this$settingEntry === void 0 ? void 0 : _this$settingEntry.purge();
    // this.document.destroyNode(this);
  };
  _proto.internalPurgeStart = function internalPurgeStart() {
    this.purging = true;
  }

  /**
   * 是否可执行某 action
   */;
  _proto.canPerformAction = function canPerformAction(actionName) {
    var _this$componentMeta2,
      _this$componentMeta2$,
      _this5 = this;
    var availableActions = ((_this$componentMeta2 = this.componentMeta) === null || _this$componentMeta2 === void 0 ? void 0 : (_this$componentMeta2$ = _this$componentMeta2.availableActions) === null || _this$componentMeta2$ === void 0 ? void 0 : _this$componentMeta2$.filter(function (action) {
      var condition = action.condition;
      return typeof condition === 'function' ? condition(_this5) !== false : condition !== false;
    }).map(function (action) {
      return action.name;
    })) || [];
    return availableActions.indexOf(actionName) >= 0;
  }

  // ======= compatible apis ====
  ;
  _proto.isEmpty = function isEmpty() {
    return this.children ? this.children.isEmpty() : true;
  };
  _proto.getChildren = function getChildren() {
    return this.children;
  };
  _proto.getComponentName = function getComponentName() {
    return this.componentName;
  };
  _proto.insert = function insert(node, ref, useMutator) {
    if (useMutator === void 0) {
      useMutator = true;
    }
    this.insertAfter(node, ref, useMutator);
  };
  _proto.insertBefore = function insertBefore(node, ref, useMutator) {
    var _this$children3;
    if (useMutator === void 0) {
      useMutator = true;
    }
    var nodeInstance = ensureNode(node, this.document);
    (_this$children3 = this.children) === null || _this$children3 === void 0 ? void 0 : _this$children3.internalInsert(nodeInstance, ref ? ref.index : null, useMutator);
  };
  _proto.insertAfter = function insertAfter(node, ref, useMutator) {
    var _this$children4;
    if (useMutator === void 0) {
      useMutator = true;
    }
    var nodeInstance = ensureNode(node, this.document);
    (_this$children4 = this.children) === null || _this$children4 === void 0 ? void 0 : _this$children4.internalInsert(nodeInstance, ref ? (ref.index || 0) + 1 : null, useMutator);
  };
  _proto.getParent = function getParent() {
    return this.parent;
  };
  _proto.getId = function getId() {
    return this.id;
  };
  _proto.getIndex = function getIndex() {
    return this.index;
  };
  _proto.getNode = function getNode() {
    return this;
  };
  _proto.getRoot = function getRoot() {
    return this.document.rootNode;
  };
  _proto.getProps = function getProps() {
    return this.props;
  };
  _proto.onChildrenChange = function onChildrenChange(fn) {
    var _this$children5;
    var wrappedFunc = wrapWithEventSwitch(fn);
    return (_this$children5 = this.children) === null || _this$children5 === void 0 ? void 0 : _this$children5.onChange(wrappedFunc);
  };
  _proto.mergeChildren = function mergeChildren(remover, adder, sorter) {
    var _this$children6;
    (_this$children6 = this.children) === null || _this$children6 === void 0 ? void 0 : _this$children6.mergeChildren(remover, adder, sorter);
  }

  /**
   * @deprecated
   */;
  _proto.getStatus = function getStatus(field) {
    if (field && this.status[field] != null) {
      return this.status[field];
    }
    return this.status;
  }

  /**
   * @deprecated
   */;
  _proto.setStatus = function setStatus(field, flag) {
    if (!this.status.hasOwnProperty(field)) {
      return;
    }
    if (flag !== this.status[field]) {
      this.status[field] = flag;
    }
  }

  /**
   * @deprecated
   */;
  _proto.getDOMNode = function getDOMNode() {
    var _this$document$simula, _this$document$simula2, _this$document$simula3, _this$document$simula4;
    var instance = (_this$document$simula = this.document.simulator) === null || _this$document$simula === void 0 ? void 0 : (_this$document$simula2 = _this$document$simula.getComponentInstances(this)) === null || _this$document$simula2 === void 0 ? void 0 : _this$document$simula2[0];
    if (!instance) {
      return;
    }
    return (_this$document$simula3 = this.document.simulator) === null || _this$document$simula3 === void 0 ? void 0 : (_this$document$simula4 = _this$document$simula3.findDOMNodes(instance)) === null || _this$document$simula4 === void 0 ? void 0 : _this$document$simula4[0];
  }

  /**
   * @deprecated
   */;
  _proto.getPage = function getPage() {
    console.warn('getPage is deprecated, use document instead');
    return this.document;
  }

  /**
   * 获取磁贴相关信息
   */;
  _proto.getRGL = function getRGL() {
    var _this$getParent;
    var isContainerNode = this.isContainer();
    var isEmptyNode = this.isEmpty();
    var isRGLContainerNode = this.isRGLContainer;
    var isRGLNode = (_this$getParent = this.getParent()) === null || _this$getParent === void 0 ? void 0 : _this$getParent.isRGLContainer;
    var isRGL = isRGLContainerNode || isRGLNode && (!isContainerNode || !isEmptyNode);
    var rglNode = isRGLContainerNode ? this : isRGL ? this === null || this === void 0 ? void 0 : this.getParent() : null;
    return {
      isContainerNode: isContainerNode,
      isEmptyNode: isEmptyNode,
      isRGLContainerNode: isRGLContainerNode,
      isRGLNode: isRGLNode,
      isRGL: isRGL,
      rglNode: rglNode
    };
  }

  /**
   * @deprecated no one is using this, will be removed in a future release
   */;
  _proto.getSuitablePlace = function getSuitablePlace(node, ref) {
    var _this$document2, _node$componentMeta, _this$componentMeta4, _this$componentMeta4$, _this$componentMeta4$2;
    var focusNode = (_this$document2 = this.document) === null || _this$document2 === void 0 ? void 0 : _this$document2.focusNode;
    // 如果节点是模态框，插入到根节点下
    if (node !== null && node !== void 0 && (_node$componentMeta = node.componentMeta) !== null && _node$componentMeta !== void 0 && _node$componentMeta.isModal) {
      return {
        container: focusNode,
        ref: ref
      };
    }
    if (!ref && focusNode && this.contains(focusNode)) {
      var _focusNode$componentM, _focusNode$componentM2, _focusNode$componentM3;
      var rootCanDropIn = (_focusNode$componentM = focusNode.componentMeta) === null || _focusNode$componentM === void 0 ? void 0 : (_focusNode$componentM2 = _focusNode$componentM.prototype) === null || _focusNode$componentM2 === void 0 ? void 0 : (_focusNode$componentM3 = _focusNode$componentM2.options) === null || _focusNode$componentM3 === void 0 ? void 0 : _focusNode$componentM3.canDropIn;
      if (rootCanDropIn === undefined || rootCanDropIn === true || typeof rootCanDropIn === 'function' && rootCanDropIn(node)) {
        return {
          container: focusNode
        };
      }
      return null;
    }
    if (this.isRoot() && this.children) {
      var _this$componentMeta3, _this$componentMeta3$, _this$componentMeta3$2;
      var dropElement = this.children.filter(function (c) {
        var _c$componentMeta, _c$componentMeta$prot, _c$componentMeta$prot2;
        if (!c.isContainerNode) {
          return false;
        }
        var canDropIn = (_c$componentMeta = c.componentMeta) === null || _c$componentMeta === void 0 ? void 0 : (_c$componentMeta$prot = _c$componentMeta.prototype) === null || _c$componentMeta$prot === void 0 ? void 0 : (_c$componentMeta$prot2 = _c$componentMeta$prot.options) === null || _c$componentMeta$prot2 === void 0 ? void 0 : _c$componentMeta$prot2.canDropIn;
        if (canDropIn === undefined || canDropIn === true || typeof canDropIn === 'function' && canDropIn(node)) {
          return true;
        }
        return false;
      })[0];
      if (dropElement) {
        return {
          container: dropElement,
          ref: ref
        };
      }
      var _rootCanDropIn = (_this$componentMeta3 = this.componentMeta) === null || _this$componentMeta3 === void 0 ? void 0 : (_this$componentMeta3$ = _this$componentMeta3.prototype) === null || _this$componentMeta3$ === void 0 ? void 0 : (_this$componentMeta3$2 = _this$componentMeta3$.options) === null || _this$componentMeta3$2 === void 0 ? void 0 : _this$componentMeta3$2.canDropIn;
      if (_rootCanDropIn === undefined || _rootCanDropIn === true || typeof _rootCanDropIn === 'function' && _rootCanDropIn(node)) {
        return {
          container: this,
          ref: ref
        };
      }
      return null;
    }
    var canDropIn = (_this$componentMeta4 = this.componentMeta) === null || _this$componentMeta4 === void 0 ? void 0 : (_this$componentMeta4$ = _this$componentMeta4.prototype) === null || _this$componentMeta4$ === void 0 ? void 0 : (_this$componentMeta4$2 = _this$componentMeta4$.options) === null || _this$componentMeta4$2 === void 0 ? void 0 : _this$componentMeta4$2.canDropIn;
    if (this.isContainer()) {
      if (canDropIn === undefined || typeof canDropIn === 'boolean' && canDropIn || typeof canDropIn === 'function' && canDropIn(node)) {
        return {
          container: this,
          ref: ref
        };
      }
    }
    if (this.parent) {
      return this.parent.getSuitablePlace(node, {
        index: this.index
      });
    }
    return null;
  }

  /**
   * @deprecated
   */;
  _proto.getAddonData = function getAddonData(key) {
    var _this$getExtraProp8;
    var addon = this._addons[key];
    if (addon) {
      return addon.exportData();
    }
    return (_this$getExtraProp8 = this.getExtraProp(key)) === null || _this$getExtraProp8 === void 0 ? void 0 : _this$getExtraProp8.getValue();
  }

  /**
   * @deprecated
   */;
  _proto.registerAddon = function registerAddon(key, exportData, isProp) {
    if (isProp === void 0) {
      isProp = false;
    }
    this._addons[key] = {
      exportData: exportData,
      isProp: isProp
    };
  };
  _proto.getRect = function getRect() {
    var _this$document$simula6;
    if (this.isRoot()) {
      var _this$document$simula5;
      return ((_this$document$simula5 = this.document.simulator) === null || _this$document$simula5 === void 0 ? void 0 : _this$document$simula5.viewport.contentBounds) || null;
    }
    return ((_this$document$simula6 = this.document.simulator) === null || _this$document$simula6 === void 0 ? void 0 : _this$document$simula6.computeRect(this)) || null;
  }

  /**
   * @deprecated
   */;
  _proto.getPrototype = function getPrototype() {
    return this.componentMeta.prototype;
  }

  /**
   * @deprecated
   */;
  _proto.setPrototype = function setPrototype(proto) {
    this.componentMeta.prototype = proto;
  };
  _proto.getIcon = function getIcon() {
    return this.icon;
  };
  _proto.toString = function toString() {
    return this.id;
  };
  _proto.emitPropChange = function emitPropChange(val) {
    var _this$emitter;
    (_this$emitter = this.emitter) === null || _this$emitter === void 0 ? void 0 : _this$emitter.emit('propChange', val);
  };
  _proto.onPropChange = function onPropChange(func) {
    var _this6 = this;
    var wrappedFunc = wrapWithEventSwitch(func);
    this.emitter.on('propChange', wrappedFunc);
    return function () {
      _this6.emitter.removeListener('propChange', wrappedFunc);
    };
  };
  _createClass(Node, [{
    key: "parent",
    get:
    /**
     * 父级节点
     */
    function get() {
      return this._parent;
    }

    /**
     * 当前节点子集
     */
  }, {
    key: "children",
    get: function get() {
      return this._children || null;
    }

    /**
     * 当前节点深度
     */
  }, {
    key: "zLevel",
    get: function get() {
      if (this._parent) {
        return this._parent.zLevel + 1;
      }
      return 0;
    }
  }, {
    key: "title",
    get: function get() {
      var t = this.getExtraProp('title');
      // TODO: 暂时走不到这个分支
      // if (!t && this.componentMeta.descriptor) {
      //   t = this.getProp(this.componentMeta.descriptor, false);
      // }
      if (t) {
        var v = t.getAsString();
        if (v) {
          return v;
        }
      }
      return this.componentMeta.title;
    }
  }, {
    key: "icon",
    get: function get() {
      return this.componentMeta.icon;
    }
  }, {
    key: "settingEntry",
    get: function get() {
      if (this._settingEntry) return this._settingEntry;
      this._settingEntry = this.document.designer.createSettingEntry([this]);
      return this._settingEntry;
    }
  }, {
    key: "isRGLContainer",
    get: function get() {
      return !!this._isRGLContainer;
    },
    set: function set(status) {
      this._isRGLContainer = status;
    }
  }, {
    key: "isRGLContainerNode",
    get: function get() {
      return !!this._isRGLContainer;
    },
    set: function set(status) {
      this._isRGLContainer = status;
    }
  }, {
    key: "isEmptyNode",
    get: function get() {
      return this.isEmpty();
    }
  }, {
    key: "slots",
    get: function get() {
      return this._slots;
    }
  }, {
    key: "conditionGroup",
    get: /* istanbul ignore next */
    function get() {
      return this._conditionGroup;
    }
  }, {
    key: "isPurged",
    get:
    /**
     * 是否已销毁
     */
    function get() {
      return this.purged;
    }
  }, {
    key: "isPurging",
    get:
    /**
     * 是否正在销毁
     */
    function get() {
      return this.purging;
    }
  }, {
    key: "isContainerNode",
    get: function get() {
      return this.isParentalNode && this.componentMeta.isContainer;
    }
  }, {
    key: "isModalNode",
    get: function get() {
      return this.componentMeta.isModal;
    }
  }, {
    key: "isRootNode",
    get: function get() {
      return this.document.rootNode === this;
    }
  }, {
    key: "isPageNode",
    get: function get() {
      return this.isRootNode && this.componentName === 'Page';
    }
  }, {
    key: "isComponentNode",
    get: function get() {
      return this.isRootNode && this.componentName === 'Component';
    }
  }, {
    key: "isSlotNode",
    get: function get() {
      return this._slotFor != null && this.componentName === 'Slot';
    }
  }, {
    key: "isParentalNode",
    get: function get() {
      return !this.isLeafNode;
    }
  }, {
    key: "isLeafNode",
    get: function get() {
      return this.componentName === 'Leaf';
    }
  }, {
    key: "slotFor",
    get: function get() {
      return this._slotFor;
    }
  }, {
    key: "isLocked",
    get: function get() {
      var _this$getExtraProp9;
      return !!((_this$getExtraProp9 = this.getExtraProp('isLocked')) !== null && _this$getExtraProp9 !== void 0 && _this$getExtraProp9.getValue());
    }
  }, {
    key: "componentMeta",
    get: function get() {
      return this.document.getComponentMeta(this.componentName);
    }
  }, {
    key: "propsData",
    get: function get() {
      if (!this.isParental() || this.componentName === 'Fragment') {
        return null;
      }
      return this.props["export"](IPublicEnumTransformStage.Serilize).props || null;
    }
  }, {
    key: "index",
    get: function get() {
      var _this$parent$children4;
      if (!this.parent) {
        return -1;
      }
      return (_this$parent$children4 = this.parent.children) === null || _this$parent$children4 === void 0 ? void 0 : _this$parent$children4.indexOf(this);
    }

    /**
     * 获取下一个兄弟节点
     */
  }, {
    key: "nextSibling",
    get: function get() {
      var _this$parent$children5;
      if (!this.parent) {
        return null;
      }
      var index = this.index;
      if (typeof index !== 'number') {
        return null;
      }
      if (index < 0) {
        return null;
      }
      return (_this$parent$children5 = this.parent.children) === null || _this$parent$children5 === void 0 ? void 0 : _this$parent$children5.get(index + 1);
    }

    /**
     * 获取上一个兄弟节点
     */
  }, {
    key: "prevSibling",
    get: function get() {
      var _this$parent$children6;
      if (!this.parent) {
        return null;
      }
      var index = this.index;
      if (typeof index !== 'number') {
        return null;
      }
      if (index < 1) {
        return null;
      }
      return (_this$parent$children6 = this.parent.children) === null || _this$parent$children6 === void 0 ? void 0 : _this$parent$children6.get(index - 1);
    }

    /**
     * 获取符合搭建协议-节点 schema 结构
     */
  }, {
    key: "schema",
    get: function get() {
      return this["export"](IPublicEnumTransformStage.Save);
    },
    set: function set(data) {
      var _this7 = this;
      runInAction(function () {
        return _this7["import"](data);
      });
    }
  }]);
  return Node;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_parent", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _applyDecoratedDescriptor(_class.prototype, "zLevel", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "zLevel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "title", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "title"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "_slots", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_conditionGroup", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "status", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      inPlaceEditing: false,
      locking: false,
      pseudo: false
    };
  }
}), _applyDecoratedDescriptor(_class.prototype, "initBuiltinProps", [action], Object.getOwnPropertyDescriptor(_class.prototype, "initBuiltinProps"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "initProps", [action], Object.getOwnPropertyDescriptor(_class.prototype, "initProps"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "upgradeProps", [action], Object.getOwnPropertyDescriptor(_class.prototype, "upgradeProps"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "componentMeta", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "componentMeta"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "propsData", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "propsData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "index", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "index"), _class.prototype)), _class));
function ensureNode(node, document) {
  var nodeInstance = node;
  if (!isNode(node)) {
    if (node.getComponentName) {
      nodeInstance = document.createNode({
        componentName: node.getComponentName()
      });
    } else {
      nodeInstance = document.createNode(node);
    }
  }
  return nodeInstance;
}
export function isRootNode(node) {
  return node && node.isRootNode;
}
export function isLowCodeComponent(node) {
  var _node$componentMeta2;
  return ((_node$componentMeta2 = node.componentMeta) === null || _node$componentMeta2 === void 0 ? void 0 : _node$componentMeta2.getMetadata().devMode) === 'lowCode';
}
function _getZLevelTop(child, zLevel) {
  var l = child.zLevel;
  if (l < zLevel || zLevel < 0) {
    return null;
  }
  if (l === zLevel) {
    return child;
  }
  var r = child;
  while (r && l-- > zLevel) {
    r = r.parent;
  }
  return r;
}

/**
 * 测试两个节点是否为包含关系
 * @param node1 测试的父节点
 * @param node2 测试的被包含节点
 * @returns 是否包含
 */
export { _getZLevelTop as getZLevelTop };
function _contains(node1, node2) {
  if (node1 === node2) {
    return true;
  }
  if (!node1.isParentalNode || !node2.parent) {
    return false;
  }
  var p = _getZLevelTop(node2, node1.zLevel);
  if (!p) {
    return false;
  }
  return node1 === p;
}

// 16 node1 contains node2
// 8  node1 contained_by node2
// 2  node1 before or after node2
// 0  node1 same as node2
export { _contains as contains };
export var PositionNO = /*#__PURE__*/function (PositionNO) {
  PositionNO[PositionNO["Contains"] = 16] = "Contains";
  PositionNO[PositionNO["ContainedBy"] = 8] = "ContainedBy";
  PositionNO[PositionNO["BeforeOrAfter"] = 2] = "BeforeOrAfter";
  PositionNO[PositionNO["TheSame"] = 0] = "TheSame";
  return PositionNO;
}({});
function _comparePosition(node1, node2) {
  if (node1 === node2) {
    return PositionNO.TheSame;
  }
  var l1 = node1.zLevel;
  var l2 = node2.zLevel;
  if (l1 === l2) {
    return PositionNO.BeforeOrAfter;
  }
  var p;
  if (l1 < l2) {
    p = _getZLevelTop(node2, l1);
    if (p && p === node1) {
      return PositionNO.Contains;
    }
    return PositionNO.BeforeOrAfter;
  }
  p = _getZLevelTop(node1, l2);
  if (p && p === node2) {
    return PositionNO.ContainedBy;
  }
  return PositionNO.BeforeOrAfter;
}
export { _comparePosition as comparePosition };
export function insertChild(container, thing, at, copy) {
  var node;
  var nodeSchema;
  if (isNode(thing) && (copy || thing.isSlot())) {
    var _container$document;
    nodeSchema = thing["export"](IPublicEnumTransformStage.Clone);
    node = (_container$document = container.document) === null || _container$document === void 0 ? void 0 : _container$document.createNode(nodeSchema);
  } else if (isNode(thing)) {
    node = thing;
  } else if (isNodeSchema(thing)) {
    var _container$document2;
    node = (_container$document2 = container.document) === null || _container$document2 === void 0 ? void 0 : _container$document2.createNode(thing);
  }
  if (isNode(node)) {
    var _container$children;
    (_container$children = container.children) === null || _container$children === void 0 ? void 0 : _container$children.insert(node, at);
    return node;
  }
  return null;
}
export function insertChildren(container, nodes, at, copy) {
  var index = at;
  var node;
  var results = [];
  // eslint-disable-next-line no-cond-assign
  while (node = nodes.pop()) {
    node = insertChild(container, node, index, copy);
    results.push(node);
    index = node.index;
  }
  return results;
}