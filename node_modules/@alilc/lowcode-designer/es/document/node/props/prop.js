import _extends from "@babel/runtime/helpers/extends";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _Symbol$iterator;
var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
import { untracked, computed, obx, engineConfig, action, makeObservable, mobx, runInAction } from '@alilc/lowcode-editor-core';
import { GlobalEvent, IPublicEnumTransformStage } from '@alilc/lowcode-types';
import { uniqueId, isPlainObject, hasOwnProperty, compatStage, isJSExpression, isJSSlot, isNodeSchema } from '@alilc/lowcode-utils';
import { valueToSource } from './value-to-source';
// import { TransformStage } from '../transform-stage';

var mobxSet = mobx.set,
  isObservableArray = mobx.isObservableArray;
export var UNSET = Symbol["for"]('unset');
// eslint-disable-next-line no-redeclare

export var Prop = (_dec = obx.ref, _dec2 = obx.shallow, _dec3 = obx.shallow, (_class = (_Symbol$iterator = Symbol.iterator, /*#__PURE__*/function () {
  function Prop(parent, value, key, spread, options) {
    var _this = this;
    if (value === void 0) {
      value = UNSET;
    }
    if (spread === void 0) {
      spread = false;
    }
    if (options === void 0) {
      options = {};
    }
    this.parent = parent;
    this.isProp = true;
    this.owner = void 0;
    /**
     * 键值
     */
    _initializerDefineProperty(this, "key", _descriptor, this);
    /**
     * 扩展值
     */
    _initializerDefineProperty(this, "spread", _descriptor2, this);
    this.props = void 0;
    this.options = void 0;
    this.id = uniqueId('prop$');
    _initializerDefineProperty(this, "_type", _descriptor3, this);
    _initializerDefineProperty(this, "_value", _descriptor4, this);
    this._code = null;
    this._slotNode = void 0;
    _initializerDefineProperty(this, "_items", _descriptor5, this);
    /**
     * 作为一层缓存机制，主要是复用部分已存在的 Prop，保持响应式关系，比如：
     * 当前 Prop#_value 值为 { a: 1 }，当调用 setValue({ a: 2 }) 时，所有原来的子 Prop 均被销毁，
     * 导致假如外部有 mobx reaction（常见于 observer），此时响应式链路会被打断，
     * 因为 reaction 监听的是原 Prop(a) 的 _value，而不是新 Prop(a) 的 _value。
     */
    _initializerDefineProperty(this, "_maps", _descriptor6, this);
    this.purged = false;
    this.emitChange = function (_ref) {
      var _this$owner$document, _this$owner, _this$owner$emitPropC;
      var oldValue = _ref.oldValue;
      var editor = (_this$owner$document = _this.owner.document) === null || _this$owner$document === void 0 ? void 0 : _this$owner$document.designer.editor;
      var propsInfo = {
        key: _this.key,
        prop: _this,
        oldValue: oldValue,
        newValue: _this.type === 'unset' ? undefined : _this._value
      };
      editor === null || editor === void 0 ? void 0 : editor.eventBus.emit(GlobalEvent.Node.Prop.InnerChange, _extends({
        node: _this.owner
      }, propsInfo));
      (_this$owner = _this.owner) === null || _this$owner === void 0 ? void 0 : (_this$owner$emitPropC = _this$owner.emitPropChange) === null || _this$owner$emitPropC === void 0 ? void 0 : _this$owner$emitPropC.call(_this$owner, propsInfo);
    };
    makeObservable(this);
    this.owner = parent.owner;
    this.props = parent.props;
    this.key = key;
    this.spread = spread;
    this.options = options;
    if (value !== UNSET) {
      this.setValue(value);
    }
    this.setupItems();
  }

  // TODO: 先用调用方式触发子 prop 的初始化，后续须重构
  var _proto = Prop.prototype;
  _proto.setupItems = function setupItems() {
    return this.items;
  }

  /**
   * @see SettingTarget
   */;
  _proto.getPropValue = function getPropValue(propName) {
    return this.get(propName).getValue();
  }

  /**
   * @see SettingTarget
   */;
  _proto.setPropValue = function setPropValue(propName, value) {
    this.set(propName, value);
  }

  /**
   * @see SettingTarget
   */;
  _proto.clearPropValue = function clearPropValue(propName) {
    var _this$get;
    (_this$get = this.get(propName, false)) === null || _this$get === void 0 ? void 0 : _this$get.unset();
  };
  _proto["export"] = function _export(stage) {
    if (stage === void 0) {
      stage = IPublicEnumTransformStage.Save;
    }
    stage = compatStage(stage);
    var type = this._type;
    if (stage === IPublicEnumTransformStage.Render && this.key === '___condition___') {
      // 在设计器里，所有组件默认需要展示，除非开启了 enableCondition 配置
      if ((engineConfig === null || engineConfig === void 0 ? void 0 : engineConfig.get('enableCondition')) !== true) {
        return true;
      }
      return this._value;
    }
    if (type === 'unset') {
      return undefined;
    }
    if (type === 'literal' || type === 'expression') {
      return this._value;
    }
    if (type === 'slot') {
      var _this$_slotNode;
      var schema = ((_this$_slotNode = this._slotNode) === null || _this$_slotNode === void 0 ? void 0 : _this$_slotNode["export"](stage)) || {};
      if (stage === IPublicEnumTransformStage.Render) {
        return {
          type: 'JSSlot',
          params: schema.params,
          value: schema,
          id: schema.id
        };
      }
      return {
        type: 'JSSlot',
        params: schema.params,
        value: schema.children,
        title: schema.title,
        name: schema.name,
        id: schema.id
      };
    }
    if (type === 'map') {
      if (!this._items) {
        return this._value;
      }
      var maps;
      this.items.forEach(function (prop, key) {
        if (!prop.isUnset()) {
          var v = prop["export"](stage);
          if (v != null) {
            maps = maps || {};
            maps[prop.key || key] = v;
          }
        }
      });
      return maps;
    }
    if (type === 'list') {
      if (!this._items) {
        return this._value;
      }
      return this.items.map(function (prop) {
        return prop === null || prop === void 0 ? void 0 : prop["export"](stage);
      });
    }
  };
  _proto.getAsString = function getAsString() {
    if (this.type === 'literal') {
      return this._value ? String(this._value) : '';
    }
    return '';
  }

  /**
   * set value, val should be JSON Object
   */;
  _proto.setValue = function setValue(val) {
    if (val === this._value) return;
    var oldValue = this._value;
    this._value = val;
    this._code = null;
    var t = typeof val;
    if (val == null) {
      // this._value = undefined;
      this._type = 'literal';
    } else if (t === 'string' || t === 'number' || t === 'boolean') {
      this._type = 'literal';
    } else if (Array.isArray(val)) {
      this._type = 'list';
    } else if (isPlainObject(val)) {
      if (isJSSlot(val)) {
        this.setAsSlot(val);
      } else if (isJSExpression(val)) {
        this._type = 'expression';
      } else {
        this._type = 'map';
      }
    } else /* istanbul ignore next */{
        this._type = 'expression';
        this._value = {
          type: 'JSExpression',
          value: valueToSource(val)
        };
      }
    this.dispose();
    // setValue 的时候，如果不重新建立 items，items 的 setValue 没有触发，会导致子项的响应式逻辑不能被触发
    this.setupItems();
    if (oldValue !== this._value) {
      this.emitChange({
        oldValue: oldValue
      });
    }
  };
  _proto.getValue = function getValue() {
    return this["export"](IPublicEnumTransformStage.Serilize);
  };
  _proto.dispose = function dispose() {
    var _this2 = this;
    var items = untracked(function () {
      return _this2._items;
    });
    if (items) {
      items.forEach(function (prop) {
        return prop.purge();
      });
    }
    this._items = null;
    if (this._type !== 'slot' && this._slotNode) {
      this._slotNode.remove();
      this._slotNode = undefined;
    }
  };
  _proto.setAsSlot = function setAsSlot(data) {
    var _data$value;
    this._type = 'slot';
    var slotSchema;
    // 当 data.value 的结构为 { componentName: 'Slot' } 时，复用部分 slotSchema 数据
    if (isPlainObject(data.value) && isNodeSchema(data.value) && ((_data$value = data.value) === null || _data$value === void 0 ? void 0 : _data$value.componentName) === 'Slot') {
      var _value$props, _value$props2, _value$props3;
      var _value = data.value;
      slotSchema = {
        componentName: 'Slot',
        title: _value.title || ((_value$props = _value.props) === null || _value$props === void 0 ? void 0 : _value$props.slotTitle),
        id: _value.id,
        name: _value.name || ((_value$props2 = _value.props) === null || _value$props2 === void 0 ? void 0 : _value$props2.slotName),
        params: _value.params || ((_value$props3 = _value.props) === null || _value$props3 === void 0 ? void 0 : _value$props3.slotParams),
        children: _value.children
      };
    } else {
      slotSchema = {
        componentName: 'Slot',
        title: data.title,
        id: data.id,
        name: data.name,
        params: data.params,
        children: data.value
      };
    }
    if (this._slotNode) {
      this._slotNode["import"](slotSchema);
    } else {
      var _owner$document;
      var owner = this.props.owner;
      this._slotNode = (_owner$document = owner.document) === null || _owner$document === void 0 ? void 0 : _owner$document.createNode(slotSchema);
      if (this._slotNode) {
        owner.addSlot(this._slotNode);
        this._slotNode.internalSetSlotFor(this);
      }
    }
  }

  /**
   * 取消设置值
   */;
  _proto.unset = function unset() {
    if (this._type !== 'unset') {
      this._type = 'unset';
      this.emitChange({
        oldValue: this._value
      });
    }
  }

  /**
   * 是否未设置值
   */;
  _proto.isUnset = function isUnset() {
    return this._type === 'unset';
  };
  _proto.isVirtual = function isVirtual() {
    return typeof this.key === 'string' && this.key.charAt(0) === '!';
  }

  /**
   * @returns  0: the same 1: maybe & like 2: not the same
   */;
  _proto.compare = function compare(other) {
    if (!other || other.isUnset()) {
      return this.isUnset() ? 0 : 2;
    }
    if (other.type !== this.type) {
      return 2;
    }
    // list
    if (this.type === 'list') {
      return this.size === other.size ? 1 : 2;
    }
    if (this.type === 'map') {
      return 1;
    }

    // 'literal' | 'map' | 'expression' | 'slot'
    return this.code === other.code ? 0 : 2;
  }

  /**
   * 获取某个属性
   * @param createIfNone 当没有的时候，是否创建一个
   */;
  _proto.get = function get(path, createIfNone) {
    if (createIfNone === void 0) {
      createIfNone = true;
    }
    var type = this._type;
    if (type !== 'map' && type !== 'list' && type !== 'unset' && !createIfNone) {
      return null;
    }
    var maps = type === 'map' ? this.maps : null;
    var items = type === 'list' ? this.items : null;
    var entry = path;
    var nest = '';
    if (typeof path !== 'number') {
      var i = path.indexOf('.');
      if (i > 0) {
        nest = path.slice(i + 1);
        if (nest) {
          entry = path.slice(0, i);
        }
      }
    }
    var prop;
    if (type === 'list') {
      if (isValidArrayIndex(entry, this.size)) {
        prop = items[entry];
      }
    } else if (type === 'map') {
      prop = maps === null || maps === void 0 ? void 0 : maps.get(entry);
    }
    if (prop) {
      return nest ? prop.get(nest, createIfNone) : prop;
    }
    if (createIfNone) {
      prop = new Prop(this, UNSET, entry);
      this.set(entry, prop, true);
      if (nest) {
        return prop.get(nest, true);
      }
      return prop;
    }
    return null;
  }

  /**
   * 从父级移除本身
   */;
  _proto.remove = function remove() {
    this.parent["delete"](this);
    this.unset();
  }

  /**
   * 删除项
   */;
  _proto["delete"] = function _delete(prop) {
    /* istanbul ignore else */
    if (this._items) {
      var i = this._items.indexOf(prop);
      if (i > -1) {
        this._items.splice(i, 1);
        prop.purge();
      }
      if (this._maps && prop.key) {
        this._maps["delete"](String(prop.key));
      }
    }
  }

  /**
   * 删除 key
   */;
  _proto.deleteKey = function deleteKey(key) {
    /* istanbul ignore else */
    if (this.maps) {
      var _prop = this.maps.get(key);
      if (_prop) {
        this["delete"](_prop);
      }
    }
  }

  /**
   * 添加值到列表
   *
   * @param force 强制
   */;
  _proto.add = function add(value, force) {
    if (force === void 0) {
      force = false;
    }
    var type = this._type;
    if (type !== 'list' && type !== 'unset' && !force) {
      return null;
    }
    if (type === 'unset' || force && type !== 'list') {
      this.setValue([]);
    }
    var prop = new Prop(this, value);
    this._items = this._items || [];
    this._items.push(prop);
    return prop;
  }

  /**
   * 设置值到字典
   *
   * @param force 强制
   */;
  _proto.set = function set(key, value, force) {
    if (force === void 0) {
      force = false;
    }
    var type = this._type;
    if (type !== 'map' && type !== 'list' && type !== 'unset' && !force) {
      return null;
    }
    if (type === 'unset' || force && type !== 'map') {
      if (isValidArrayIndex(key)) {
        if (type !== 'list') {
          this.setValue([]);
        }
      } else {
        this.setValue({});
      }
    }
    var prop = isProp(value) ? value : new Prop(this, value, key);
    var items = this._items || [];
    if (this.type === 'list') {
      if (!isValidArrayIndex(key)) {
        return null;
      }
      if (isObservableArray(items)) {
        mobxSet(items, key, prop);
      } else {
        items[key] = prop;
      }
      this._items = items;
    } else if (this.type === 'map') {
      var maps = this._maps || new Map();
      var orig = maps === null || maps === void 0 ? void 0 : maps.get(key);
      if (orig) {
        // replace
        var i = items.indexOf(orig);
        if (i > -1) {
          items.splice(i, 1, prop)[0].purge();
        }
        maps === null || maps === void 0 ? void 0 : maps.set(key, prop);
      } else {
        // push
        items.push(prop);
        this._items = items;
        maps === null || maps === void 0 ? void 0 : maps.set(key, prop);
      }
      this._maps = maps;
    } /* istanbul ignore next */else {
      return null;
    }
    return prop;
  }

  /**
   * 是否存在 key
   */;
  _proto.has = function has(key) {
    if (this._type !== 'map') {
      return false;
    }
    if (this._maps) {
      return this._maps.has(key);
    }
    return hasOwnProperty(this._value, key);
  }

  /**
   * 回收销毁
   */;
  _proto.purge = function purge() {
    if (this.purged) {
      return;
    }
    this.purged = true;
    if (this._items) {
      this._items.forEach(function (item) {
        return item.purge();
      });
    }
    this._items = null;
    this._maps = null;
    if (this._slotNode && this._slotNode.slotFor === this) {
      this._slotNode.remove();
      this._slotNode = undefined;
    }
  }

  /**
   * 迭代器
   */;
  _proto[_Symbol$iterator] = function () {
    var index = 0;
    var items = this.items;
    var length = (items === null || items === void 0 ? void 0 : items.length) || 0;
    return {
      next: function next() {
        if (index < length) {
          return {
            value: items[index++],
            done: false
          };
        }
        return {
          value: undefined,
          done: true
        };
      }
    };
  }

  /**
   * 遍历
   */;
  _proto.forEach = function forEach(fn) {
    var items = this.items;
    if (!items) {
      return;
    }
    var isMap = this._type === 'map';
    items.forEach(function (item, index) {
      return isMap ? fn(item, item.key) : fn(item, index);
    });
  }

  /**
   * 遍历
   */;
  _proto.map = function map(fn) {
    var items = this.items;
    if (!items) {
      return null;
    }
    var isMap = this._type === 'map';
    return items.map(function (item, index) {
      return isMap ? fn(item, item.key) : fn(item, index);
    });
  };
  _proto.getProps = function getProps() {
    return this.props;
  };
  _proto.getNode = function getNode() {
    return this.owner;
  };
  _createClass(Prop, [{
    key: "type",
    get:
    /**
     * 属性类型
     */
    function get() {
      return this._type;
    }
  }, {
    key: "value",
    get:
    /**
     * 属性值
     */
    function get() {
      return this["export"](IPublicEnumTransformStage.Serilize);
    }
  }, {
    key: "code",
    get:
    /**
     * 获得表达式值
     */
    function get() {
      if (isJSExpression(this.value)) {
        return this.value.value;
      }
      // todo: JSFunction ...
      if (this.type === 'slot') {
        return JSON.stringify(this._slotNode["export"](IPublicEnumTransformStage.Save));
      }
      return this._code != null ? this._code : JSON.stringify(this.value);
    }

    /**
     * 设置表达式值
     */,
    set: function set(code) {
      if (isJSExpression(this._value)) {
        this.setValue(_extends({}, this._value, {
          value: code
        }));
        this._code = code;
        return;
      }
      try {
        var v = JSON.parse(code);
        this.setValue(v);
        this._code = code;
        return;
      } catch (e) {
        // ignore
      }
      this.setValue({
        type: 'JSExpression',
        value: code,
        mock: this._value
      });
      this._code = code;
    }
  }, {
    key: "slotNode",
    get: function get() {
      return this._slotNode || null;
    }
  }, {
    key: "items",
    get:
    /**
     * 构造 items 属性，同时构造 maps 属性
     */
    function get() {
      var _this3 = this;
      if (this._items) return this._items;
      return runInAction(function () {
        var items = null;
        if (_this3._type === 'list') {
          var maps = new Map();
          var data = _this3._value;
          data.forEach(function (item, idx) {
            var _this3$_maps;
            items = items || [];
            var prop;
            if ((_this3$_maps = _this3._maps) !== null && _this3$_maps !== void 0 && _this3$_maps.has(idx.toString())) {
              prop = _this3._maps.get(idx.toString());
              prop.setValue(item);
            } else {
              prop = new Prop(_this3, item, idx);
            }
            maps.set(idx.toString(), prop);
            items.push(prop);
          });
          _this3._maps = maps;
        } else if (_this3._type === 'map') {
          var _data = _this3._value;
          var _maps = new Map();
          var keys = Object.keys(_data);
          for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
            var _this3$_maps2;
            var _key = _keys[_i];
            var _prop2 = void 0;
            if ((_this3$_maps2 = _this3._maps) !== null && _this3$_maps2 !== void 0 && _this3$_maps2.has(_key)) {
              _prop2 = _this3._maps.get(_key);
              _prop2.setValue(_data[_key]);
            } else {
              _prop2 = new Prop(_this3, _data[_key], _key);
            }
            items = items || [];
            items.push(_prop2);
            _maps.set(_key, _prop2);
          }
          _this3._maps = _maps;
        } else {
          items = null;
          _this3._maps = null;
        }
        _this3._items = items;
        return _this3._items;
      });
    }
  }, {
    key: "maps",
    get: function get() {
      if (!this.items) {
        return null;
      }
      return this._maps;
    }
  }, {
    key: "path",
    get: function get() {
      return (this.parent.path || []).concat(this.key);
    }

    /**
     * 元素个数
     */
  }, {
    key: "size",
    get: function get() {
      var _this$items;
      return ((_this$items = this.items) === null || _this$items === void 0 ? void 0 : _this$items.length) || 0;
    }
  }]);
  return Prop;
}()), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "key", [obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "spread", [obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_type", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'unset';
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "_value", [obx], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return UNSET;
  }
}), _applyDecoratedDescriptor(_class.prototype, "value", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "value"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "code", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "code"), _class.prototype), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "_items", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "_maps", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _applyDecoratedDescriptor(_class.prototype, "maps", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "maps"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setupItems", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setupItems"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "getPropValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "getPropValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPropValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setPropValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "clearPropValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "clearPropValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setValue", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dispose", [action], Object.getOwnPropertyDescriptor(_class.prototype, "dispose"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setAsSlot", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setAsSlot"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unset", [action], Object.getOwnPropertyDescriptor(_class.prototype, "unset"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "isUnset", [action], Object.getOwnPropertyDescriptor(_class.prototype, "isUnset"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "get", [action], Object.getOwnPropertyDescriptor(_class.prototype, "get"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "remove", [action], Object.getOwnPropertyDescriptor(_class.prototype, "remove"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "delete", [action], Object.getOwnPropertyDescriptor(_class.prototype, "delete"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteKey", [action], Object.getOwnPropertyDescriptor(_class.prototype, "deleteKey"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "add", [action], Object.getOwnPropertyDescriptor(_class.prototype, "add"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "set", [action], Object.getOwnPropertyDescriptor(_class.prototype, "set"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "purge", [action], Object.getOwnPropertyDescriptor(_class.prototype, "purge"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "forEach", [action], Object.getOwnPropertyDescriptor(_class.prototype, "forEach"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "map", [action], Object.getOwnPropertyDescriptor(_class.prototype, "map"), _class.prototype)), _class));
export function isProp(obj) {
  return obj && obj.isProp;
}
export function isValidArrayIndex(key, limit) {
  if (limit === void 0) {
    limit = -1;
  }
  var n = parseFloat(String(key));
  return n >= 0 && Math.floor(n) === n && isFinite(n) && (limit < 0 || n < limit);
}