import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
var _excluded = ["componentName", "npm"];
var _class;
import { deprecate, isRegExp, isTitleConfig, isNode } from '@alilc/lowcode-utils';
import { computed, createModuleEventBus } from '@alilc/lowcode-editor-core';
import { Node } from './document';
import { IconContainer, IconPage, IconComponent } from './icons';
export function ensureAList(list) {
  if (!list) {
    return null;
  }
  if (!Array.isArray(list)) {
    if (typeof list !== 'string') {
      return null;
    }
    list = list.split(/ *[ ,|] */).filter(Boolean);
  }
  if (list.length < 1) {
    return null;
  }
  return list;
}
export function buildFilter(rule) {
  if (!rule) {
    return null;
  }
  if (typeof rule === 'function') {
    return rule;
  }
  if (isRegExp(rule)) {
    return function (testNode) {
      return rule.test(testNode.componentName);
    };
  }
  var list = ensureAList(rule);
  if (!list) {
    return null;
  }
  return function (testNode) {
    return list.includes(testNode.componentName);
  };
}
export var ComponentMeta = (_class = /*#__PURE__*/function () {
  function ComponentMeta(designer, metadata) {
    this.designer = designer;
    this.isComponentMeta = true;
    this._npm = void 0;
    this.emitter = createModuleEventBus('ComponentMeta');
    this._componentName = void 0;
    this._isContainer = void 0;
    this._isModal = void 0;
    this._descriptor = void 0;
    this._rootSelector = void 0;
    this._transformedMetadata = void 0;
    this._liveTextEditing = void 0;
    this._isTopFixed = void 0;
    this.parentWhitelist = void 0;
    this.childWhitelist = void 0;
    this._title = void 0;
    this._isMinimalRenderUnit = void 0;
    this._acceptable = void 0;
    /**
     * @legacy compatiable for vision
     * @deprecated
     */
    this.prototype = void 0;
    this.parseMetadata(metadata);
  }
  var _proto = ComponentMeta.prototype;
  _proto.setNpm = function setNpm(info) {
    if (!this._npm) {
      this._npm = info;
    }
  };
  _proto.parseMetadata = function parseMetadata(metadata) {
    var componentName = metadata.componentName,
      npm = metadata.npm,
      others = _objectWithoutPropertiesLoose(metadata, _excluded);
    var _metadata = metadata;
    if (metadata.prototype) {
      this.prototype = metadata.prototype;
    }
    if (!npm && !Object.keys(others).length) {
      // 没有注册的组件，只能删除，不支持复制、移动等操作
      _metadata = {
        componentName: componentName,
        configure: {
          component: {
            disableBehaviors: ['copy', 'move', 'lock', 'unlock']
          },
          advanced: {
            callbacks: {
              onMoveHook: function onMoveHook() {
                return false;
              }
            }
          }
        }
      };
    }
    this._npm = npm || this._npm;
    this._componentName = componentName;

    // 额外转换逻辑
    this._transformedMetadata = this.transformMetadata(_metadata);
    var title = this._transformedMetadata.title;
    if (title) {
      this._title = typeof title === 'string' ? {
        type: 'i18n',
        'en-US': this.componentName,
        'zh-CN': title
      } : title;
    }
    var liveTextEditing = this.advanced.liveTextEditing || [];
    function collectLiveTextEditing(items) {
      items.forEach(function (config) {
        if (config !== null && config !== void 0 && config.items) {
          collectLiveTextEditing(config.items);
        } else {
          var _config$extraProps;
          var liveConfig = config.liveTextEditing || ((_config$extraProps = config.extraProps) === null || _config$extraProps === void 0 ? void 0 : _config$extraProps.liveTextEditing);
          if (liveConfig) {
            liveTextEditing.push(_extends({
              propTarget: String(config.name)
            }, liveConfig));
          }
        }
      });
    }
    collectLiveTextEditing(this.configure);
    this._liveTextEditing = liveTextEditing.length > 0 ? liveTextEditing : undefined;
    var isTopFixed = this.advanced.isTopFixed;
    if (isTopFixed) {
      this._isTopFixed = isTopFixed;
    }
    var _this$_transformedMet = this._transformedMetadata.configure,
      configure = _this$_transformedMet === void 0 ? {} : _this$_transformedMet;
    this._acceptable = false;
    var component = configure.component;
    if (component) {
      this._isContainer = !!component.isContainer;
      this._isModal = !!component.isModal;
      this._descriptor = component.descriptor;
      this._rootSelector = component.rootSelector;
      this._isMinimalRenderUnit = component.isMinimalRenderUnit;
      if (component.nestingRule) {
        var _component$nestingRul = component.nestingRule,
          parentWhitelist = _component$nestingRul.parentWhitelist,
          childWhitelist = _component$nestingRul.childWhitelist;
        this.parentWhitelist = buildFilter(parentWhitelist);
        this.childWhitelist = buildFilter(childWhitelist);
      }
    } else {
      this._isContainer = false;
      this._isModal = false;
    }
    this.emitter.emit('metadata_change');
  };
  _proto.refreshMetadata = function refreshMetadata() {
    this.parseMetadata(this.getMetadata());
  };
  _proto.transformMetadata = function transformMetadata(metadta) {
    var registeredTransducers = this.designer.componentActions.getRegisteredMetadataTransducers();
    var result = registeredTransducers.reduce(function (prevMetadata, current) {
      return current(prevMetadata);
    }, preprocessMetadata(metadta));
    if (!result.configure) {
      result.configure = {};
    }
    if (result.experimental && !result.configure.advanced) {
      deprecate(result.experimental, '.experimental', '.configure.advanced');
      result.configure.advanced = result.experimental;
    }
    return result;
  };
  _proto.isRootComponent = function isRootComponent(includeBlock) {
    if (includeBlock === void 0) {
      includeBlock = true;
    }
    return this.componentName === 'Page' || this.componentName === 'Component' || includeBlock && this.componentName === 'Block';
  };
  _proto.setMetadata = function setMetadata(metadata) {
    this.parseMetadata(metadata);
  };
  _proto.getMetadata = function getMetadata() {
    return this._transformedMetadata;
  };
  _proto.checkNestingUp = function checkNestingUp(my, parent) {
    // 检查父子关系，直接约束型，在画布中拖拽直接掠过目标容器
    if (this.parentWhitelist) {
      return this.parentWhitelist(parent.internalToShellNode(), isNode(my) ? my.internalToShellNode() : my);
    }
    return true;
  };
  _proto.checkNestingDown = function checkNestingDown(my, target) {
    var _this = this;
    // 检查父子关系，直接约束型，在画布中拖拽直接掠过目标容器
    if (this.childWhitelist) {
      var _target = !Array.isArray(target) ? [target] : target;
      return _target.every(function (item) {
        var _item = !isNode(item) ? new Node(my.document, item) : item;
        return _this.childWhitelist && _this.childWhitelist(_item.internalToShellNode(), my.internalToShellNode());
      });
    }
    return true;
  };
  _proto.onMetadataChange = function onMetadataChange(fn) {
    var _this2 = this;
    this.emitter.on('metadata_change', fn);
    return function () {
      _this2.emitter.removeListener('metadata_change', fn);
    };
  };
  _createClass(ComponentMeta, [{
    key: "npm",
    get: function get() {
      return this._npm;
    },
    set: function set(_npm) {
      this.setNpm(_npm);
    }
  }, {
    key: "componentName",
    get: function get() {
      return this._componentName;
    }
  }, {
    key: "isContainer",
    get: function get() {
      return this._isContainer || this.isRootComponent();
    }
  }, {
    key: "isMinimalRenderUnit",
    get: function get() {
      return this._isMinimalRenderUnit || false;
    }
  }, {
    key: "isModal",
    get: function get() {
      return this._isModal;
    }
  }, {
    key: "descriptor",
    get: function get() {
      return this._descriptor;
    }
  }, {
    key: "rootSelector",
    get: function get() {
      return this._rootSelector;
    }
  }, {
    key: "configure",
    get: function get() {
      var _this$_transformedMet2;
      var config = (_this$_transformedMet2 = this._transformedMetadata) === null || _this$_transformedMet2 === void 0 ? void 0 : _this$_transformedMet2.configure;
      return (config === null || config === void 0 ? void 0 : config.combined) || (config === null || config === void 0 ? void 0 : config.props) || [];
    }
  }, {
    key: "liveTextEditing",
    get: function get() {
      return this._liveTextEditing;
    }
  }, {
    key: "isTopFixed",
    get: function get() {
      return !!this._isTopFixed;
    }
  }, {
    key: "title",
    get: function get() {
      // string | i18nData | ReactElement
      // TitleConfig title.label
      if (isTitleConfig(this._title)) {
        var _this$_title;
        return ((_this$_title = this._title) === null || _this$_title === void 0 ? void 0 : _this$_title.label) || this.componentName;
      }
      return this._title || this.componentName;
    }
  }, {
    key: "icon",
    get: function get() {
      var _this$_transformedMet3;
      // give Slot default icon
      // if _title is TitleConfig  get _title.icon
      return ((_this$_transformedMet3 = this._transformedMetadata) === null || _this$_transformedMet3 === void 0 ? void 0 : _this$_transformedMet3.icon) || (
      // eslint-disable-next-line
      this.componentName === 'Page' ? IconPage : this.isContainer ? IconContainer : IconComponent);
    }
  }, {
    key: "acceptable",
    get: function get() {
      return this._acceptable;
    }
  }, {
    key: "advanced",
    get: function get() {
      return this.getMetadata().configure.advanced || {};
    }
  }, {
    key: "availableActions",
    get: function get() {
      var _this$_transformedMet4;
      // eslint-disable-next-line prefer-const
      var _ref = ((_this$_transformedMet4 = this._transformedMetadata) === null || _this$_transformedMet4 === void 0 ? void 0 : _this$_transformedMet4.configure.component) || {},
        disableBehaviors = _ref.disableBehaviors,
        actions = _ref.actions;
      var disabled = ensureAList(disableBehaviors) || (this.isRootComponent(false) ? ['copy', 'remove', 'lock', 'unlock'] : null);
      actions = this.designer.componentActions.actions.concat(this.designer.getGlobalComponentActions() || [], actions || []);
      if (disabled) {
        if (disabled.includes('*')) {
          return actions.filter(function (action) {
            return action.condition === 'always';
          });
        }
        return actions.filter(function (action) {
          return disabled.indexOf(action.name) < 0;
        });
      }
      return actions;
    }
  }]);
  return ComponentMeta;
}(), (_applyDecoratedDescriptor(_class.prototype, "icon", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "icon"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "availableActions", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "availableActions"), _class.prototype)), _class);
export function isComponentMeta(obj) {
  return obj && obj.isComponentMeta;
}
function preprocessMetadata(metadata) {
  if (metadata.configure) {
    if (Array.isArray(metadata.configure)) {
      return _extends({}, metadata, {
        configure: {
          props: metadata.configure
        }
      });
    }
    return metadata;
  }
  return _extends({}, metadata, {
    configure: {}
  });
}