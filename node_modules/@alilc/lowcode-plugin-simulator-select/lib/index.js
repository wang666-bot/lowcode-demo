"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = exports.SimulatorResizePane = void 0;
var _numberPicker = _interopRequireDefault(require("@alifd/next/lib/number-picker"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _icon = _interopRequireDefault(require("@alifd/next/lib/icon"));
var _react = _interopRequireDefault(require("react"));
require("./index.scss");
var devices = [{
  key: 'default'
}, {
  key: 'tablet'
}, {
  key: 'phone'
}];
var CustomIcon = _icon["default"].createFromIconfontCN({
  scriptUrl: 'https://at.alicdn.com/t/font_2896595_33xhsbg9ux5.js'
});
var SimulatorResizePane = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(SimulatorResizePane, _React$Component);
  function SimulatorResizePane() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      active: 'default',
      currentWidth: null
    };
    _this.change = function (device) {
      var _document$querySelect;
      var project = _this.props.pluginContext.project;
      var simulator = project.simulatorHost;
      // 切换画布
      simulator === null || simulator === void 0 ? void 0 : simulator.set('device', device);
      if ((_document$querySelect = document.querySelector('.lc-simulator-canvas')) !== null && _document$querySelect !== void 0 && _document$querySelect.style) {
        document.querySelector('.lc-simulator-canvas').style.width = null;
      }
      setTimeout(function () {
        var _document$querySelect2;
        var currentWidth = ((_document$querySelect2 = document.querySelector('.lc-simulator-canvas')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.clientWidth) || _this.state.currentWidth || 0;
        _this.setState({
          active: device,
          currentWidth: currentWidth
        });
      }, 0);
    };
    return _this;
  }
  var _proto = SimulatorResizePane.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this,
      _project$onSimulatorH;
    var project = this.props.pluginContext.project;
    // @ts-ignore
    var onSimulatorRendererReady = (project.onSimulatorRendererReady || project.onRendererReady).bind(project);
    onSimulatorRendererReady(function () {
      var _document$querySelect3;
      var currentWidth = ((_document$querySelect3 = document.querySelector('.lc-simulator-canvas')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.clientWidth) || _this2.state.currentWidth || 0;
      _this2.setState({
        currentWidth: currentWidth
      });
    });
    (_project$onSimulatorH = project.onSimulatorHostReady) === null || _project$onSimulatorH === void 0 ? void 0 : _project$onSimulatorH.call(project, function (simulator) {
      if (simulator.get('device')) {
        _this2.setState({
          active: simulator.get('device')
        });
      }
    });
  };
  _proto.renderItemSVG = function renderItemSVG(device) {
    switch (device) {
      case 'default':
        return /*#__PURE__*/_react["default"].createElement(CustomIcon, {
          size: "large",
          type: "iconic_PC_Select"
        });
      case 'tablet':
        return /*#__PURE__*/_react["default"].createElement(CustomIcon, {
          size: "large",
          type: "iconic_Tablet_Select"
        });
      case 'phone':
        return /*#__PURE__*/_react["default"].createElement(CustomIcon, {
          size: "large",
          type: "iconic_smartphone"
        });
      default:
        return /*#__PURE__*/_react["default"].createElement(CustomIcon, {
          size: "large",
          type: "iconic_PC_Select"
        });
    }
  };
  _proto.render = function render() {
    var _this3 = this;
    var currentWidth = this.state.currentWidth || 0;
    var project = this.props.pluginContext.project;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "lp-simulator-pane"
    }, devices.map(function (item, index) {
      return /*#__PURE__*/_react["default"].createElement("span", {
        key: item.key,
        className: "lp-simulator-pane-item " + (_this3.state.active === item.key ? 'active' : ''),
        onClick: _this3.change.bind(_this3, item.key)
      }, _this3.renderItemSVG(item.key));
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: "lp-simulator-width-setter"
    }, /*#__PURE__*/_react["default"].createElement(_numberPicker["default"], {
      className: "lp-simulator-width-input",
      addonTextAfter: "px",
      value: currentWidth,
      placeholder: "\u8BF7\u8F93\u5165",
      onChange: function onChange(value) {
        _this3.setState({
          currentWidth: value
        });
      },
      onPressEnter: function onPressEnter(event) {
        var _event$target;
        var value = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;
        var simulator = project.simulatorHost;
        simulator === null || simulator === void 0 ? void 0 : simulator.set('deviceStyle', {
          canvas: {
            width: value + "px"
          }
        });
        _this3.setState({
          currentWidth: value
        });
      }
    })));
  };
  return SimulatorResizePane;
}(_react["default"].Component);
exports.SimulatorResizePane = SimulatorResizePane;
SimulatorResizePane.displayName = 'SimulatorResizePane';
var plugin = function plugin(ctx) {
  var SimulatorResizePaneRef = /*#__PURE__*/_react["default"].createRef();
  return {
    // 插件的初始化函数，在引擎初始化之后会立刻调用
    init: function init() {
      // 往引擎增加工具条
      ctx.skeleton.add({
        area: 'topArea',
        name: 'SimulatorResizePane',
        type: 'Widget',
        props: {
          description: '切换画布尺寸',
          align: 'center'
        },
        content: /*#__PURE__*/_react["default"].createElement(SimulatorResizePane, {
          ref: SimulatorResizePaneRef,
          pluginContext: ctx
        })
      });
    }
  };
};
plugin.pluginName = 'SimulatorResizePane';
var _default = plugin;
exports["default"] = _default;