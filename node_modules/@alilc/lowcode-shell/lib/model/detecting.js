"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Detecting = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _node = require("./node");
var _symbols = require("../symbols");
var Detecting = exports.Detecting = /*#__PURE__*/function () {
  function Detecting(document) {
    var _document$designer;
    this[_symbols.documentSymbol] = void 0;
    this[_symbols.detectingSymbol] = void 0;
    this[_symbols.documentSymbol] = document;
    this[_symbols.detectingSymbol] = (_document$designer = document.designer) === null || _document$designer === void 0 ? void 0 : _document$designer.detecting;
  }

  /**
   * 控制大纲树 hover 时是否出现悬停效果
   */
  var _proto = Detecting.prototype;
  /**
   * hover 指定节点
   * @param id 节点 id
   */
  _proto.capture = function capture(id) {
    this[_symbols.detectingSymbol].capture(this[_symbols.documentSymbol].getNode(id));
  }

  /**
   * hover 离开指定节点
   * @param id 节点 id
   */;
  _proto.release = function release(id) {
    this[_symbols.detectingSymbol].release(this[_symbols.documentSymbol].getNode(id));
  }

  /**
   * 清空 hover 态
   */;
  _proto.leave = function leave() {
    this[_symbols.detectingSymbol].leave(this[_symbols.documentSymbol]);
  };
  _proto.onDetectingChange = function onDetectingChange(fn) {
    var innerFn = function innerFn(innerNode) {
      var shellNode = _node.Node.create(innerNode);
      fn(shellNode);
    };
    return this[_symbols.detectingSymbol].onDetectingChange(innerFn);
  };
  (0, _createClass2["default"])(Detecting, [{
    key: "enable",
    get: function get() {
      return this[_symbols.detectingSymbol].enable;
    }

    /**
     * 当前 hover 的节点
     */
  }, {
    key: "current",
    get: function get() {
      return _node.Node.create(this[_symbols.detectingSymbol].current);
    }
  }]);
  return Detecting;
}();