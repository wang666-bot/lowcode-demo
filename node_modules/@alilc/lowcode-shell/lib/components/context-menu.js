"use strict";

exports.__esModule = true;
exports.ContextMenu = ContextMenu;
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ContextMenu(_ref) {
  var children = _ref.children,
    menus = _ref.menus,
    pluginContext = _ref.pluginContext;
  var handleContextMenu = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    event.stopPropagation();
    var destroyFn;
    var destroy = function destroy() {
      var _destroyFn;
      (_destroyFn = destroyFn) === null || _destroyFn === void 0 ? void 0 : _destroyFn();
    };
    var children = (0, _lowcodeUtils.parseContextMenuAsReactNode)((0, _lowcodeUtils.parseContextMenuProperties)(menus, {
      destroy: destroy,
      pluginContext: pluginContext
    }), {
      pluginContext: pluginContext
    });
    if (!(children !== null && children !== void 0 && children.length)) {
      return;
    }
    destroyFn = (0, _lowcodeUtils.createContextMenu)(children, {
      event: event
    });
  }, [menus]);
  if (!_lowcodeEditorCore.engineConfig.get('enableContextMenu')) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children);
  }
  if (!menus) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children);
  }

  // 克隆 children 并添加 onContextMenu 事件处理器
  var childrenWithContextMenu = _react["default"].Children.map(children, function (child) {
    return /*#__PURE__*/_react["default"].cloneElement(child, {
      onContextMenu: handleContextMenu
    });
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, childrenWithContextMenu);
}
ContextMenu.create = function (pluginContext, menus, event) {
  event.preventDefault();
  event.stopPropagation();
  var children = (0, _lowcodeUtils.parseContextMenuAsReactNode)((0, _lowcodeUtils.parseContextMenuProperties)(menus, {
    pluginContext: pluginContext
  }), {
    pluginContext: pluginContext
  });
  if (!(children !== null && children !== void 0 && children.length)) {
    return;
  }
  return (0, _lowcodeUtils.createContextMenu)(children, {
    event: event
  });
};