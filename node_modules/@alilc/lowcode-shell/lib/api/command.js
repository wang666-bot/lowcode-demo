"use strict";

exports.__esModule = true;
exports.Command = void 0;
var _symbols = require("../symbols");
var optionsSymbol = Symbol('options');
var commandScopeSet = new Set();
var Command = exports.Command = /*#__PURE__*/function () {
  function Command(innerCommand, pluginContext, options) {
    this[_symbols.commandSymbol] = void 0;
    this[optionsSymbol] = void 0;
    this[_symbols.pluginContextSymbol] = void 0;
    this[_symbols.commandSymbol] = innerCommand;
    this[optionsSymbol] = options;
    this[_symbols.pluginContextSymbol] = pluginContext;
    var commandScope = options === null || options === void 0 ? void 0 : options.commandScope;
    if (commandScope && commandScopeSet.has(commandScope)) {
      throw new Error("Command scope \"" + commandScope + "\" has been registered.");
    }
  }
  var _proto = Command.prototype;
  _proto.registerCommand = function registerCommand(command) {
    this[_symbols.commandSymbol].registerCommand(command, this[optionsSymbol]);
  };
  _proto.batchExecuteCommand = function batchExecuteCommand(commands) {
    this[_symbols.commandSymbol].batchExecuteCommand(commands, this[_symbols.pluginContextSymbol]);
  };
  _proto.executeCommand = function executeCommand(name, args) {
    this[_symbols.commandSymbol].executeCommand(name, args);
  };
  _proto.listCommands = function listCommands() {
    return this[_symbols.commandSymbol].listCommands();
  };
  _proto.unregisterCommand = function unregisterCommand(name) {
    this[_symbols.commandSymbol].unregisterCommand(name);
  };
  _proto.onCommandError = function onCommandError(callback) {
    this[_symbols.commandSymbol].onCommandError(callback);
  };
  return Command;
}();