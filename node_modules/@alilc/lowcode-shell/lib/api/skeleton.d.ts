import { ISkeleton } from '@alilc/lowcode-editor-skeleton';
import { skeletonSymbol } from '../symbols';
import { IPublicApiSkeleton, IPublicModelSkeletonItem, IPublicTypeConfigTransducer, IPublicTypeDisposable, IPublicTypeSkeletonConfig, IPublicTypeWidgetConfigArea } from '@alilc/lowcode-types';
import { SkeletonItem } from '../model/skeleton-item';
declare const innerSkeletonSymbol: unique symbol;
export declare class Skeleton implements IPublicApiSkeleton {
    readonly workspaceMode: boolean;
    private readonly [innerSkeletonSymbol];
    private readonly pluginName;
    get [skeletonSymbol](): ISkeleton;
    constructor(skeleton: ISkeleton, pluginName: string, workspaceMode?: boolean);
    /**
     * 增加一个面板实例
     * @param config
     * @param extraConfig
     * @returns
     */
    add(config: IPublicTypeSkeletonConfig, extraConfig?: Record<string, any>): IPublicModelSkeletonItem | undefined;
    /**
     * 移除一个面板实例
     * @param config
     * @returns
     */
    remove(config: IPublicTypeSkeletonConfig): number | undefined;
    getAreaItems(areaName: IPublicTypeWidgetConfigArea): IPublicModelSkeletonItem[];
    getPanel(name: string): SkeletonItem;
    /**
     * 显示面板
     * @param name
     */
    showPanel(name: string): void;
    /**
     * 隐藏面板
     * @param name
     */
    hidePanel(name: string): void;
    /**
     * 显示 widget
     * @param name
     */
    showWidget(name: string): void;
    /**
     * enable widget
     * @param name
     */
    enableWidget(name: string): void;
    /**
     * 隐藏 widget
     * @param name
     */
    hideWidget(name: string): void;
    /**
     * disable widget，不可点击
     * @param name
     */
    disableWidget(name: string): void;
    /**
     * show area
     * @param areaName name of area
     */
    showArea(areaName: string): void;
    /**
     * hide area
     * @param areaName name of area
     */
    hideArea(areaName: string): void;
    /**
     * 监听 panel 显示事件
     * @param listener
     * @returns
     */
    onShowPanel(listener: (paneName: string, panel: IPublicModelSkeletonItem) => void): IPublicTypeDisposable;
    onDisableWidget(listener: (...args: any[]) => void): IPublicTypeDisposable;
    onEnableWidget(listener: (...args: any[]) => void): IPublicTypeDisposable;
    /**
     * 监听 panel 隐藏事件
     * @param listener
     * @returns
     */
    onHidePanel(listener: (...args: any[]) => void): IPublicTypeDisposable;
    /**
     * 监听 widget 显示事件
     * @param listener
     * @returns
     */
    onShowWidget(listener: (...args: any[]) => void): IPublicTypeDisposable;
    /**
     * 监听 widget 隐藏事件
     * @param listener
     * @returns
     */
    onHideWidget(listener: (...args: any[]) => void): IPublicTypeDisposable;
    registerConfigTransducer(fn: IPublicTypeConfigTransducer, level: number, id?: string): void;
}
export {};
