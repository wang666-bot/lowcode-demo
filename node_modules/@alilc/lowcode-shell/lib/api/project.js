"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Project = void 0;
var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _model = require("../model");
var _simulatorHost = require("./simulator-host");
var _symbols = require("../symbols");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var logger = (0, _lowcodeUtils.getLogger)({
  level: 'warn',
  bizName: 'shell-project'
});
var innerProjectSymbol = Symbol('innerProject');
var Project = exports.Project = /*#__PURE__*/function () {
  function Project(project, workspaceMode) {
    if (workspaceMode === void 0) {
      workspaceMode = false;
    }
    this.workspaceMode = workspaceMode;
    this[innerProjectSymbol] = void 0;
    this[_symbols.simulatorHostSymbol] = void 0;
    this[innerProjectSymbol] = project;
  }
  Project.create = function create(project, workspaceMode) {
    if (workspaceMode === void 0) {
      workspaceMode = false;
    }
    return new Project(project, workspaceMode);
  }

  /**
   * 获取当前的 document
   * @returns
   */;
  var _proto = Project.prototype;
  /**
   * 打开一个 document
   * @param doc
   * @returns
   */
  _proto.openDocument = function openDocument(doc) {
    var documentModel = this[_symbols.projectSymbol].open(doc);
    if (!documentModel) {
      return null;
    }
    return _model.DocumentModel.create(documentModel);
  }

  /**
   * 创建一个 document
   * @param data
   * @returns
   */;
  _proto.createDocument = function createDocument(data) {
    var doc = this[_symbols.projectSymbol].createDocument(data);
    return _model.DocumentModel.create(doc);
  }

  /**
   * 删除一个 document
   * @param doc
   */;
  _proto.removeDocument = function removeDocument(doc) {
    this[_symbols.projectSymbol].removeDocument(doc[_symbols.documentSymbol]);
  }

  /**
   * 根据 fileName 获取 document
   * @param fileName
   * @returns
   */;
  _proto.getDocumentByFileName = function getDocumentByFileName(fileName) {
    var innerDocumentModel = this[_symbols.projectSymbol].getDocumentByFileName(fileName);
    return _model.DocumentModel.create(innerDocumentModel);
  }

  /**
   * 根据 id 获取 document
   * @param id
   * @returns
   */;
  _proto.getDocumentById = function getDocumentById(id) {
    return _model.DocumentModel.create(this[_symbols.projectSymbol].getDocument(id));
  }

  /**
   * 导出 project
   * @returns
   */;
  _proto.exportSchema = function exportSchema(stage) {
    if (stage === void 0) {
      stage = _lowcodeTypes.IPublicEnumTransformStage.Render;
    }
    return this[_symbols.projectSymbol].getSchema(stage);
  }

  /**
   * 导入 project
   * @param schema 待导入的 project 数据
   */;
  _proto.importSchema = function importSchema(schema) {
    this[_symbols.projectSymbol].load(schema, true);
  }

  /**
   * 获取当前的 document
   * @returns
   */;
  _proto.getCurrentDocument = function getCurrentDocument() {
    return _model.DocumentModel.create(this[_symbols.projectSymbol].currentDocument);
  }

  /**
   * 增加一个属性的管道处理函数
   * @param transducer
   * @param stage
   */;
  _proto.addPropsTransducer = function addPropsTransducer(transducer, stage) {
    this[_symbols.projectSymbol].designer.addPropsReducer(transducer, stage);
  }

  /**
   * 绑定删除文档事件
   * @param fn
   * @returns
   */;
  _proto.onRemoveDocument = function onRemoveDocument(fn) {
    return this[_symbols.editorSymbol].eventBus.on('designer.document.remove', function (data) {
      return fn(data);
    });
  }

  /**
   * 当前 project 内的 document 变更事件
   */;
  _proto.onChangeDocument = function onChangeDocument(fn) {
    var offFn = this[_symbols.projectSymbol].onCurrentDocumentChange(function (originalDoc) {
      fn(_model.DocumentModel.create(originalDoc));
    });
    if (this[_symbols.projectSymbol].currentDocument) {
      fn(_model.DocumentModel.create(this[_symbols.projectSymbol].currentDocument));
    }
    return offFn;
  }

  /**
   * 当前 project 的模拟器 ready 事件
   */;
  _proto.onSimulatorHostReady = function onSimulatorHostReady(fn) {
    var offFn = this[_symbols.projectSymbol].onSimulatorReady(function (simulator) {
      fn(_simulatorHost.SimulatorHost.create(simulator));
    });
    return offFn;
  }

  /**
   * 当前 project 的渲染器 ready 事件
   */;
  _proto.onSimulatorRendererReady = function onSimulatorRendererReady(fn) {
    var offFn = this[_symbols.projectSymbol].onRendererReady(function () {
      fn();
    });
    return offFn;
  }

  /**
   * 设置多语言语料
   * 数据格式参考 https://github.com/alibaba/lowcode-engine/blob/main/specs/lowcode-spec.md#2434%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8Baa
   * @param value object
   * @returns
   */;
  _proto.setI18n = function setI18n(value) {
    this[_symbols.projectSymbol].set('i18n', value);
  }

  /**
   * 设置项目配置
   * @param value object
   * @returns
   */;
  _proto.setConfig = function setConfig() {
    if (arguments.length === 2) {
      var _extends2;
      var oldConfig = this[_symbols.projectSymbol].get('config');
      this[_symbols.projectSymbol].set('config', (0, _extends3["default"])({}, oldConfig, (_extends2 = {}, _extends2[arguments.length <= 0 ? undefined : arguments[0]] = arguments.length <= 1 ? undefined : arguments[1], _extends2)));
    } else {
      this[_symbols.projectSymbol].set('config', arguments.length <= 0 ? undefined : arguments[0]);
    }
  };
  (0, _createClass2["default"])(Project, [{
    key: _symbols.projectSymbol,
    get: function get() {
      if (this.workspaceMode) {
        return this[innerProjectSymbol];
      }
      var workspace = _lowcodeEditorCore.globalContext.get('workspace');
      if (workspace.isActive) {
        var _workspace$window;
        if (!((_workspace$window = workspace.window) !== null && _workspace$window !== void 0 && _workspace$window.innerProject)) {
          logger.error('project api 调用时机出现问题，请检查');
          return this[innerProjectSymbol];
        }
        return workspace.window.innerProject;
      }
      return this[innerProjectSymbol];
    }
  }, {
    key: _symbols.editorSymbol,
    get: function get() {
      var _this$projectSymbol;
      return (_this$projectSymbol = this[_symbols.projectSymbol]) === null || _this$projectSymbol === void 0 ? void 0 : _this$projectSymbol.designer.editor;
    }
  }, {
    key: "currentDocument",
    get: function get() {
      return this.getCurrentDocument();
    }

    /**
     * 获取当前 project 下所有 documents
     * @returns
     */
  }, {
    key: "documents",
    get: function get() {
      return this[_symbols.projectSymbol].documents.map(function (doc) {
        return _model.DocumentModel.create(doc);
      });
    }

    /**
     * 获取模拟器的 host
     */
  }, {
    key: "simulatorHost",
    get: function get() {
      return _simulatorHost.SimulatorHost.create(this[_symbols.projectSymbol].simulator || this[_symbols.simulatorHostSymbol]);
    }

    /**
     * @deprecated use .simulatorHost instead.
     */
  }, {
    key: "simulator",
    get: function get() {
      return this.simulatorHost;
    }
  }]);
  return Project;
}();