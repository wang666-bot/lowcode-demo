"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Workspace = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _symbols = require("../symbols");
var _model = require("../model");
var _plugins = require("./plugins");
var _skeleton = require("./skeleton");
var Workspace = exports.Workspace = /*#__PURE__*/function () {
  function Workspace(innerWorkspace) {
    this[_symbols.workspaceSymbol] = void 0;
    this[_symbols.workspaceSymbol] = innerWorkspace;
  }
  var _proto = Workspace.prototype;
  _proto.setResourceList = function setResourceList(resourceList) {
    this[_symbols.workspaceSymbol].setResourceList(resourceList);
  };
  _proto.onResourceListChange = function onResourceListChange(fn) {
    return this[_symbols.workspaceSymbol].onResourceListChange(fn);
  };
  _proto.onWindowRendererReady = function onWindowRendererReady(fn) {
    return this[_symbols.workspaceSymbol].onWindowRendererReady(fn);
  };
  _proto.registerResourceType = function registerResourceType(resourceTypeModel) {
    this[_symbols.workspaceSymbol].registerResourceType(resourceTypeModel);
  };
  _proto.openEditorWindow = /*#__PURE__*/function () {
    var _openEditorWindow = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var _arguments$,
        _args = arguments;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof _args[0] === 'string')) {
              _context.next = 5;
              break;
            }
            _context.next = 3;
            return this[_symbols.workspaceSymbol].openEditorWindow(_args[0], _args[1], _args[2], _args[3], _args[4]);
          case 3:
            _context.next = 7;
            break;
          case 5:
            _context.next = 7;
            return this[_symbols.workspaceSymbol].openEditorWindowByResource((_arguments$ = _args[0]) === null || _arguments$ === void 0 ? void 0 : _arguments$[_symbols.resourceSymbol], _args[1]);
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function openEditorWindow() {
      return _openEditorWindow.apply(this, arguments);
    }
    return openEditorWindow;
  }();
  _proto.openEditorWindowById = function openEditorWindowById(id) {
    this[_symbols.workspaceSymbol].openEditorWindowById(id);
  };
  _proto.removeEditorWindow = function removeEditorWindow() {
    if (typeof arguments[0] === 'string') {
      this[_symbols.workspaceSymbol].removeEditorWindow(arguments[0], arguments[1]);
    } else {
      var _arguments$2;
      this[_symbols.workspaceSymbol].removeEditorWindowByResource((_arguments$2 = arguments[0]) === null || _arguments$2 === void 0 ? void 0 : _arguments$2[_symbols.resourceSymbol]);
    }
  };
  _proto.removeEditorWindowById = function removeEditorWindowById(id) {
    this[_symbols.workspaceSymbol].removeEditorWindowById(id);
  };
  _proto.onChangeWindows = function onChangeWindows(fn) {
    return this[_symbols.workspaceSymbol].onChangeWindows(fn);
  };
  _proto.onChangeActiveWindow = function onChangeActiveWindow(fn) {
    return this[_symbols.workspaceSymbol].onChangeActiveWindow(fn);
  };
  _proto.onChangeActiveEditorView = function onChangeActiveEditorView(fn) {
    return this[_symbols.workspaceSymbol].onChangeActiveEditorView(fn);
  };
  (0, _createClass2["default"])(Workspace, [{
    key: "resourceList",
    get: function get() {
      return this[_symbols.workspaceSymbol].getResourceList().map(function (d) {
        return new _model.Resource(d);
      });
    }
  }, {
    key: "isActive",
    get: function get() {
      return this[_symbols.workspaceSymbol].isActive;
    }
  }, {
    key: "window",
    get: function get() {
      if (!this[_symbols.workspaceSymbol].window) {
        return null;
      }
      return new _model.Window(this[_symbols.workspaceSymbol].window);
    }
  }, {
    key: "resourceTypeList",
    get: function get() {
      return Array.from(this[_symbols.workspaceSymbol].resourceTypeMap.values()).map(function (d) {
        var resourceName = d.name,
          resourceType = d.type;
        var _d$resourceTypeModel = d.resourceTypeModel({}, {}),
          description = _d$resourceTypeModel.description,
          editorViews = _d$resourceTypeModel.editorViews;
        return {
          resourceName: resourceName,
          resourceType: resourceType,
          description: description,
          editorViews: editorViews.map(function (d) {
            return {
              viewName: d.viewName,
              viewType: d.viewType || 'editor'
            };
          })
        };
      });
    }
  }, {
    key: "plugins",
    get: function get() {
      return new _plugins.Plugins(this[_symbols.workspaceSymbol].plugins, true).toProxy();
    }
  }, {
    key: "skeleton",
    get: function get() {
      return new _skeleton.Skeleton(this[_symbols.workspaceSymbol].skeleton, 'workspace', true);
    }
  }, {
    key: "windows",
    get: function get() {
      return this[_symbols.workspaceSymbol].windows.map(function (d) {
        return new _model.Window(d);
      });
    }
  }]);
  return Workspace;
}();