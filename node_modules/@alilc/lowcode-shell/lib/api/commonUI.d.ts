import { IPublicApiCommonUI, IPublicTypeContextMenuAction } from '@alilc/lowcode-types';
import { HelpTip, IEditor, Tip as InnerTip, Title as InnerTitle } from '@alilc/lowcode-editor-core';
import { Balloon, Breadcrumb, Card, Checkbox, DatePicker, Dialog, Dropdown, Form, Icon, Input, Message, Overlay, Pagination, Radio, Select, SplitButton, Step, Switch, Tab, Table, Tree, TreeSelect, Upload, Divider } from '@alifd/next';
import { editorSymbol } from '../symbols';
import { ReactElement } from 'react';
export declare class CommonUI implements IPublicApiCommonUI {
    [editorSymbol]: IEditor;
    Balloon: typeof Balloon;
    Breadcrumb: typeof Breadcrumb;
    Button: import("@alifd/next/types/config-provider/types").ConfiguredComponentClass<import("@alifd/next/types/button").ButtonProps & import("@alifd/next/types/config-provider/types").ComponentCommonProps, import("@alifd/next/types/button/view/button").default, {}> & {
        Group: import("@alifd/next/types/config-provider/types").ConfiguredComponentClass<import("@alifd/next/types/button").GroupProps & import("@alifd/next/types/config-provider/types").ComponentCommonProps, import("@alifd/next/types/button/view/group").ButtonGroup, {}>;
    };
    Card: typeof Card;
    Checkbox: typeof Checkbox;
    DatePicker: typeof DatePicker;
    Dialog: typeof Dialog;
    Dropdown: typeof Dropdown;
    Form: typeof Form;
    Icon: typeof Icon;
    Input: typeof Input;
    Loading: any;
    Message: typeof Message;
    Overlay: typeof Overlay;
    Pagination: typeof Pagination;
    Radio: typeof Radio;
    Search: import("@alifd/next/types/config-provider/types").ConfiguredComponentClass<import("@alifd/next/types/search").SearchProps & import("@alifd/next/types/config-provider/types").ComponentCommonProps, {
        highlightKey: unknown;
        inputRef: import("@alifd/next/types/select").AutoComplete;
        onChange: (value: any, actionType: string, item: any) => void;
        onPressEnter: () => void;
        onSearch: () => void;
        onFilterChange: (filterValue: string) => void;
        onToggleHighlightItem: (highlightKey: unknown, ...args: unknown[]) => void;
        onKeyDown: (e: import("react").KeyboardEvent<Element>) => void;
        saveInputRef: (ref: import("@alifd/next/types/select").AutoComplete) => void;
        focus: (e: import("react").FocusEvent<HTMLInputElement, Element>) => void;
        handleFocus(args_0: import("react").FocusEvent<HTMLInputElement, Element>): void;
        handleBlur(args_0: import("react").FocusEvent<HTMLInputElement, Element>): void;
        render(): import("react").JSX.Element;
        context: any;
        setState<K extends keyof import("@alifd/next/types/search/Search").SearchState>(state: import("@alifd/next/types/search/Search").SearchState | ((prevState: Readonly<import("@alifd/next/types/search/Search").SearchState>, props: Readonly<import("@alifd/next/types/search").SearchProps>) => import("@alifd/next/types/search/Search").SearchState | Pick<import("@alifd/next/types/search/Search").SearchState, K>) | Pick<import("@alifd/next/types/search/Search").SearchState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<import("@alifd/next/types/search").SearchProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<import("@alifd/next/types/search/Search").SearchState>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("@alifd/next/types/search").SearchProps>, nextState: Readonly<import("@alifd/next/types/search/Search").SearchState>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("@alifd/next/types/search").SearchProps>, prevState: Readonly<import("@alifd/next/types/search/Search").SearchState>): any;
        componentDidUpdate?(prevProps: Readonly<import("@alifd/next/types/search").SearchProps>, prevState: Readonly<import("@alifd/next/types/search/Search").SearchState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("@alifd/next/types/search").SearchProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("@alifd/next/types/search").SearchProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("@alifd/next/types/search").SearchProps>, nextState: Readonly<import("@alifd/next/types/search/Search").SearchState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("@alifd/next/types/search").SearchProps>, nextState: Readonly<import("@alifd/next/types/search/Search").SearchState>, nextContext: any): void;
    }, {}>;
    Select: typeof Select;
    SplitButton: typeof SplitButton;
    Step: typeof Step;
    Switch: typeof Switch;
    Tab: typeof Tab;
    Table: typeof Table;
    Tree: typeof Tree;
    TreeSelect: typeof TreeSelect;
    Upload: typeof Upload;
    Divider: typeof Divider;
    ContextMenu: ((props: {
        menus: IPublicTypeContextMenuAction[];
        children: React.ReactElement[] | React.ReactElement;
    }) => ReactElement) & {
        create(menus: IPublicTypeContextMenuAction[], event: MouseEvent | React.MouseEvent): void;
    };
    constructor(editor: IEditor);
    get Tip(): typeof InnerTip;
    get HelpTip(): typeof HelpTip;
    get Title(): typeof InnerTitle;
}
