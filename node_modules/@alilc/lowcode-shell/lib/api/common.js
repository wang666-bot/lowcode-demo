"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.Common = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _symbols = require("../symbols");
var _lowcodeUtils = require("@alilc/lowcode-utils");
var _lowcodeTypes = require("@alilc/lowcode-types");
var _lowcodeDesigner = require("@alilc/lowcode-designer");
var _lowcodeEditorSkeleton = require("@alilc/lowcode-editor-skeleton");
var _lowcodeEditorCore = require("@alilc/lowcode-editor-core");
var _model = require("../model");
var DesignerCabin = /*#__PURE__*/function () {
  function DesignerCabin(editor) {
    this[_symbols.editorSymbol] = void 0;
    /**
     * @deprecated
     */
    this[_symbols.designerCabinSymbol] = void 0;
    this[_symbols.editorSymbol] = editor;
    this[_symbols.designerCabinSymbol] = {
      isDragNodeObject: _lowcodeUtils.isDragNodeObject,
      isDragAnyObject: _lowcodeUtils.isDragAnyObject,
      isShaken: _lowcodeDesigner.isShaken,
      contains: _lowcodeDesigner.contains,
      LocationDetailType: _lowcodeTypes.IPublicTypeLocationDetailType,
      isLocationChildrenDetail: _lowcodeUtils.isLocationChildrenDetail,
      ScrollTarget: _lowcodeDesigner.ScrollTarget,
      isSettingField: _lowcodeUtils.isSettingField,
      TransformStage: _lowcodeTypes.IPublicEnumTransformStage,
      SettingField: _lowcodeDesigner.SettingField,
      LiveEditing: _lowcodeDesigner.LiveEditing,
      DragObjectType: _lowcodeTypes.IPublicEnumDragObjectType,
      isDragNodeDataObject: _lowcodeUtils.isDragNodeDataObject,
      isNode: _lowcodeUtils.isNode,
      DropLocation: _lowcodeDesigner.DropLocation,
      Designer: _lowcodeDesigner.Designer,
      Node: _lowcodeDesigner.Node,
      LowCodePluginManager: _lowcodeDesigner.LowCodePluginManager,
      DesignerView: _lowcodeDesigner.DesignerView
    };
  }

  /**
   * 是否是 SettingField 实例
   * @deprecated use same function from @alilc/lowcode-utils directly
   */
  var _proto = DesignerCabin.prototype;
  _proto.isSettingField = function isSettingField(obj) {
    return (0, _lowcodeUtils.isSettingField)(obj);
  }

  /**
   * 转换类型枚举对象，包含 init / upgrade / render 等类型
   * [参考](https://github.com/alibaba/lowcode-engine/blob/main/packages/types/src/transform-stage.ts)
   * @deprecated use { TransformStage } from '@alilc/lowcode-types' instead
   */;
  /**
   * @deprecated
   */
  _proto.isDragNodeDataObject = function isDragNodeDataObject(obj) {
    return (0, _lowcodeUtils.isDragNodeDataObject)(obj);
  }

  /**
   * @deprecated
   */;
  _proto.isNode = function isNode(node) {
    return (0, _lowcodeUtils.isNode)(node);
  }

  /**
   * @deprecated please use canvas.dragon
   */;
  (0, _createClass2["default"])(DesignerCabin, [{
    key: _symbols.designerSymbol,
    get: function get() {
      return this[_symbols.editorSymbol].get('designer');
    }
  }, {
    key: "TransformStage",
    get: function get() {
      return _lowcodeTypes.IPublicEnumTransformStage;
    }

    /**
     * @deprecated
     */
  }, {
    key: "SettingField",
    get: function get() {
      return _lowcodeDesigner.SettingField;
    }

    /**
     * @deprecated
     */
  }, {
    key: "LiveEditing",
    get: function get() {
      return _lowcodeDesigner.LiveEditing;
    }

    /**
     * @deprecated
     */
  }, {
    key: "DragObjectType",
    get: function get() {
      return _lowcodeTypes.IPublicEnumDragObjectType;
    }
  }, {
    key: "dragon",
    get: function get() {
      return _model.Dragon.create(this[_symbols.designerSymbol].dragon, false);
    }
  }]);
  return DesignerCabin;
}();
var SkeletonCabin = /*#__PURE__*/function () {
  function SkeletonCabin(skeleton) {
    this[_symbols.skeletonSymbol] = void 0;
    this[_symbols.skeletonCabinSymbol] = void 0;
    this[_symbols.skeletonSymbol] = skeleton;
    this[_symbols.skeletonCabinSymbol] = {
      Workbench: _lowcodeEditorSkeleton.Workbench,
      createSettingFieldView: this.createSettingFieldView,
      PopupContext: _lowcodeEditorSkeleton.PopupContext,
      PopupPipe: _lowcodeEditorSkeleton.PopupPipe,
      SettingsPrimaryPane: _lowcodeEditorSkeleton.SettingsPrimaryPane,
      registerDefaults: _lowcodeEditorSkeleton.registerDefaults,
      Skeleton: _lowcodeEditorSkeleton.Skeleton
    };
  }
  var _proto2 = SkeletonCabin.prototype;
  /**
   * @deprecated
   */
  _proto2.createSettingFieldView = function createSettingFieldView(field, fieldEntry) {
    return (0, _lowcodeEditorSkeleton.createSettingFieldView)(field[_symbols.settingFieldSymbol] || field, fieldEntry);
  }

  /**
   * @deprecated
   */;
  (0, _createClass2["default"])(SkeletonCabin, [{
    key: "Workbench",
    get: function get() {
      var innerSkeleton = this[_symbols.skeletonSymbol];
      return function (props) {
        return /*#__PURE__*/React.createElement(_lowcodeEditorSkeleton.Workbench, (0, _extends2["default"])({}, props, {
          skeleton: innerSkeleton
        }));
      };
    }
  }, {
    key: "PopupContext",
    get: function get() {
      return _lowcodeEditorSkeleton.PopupContext;
    }

    /**
     * @deprecated
     */
  }, {
    key: "PopupPipe",
    get: function get() {
      return _lowcodeEditorSkeleton.PopupPipe;
    }
  }]);
  return SkeletonCabin;
}();
var Utils = /*#__PURE__*/function () {
  function Utils() {}
  var _proto3 = Utils.prototype;
  _proto3.isNodeSchema = function isNodeSchema(data) {
    return (0, _lowcodeUtils.isNodeSchema)(data);
  };
  _proto3.isFormEvent = function isFormEvent(e) {
    return (0, _lowcodeUtils.isFormEvent)(e);
  }

  /**
   * @deprecated this is a legacy api, do not use this if not using is already
   */;
  _proto3.compatibleLegaoSchema = function compatibleLegaoSchema(props) {
    return (0, _lowcodeUtils.compatibleLegaoSchema)(props);
  };
  _proto3.getNodeSchemaById = function getNodeSchemaById(schema, nodeId) {
    return (0, _lowcodeUtils.getNodeSchemaById)(schema, nodeId);
  };
  _proto3.getConvertedExtraKey = function getConvertedExtraKey(key) {
    return (0, _lowcodeDesigner.getConvertedExtraKey)(key);
  };
  _proto3.getOriginalExtraKey = function getOriginalExtraKey(key) {
    return (0, _lowcodeDesigner.getOriginalExtraKey)(key);
  };
  _proto3.executeTransaction = function executeTransaction(fn, type) {
    if (type === void 0) {
      type = _lowcodeTypes.IPublicEnumTransitionType.REPAINT;
    }
    _lowcodeUtils.transactionManager.executeTransaction(fn, type);
  };
  _proto3.createIntl = function createIntl(instance) {
    return (0, _lowcodeEditorCore.createIntl)(instance);
  };
  _proto3.intl = function intl(data, params) {
    return (0, _lowcodeEditorCore.intl)(data, params);
  };
  return Utils;
}();
var EditorCabin = /*#__PURE__*/function () {
  function EditorCabin(editor) {
    var _this = this;
    this[_symbols.editorSymbol] = void 0;
    /**
     * @deprecated
     */
    this[_symbols.editorCabinSymbol] = void 0;
    /**
     * @deprecated
     */
    this.createSetterContent = function (setter, props) {
      var setters = _this[_symbols.editorSymbol].get('setters');
      return setters.createSetterContent(setter, props);
    };
    this[_symbols.editorSymbol] = editor;
    this[_symbols.editorCabinSymbol] = {
      Editor: _lowcodeEditorCore.Editor,
      globalContext: _lowcodeEditorCore.globalContext,
      runInAction: _lowcodeEditorCore.runInAction,
      Title: _lowcodeEditorCore.Title,
      Tip: _lowcodeEditorCore.Tip,
      shallowIntl: _lowcodeEditorCore.shallowIntl,
      createIntl: _lowcodeEditorCore.createIntl,
      intl: _lowcodeEditorCore.intl,
      createSetterContent: this.createSetterContent.bind(this),
      globalLocale: _lowcodeEditorCore.globalLocale,
      obx: _lowcodeEditorCore.obx,
      action: _lowcodeEditorCore.action,
      engineConfig: _lowcodeEditorCore.engineConfig,
      observable: _lowcodeEditorCore.observable,
      makeObservable: _lowcodeEditorCore.makeObservable,
      untracked: _lowcodeEditorCore.untracked,
      computed: _lowcodeEditorCore.computed,
      observer: _lowcodeEditorCore.observer
    };
  }

  /**
   * Title 组件
   * @experimental unstable API, pay extra caution when trying to use this
   */
  var _proto4 = EditorCabin.prototype;
  /**
   * @deprecated
   */
  _proto4.shallowIntl = function shallowIntl(data) {
    return (0, _lowcodeEditorCore.shallowIntl)(data);
  }

  /**
   * @deprecated use common.utils.createIntl instead
   */;
  _proto4.createIntl = function createIntl(instance) {
    return (0, _lowcodeEditorCore.createIntl)(instance);
  }

  /**
   * @deprecated
   */;
  _proto4.intl = function intl(data, params) {
    return (0, _lowcodeEditorCore.intl)(data, params);
  };
  /**
   * @deprecated
   */
  _proto4.makeObservable = function makeObservable(target, annotations, options) {
    return (0, _lowcodeEditorCore.makeObservable)(target, annotations, options);
  }

  /**
   * @deprecated
   */;
  _proto4.untracked = function untracked(action) {
    return (0, _lowcodeEditorCore.untracked)(action);
  }

  /**
   * @deprecated
   */;
  /**
   * @deprecated
   */
  _proto4.observer = function observer(component) {
    return (0, _lowcodeEditorCore.observer)(component);
  };
  (0, _createClass2["default"])(EditorCabin, [{
    key: "Title",
    get: function get() {
      return _lowcodeEditorCore.Title;
    }

    /**
     * Tip 组件
     * @experimental unstable API, pay extra caution when trying to use this
     */
  }, {
    key: "Tip",
    get: function get() {
      return _lowcodeEditorCore.Tip;
    }
  }, {
    key: "globalLocale",
    get:
    /**
     * @deprecated use common.utils.createIntl instead
     */
    function get() {
      return _lowcodeEditorCore.globalLocale;
    }

    /**
     * @deprecated
     */
  }, {
    key: "obx",
    get: function get() {
      return _lowcodeEditorCore.obx;
    }

    /**
     * @deprecated
     */
  }, {
    key: "action",
    get: function get() {
      return _lowcodeEditorCore.action;
    }

    /**
     * @deprecated
     */
  }, {
    key: "engineConfig",
    get: function get() {
      return _lowcodeEditorCore.engineConfig;
    }

    /**
     * @deprecated
     */
  }, {
    key: "runInAction",
    get: function get() {
      return _lowcodeEditorCore.runInAction;
    }

    /**
     * @deprecated
     */
  }, {
    key: "observable",
    get: function get() {
      return _lowcodeEditorCore.observable;
    }
  }, {
    key: "computed",
    get: function get() {
      return _lowcodeEditorCore.computed;
    }
  }]);
  return EditorCabin;
}();
var Common = exports.Common = /*#__PURE__*/function () {
  function Common(editor, skeleton) {
    this.__designerCabin = void 0;
    this.__skeletonCabin = void 0;
    this.__editorCabin = void 0;
    this.__utils = void 0;
    this.__designerCabin = new DesignerCabin(editor);
    this.__skeletonCabin = new SkeletonCabin(skeleton);
    this.__editorCabin = new EditorCabin(editor);
    this.__utils = new Utils();
  }
  (0, _createClass2["default"])(Common, [{
    key: "utils",
    get: function get() {
      return this.__utils;
    }

    /**
     * 历史原因导致此处设计不合理，慎用。
     * this load of crap will be removed in some future versions, don`t use it.
     * @deprecated
     */
  }, {
    key: "editorCabin",
    get: function get() {
      return this.__editorCabin;
    }

    /**
     * 历史原因导致此处设计不合理，慎用。
     * this load of crap will be removed in some future versions, don`t use it.
     * @deprecated use canvas api instead
     */
  }, {
    key: "designerCabin",
    get: function get() {
      return this.__designerCabin;
    }
  }, {
    key: "skeletonCabin",
    get: function get() {
      return this.__skeletonCabin;
    }

    /**
     * 历史原因导致此处设计不合理，慎用。
     * this load of crap will be removed in some future versions, don`t use it.
     * @deprecated use { TransformStage } from '@alilc/lowcode-types' instead
     */
  }, {
    key: "objects",
    get: function get() {
      return {
        TransformStage: _lowcodeTypes.IPublicEnumTransformStage
      };
    }
  }]);
  return Common;
}();