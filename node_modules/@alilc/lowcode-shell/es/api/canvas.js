import _extends from "@babel/runtime/helpers/extends";
import _createClass from "@babel/runtime/helpers/createClass";
import { ScrollTarget as InnerScrollTarget } from '@alilc/lowcode-designer';
import { editorSymbol, designerSymbol, nodeSymbol } from '../symbols';
import { Dragon as ShellDragon, DropLocation as ShellDropLocation, ActiveTracker as ShellActiveTracker, Clipboard as ShellClipboard, DropLocation } from '../model';
var clipboardInstanceSymbol = Symbol('clipboardInstace');
export var Canvas = /*#__PURE__*/function () {
  function Canvas(editor, workspaceMode) {
    if (workspaceMode === void 0) {
      workspaceMode = false;
    }
    this.workspaceMode = workspaceMode;
    this[editorSymbol] = void 0;
    this[clipboardInstanceSymbol] = void 0;
    this[editorSymbol] = editor;
    this[clipboardInstanceSymbol] = new ShellClipboard();
  }
  var _proto = Canvas.prototype;
  _proto.createScrollTarget = function createScrollTarget(shell) {
    return new InnerScrollTarget(shell);
  };
  _proto.createScroller = function createScroller(scrollable) {
    return this[designerSymbol].createScroller(scrollable);
  }

  /**
   * 创建插入位置，考虑放到 dragon 中
   */;
  _proto.createLocation = function createLocation(locationData) {
    return new DropLocation(this[designerSymbol].createLocation(_extends({}, locationData, {
      target: locationData.target[nodeSymbol]
    })));
  }

  /**
   * @deprecated
   */;
  _createClass(Canvas, [{
    key: designerSymbol,
    get: function get() {
      return this[editorSymbol].get('designer');
    }
  }, {
    key: "dragon",
    get: function get() {
      return ShellDragon.create(this[designerSymbol].dragon, this.workspaceMode);
    }
  }, {
    key: "activeTracker",
    get: function get() {
      var activeTracker = new ShellActiveTracker(this[designerSymbol].activeTracker);
      return activeTracker;
    }
  }, {
    key: "isInLiveEditing",
    get: function get() {
      var _this$editorSymbol$ge, _this$editorSymbol$ge2, _this$editorSymbol$ge3, _this$editorSymbol$ge4;
      return Boolean((_this$editorSymbol$ge = this[editorSymbol].get('designer')) === null || _this$editorSymbol$ge === void 0 ? void 0 : (_this$editorSymbol$ge2 = _this$editorSymbol$ge.project) === null || _this$editorSymbol$ge2 === void 0 ? void 0 : (_this$editorSymbol$ge3 = _this$editorSymbol$ge2.simulator) === null || _this$editorSymbol$ge3 === void 0 ? void 0 : (_this$editorSymbol$ge4 = _this$editorSymbol$ge3.liveEditing) === null || _this$editorSymbol$ge4 === void 0 ? void 0 : _this$editorSymbol$ge4.editing);
    }
  }, {
    key: "clipboard",
    get: function get() {
      return this[clipboardInstanceSymbol];
    }
  }, {
    key: "dropLocation",
    get: function get() {
      return ShellDropLocation.create(this[designerSymbol].dropLocation || null);
    }
  }]);
  return Canvas;
}();