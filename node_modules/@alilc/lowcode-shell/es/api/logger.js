import { getLogger } from '@alilc/lowcode-utils';
var innerLoggerSymbol = Symbol('logger');
export var Logger = /*#__PURE__*/function () {
  function Logger(options) {
    this[innerLoggerSymbol] = void 0;
    this[innerLoggerSymbol] = getLogger(options);
  }

  /**
   * debug info
   */
  var _proto = Logger.prototype;
  _proto.debug = function debug() {
    var _this$innerLoggerSymb;
    (_this$innerLoggerSymb = this[innerLoggerSymbol]).debug.apply(_this$innerLoggerSymb, arguments);
  }

  /**
   * normal info output
   */;
  _proto.info = function info() {
    var _this$innerLoggerSymb2;
    (_this$innerLoggerSymb2 = this[innerLoggerSymbol]).info.apply(_this$innerLoggerSymb2, arguments);
  }

  /**
   * warning info output
   */;
  _proto.warn = function warn() {
    var _this$innerLoggerSymb3;
    (_this$innerLoggerSymb3 = this[innerLoggerSymbol]).warn.apply(_this$innerLoggerSymb3, arguments);
  }

  /**
   * error info output
   */;
  _proto.error = function error() {
    var _this$innerLoggerSymb4;
    (_this$innerLoggerSymb4 = this[innerLoggerSymbol]).error.apply(_this$innerLoggerSymb4, arguments);
  }

  /**
   * normal log output
   */;
  _proto.log = function log() {
    var _this$innerLoggerSymb5;
    (_this$innerLoggerSymb5 = this[innerLoggerSymbol]).log.apply(_this$innerLoggerSymb5, arguments);
  };
  return Logger;
}();