import { IPublicApiWorkspace, IPublicResourceList, IPublicTypeDisposable, IPublicTypeResourceType } from '@alilc/lowcode-types';
import { IWorkspace } from '@alilc/lowcode-workspace';
import { workspaceSymbol } from '../symbols';
import { Resource as ShellResource, Window as ShellWindow } from '../model';
import { Plugins } from './plugins';
import { Skeleton } from './skeleton';
export declare class Workspace implements IPublicApiWorkspace {
    readonly [workspaceSymbol]: IWorkspace;
    constructor(innerWorkspace: IWorkspace);
    get resourceList(): ShellResource[];
    setResourceList(resourceList: IPublicResourceList): void;
    onResourceListChange(fn: (resourceList: IPublicResourceList) => void): IPublicTypeDisposable;
    get isActive(): boolean;
    get window(): ShellWindow;
    get resourceTypeList(): {
        resourceName: string;
        resourceType: string;
        description: string;
        editorViews: {
            viewName: string;
            viewType: "webview" | "editor";
        }[];
    }[];
    onWindowRendererReady(fn: () => void): IPublicTypeDisposable;
    registerResourceType(resourceTypeModel: IPublicTypeResourceType): void;
    openEditorWindow(): Promise<void>;
    openEditorWindowById(id: string): void;
    removeEditorWindow(): void;
    removeEditorWindowById(id: string): void;
    get plugins(): Plugins;
    get skeleton(): Skeleton;
    get windows(): ShellWindow[];
    onChangeWindows(fn: () => void): IPublicTypeDisposable;
    onChangeActiveWindow(fn: () => void): IPublicTypeDisposable;
    onChangeActiveEditorView(fn: () => void): IPublicTypeDisposable;
}
