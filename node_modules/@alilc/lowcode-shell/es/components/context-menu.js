import { createContextMenu, parseContextMenuAsReactNode, parseContextMenuProperties } from '@alilc/lowcode-utils';
import { engineConfig } from '@alilc/lowcode-editor-core';
import React, { useCallback } from 'react';
export function ContextMenu(_ref) {
  var children = _ref.children,
    menus = _ref.menus,
    pluginContext = _ref.pluginContext;
  var handleContextMenu = useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    var destroyFn;
    var destroy = function destroy() {
      var _destroyFn;
      (_destroyFn = destroyFn) === null || _destroyFn === void 0 ? void 0 : _destroyFn();
    };
    var children = parseContextMenuAsReactNode(parseContextMenuProperties(menus, {
      destroy: destroy,
      pluginContext: pluginContext
    }), {
      pluginContext: pluginContext
    });
    if (!(children !== null && children !== void 0 && children.length)) {
      return;
    }
    destroyFn = createContextMenu(children, {
      event: event
    });
  }, [menus]);
  if (!engineConfig.get('enableContextMenu')) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  if (!menus) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }

  // 克隆 children 并添加 onContextMenu 事件处理器
  var childrenWithContextMenu = React.Children.map(children, function (child) {
    return /*#__PURE__*/React.cloneElement(child, {
      onContextMenu: handleContextMenu
    });
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, childrenWithContextMenu);
}
ContextMenu.create = function (pluginContext, menus, event) {
  event.preventDefault();
  event.stopPropagation();
  var children = parseContextMenuAsReactNode(parseContextMenuProperties(menus, {
    pluginContext: pluginContext
  }), {
    pluginContext: pluginContext
  });
  if (!(children !== null && children !== void 0 && children.length)) {
    return;
  }
  return createContextMenu(children, {
    event: event
  });
};