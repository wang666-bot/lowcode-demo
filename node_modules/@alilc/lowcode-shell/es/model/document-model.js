import _createClass from "@babel/runtime/helpers/createClass";
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { IPublicEnumTransformStage, GlobalEvent } from '@alilc/lowcode-types';
import { isDragNodeObject } from '@alilc/lowcode-utils';
import { Node as ShellNode } from './node';
import { Selection as ShellSelection } from './selection';
import { Detecting as ShellDetecting } from './detecting';
import { History as ShellHistory } from './history';
import { DropLocation as ShellDropLocation } from './drop-location';
import { Project as ShellProject, Canvas as ShellCanvas } from '../api';
import { Prop as ShellProp } from './prop';
import { ModalNodesManager } from './modal-nodes-manager';
import { documentSymbol, editorSymbol, nodeSymbol } from '../symbols';
var shellDocSymbol = Symbol('shellDocSymbol');
export var DocumentModel = /*#__PURE__*/function () {
  function DocumentModel(document) {
    var _document$designer;
    this[documentSymbol] = void 0;
    this[editorSymbol] = void 0;
    this._focusNode = void 0;
    this.selection = void 0;
    this.detecting = void 0;
    this.history = void 0;
    /**
     * @deprecated use canvas API instead
     */
    this.canvas = void 0;
    this[documentSymbol] = document;
    this[editorSymbol] = (_document$designer = document.designer) === null || _document$designer === void 0 ? void 0 : _document$designer.editor;
    this.selection = new ShellSelection(document);
    this.detecting = new ShellDetecting(document);
    this.history = new ShellHistory(document);
    this.canvas = new ShellCanvas(this[editorSymbol]);
    this._focusNode = ShellNode.create(this[documentSymbol].focusNode);
  }
  DocumentModel.create = function create(document) {
    if (!document) {
      return null;
    }
    // @ts-ignore 直接返回已挂载的 shell doc 实例
    if (document[shellDocSymbol]) {
      return document[shellDocSymbol];
    }
    var shellDoc = new DocumentModel(document);
    // @ts-ignore 直接返回已挂载的 shell doc 实例
    document[shellDocSymbol] = shellDoc;
    return shellDoc;
  }

  /**
   * id
   */;
  var _proto = DocumentModel.prototype;
  /**
   * 根据 nodeId 返回 Node 实例
   * get node instance by nodeId
   * @param {string} nodeId
   */
  _proto.getNodeById = function getNodeById(nodeId) {
    return ShellNode.create(this[documentSymbol].getNode(nodeId));
  }

  /**
   * 导入 schema
   * @param schema
   */;
  _proto.importSchema = function importSchema(schema) {
    this[documentSymbol]["import"](schema);
    this[editorSymbol].eventBus.emit('shell.document.importSchema', schema);
  }

  /**
   * 导出 schema
   * @param stage
   * @returns
   */;
  _proto.exportSchema = function exportSchema(stage) {
    if (stage === void 0) {
      stage = IPublicEnumTransformStage.Render;
    }
    return this[documentSymbol]["export"](stage);
  }

  /**
   * 插入节点
   * @param parent
   * @param thing
   * @param at
   * @param copy
   * @returns
   */;
  _proto.insertNode = function insertNode(parent, thing, at, copy) {
    var node = this[documentSymbol].insertNode(parent[nodeSymbol] ? parent[nodeSymbol] : parent, thing !== null && thing !== void 0 && thing[nodeSymbol] ? thing[nodeSymbol] : thing, at, copy);
    return ShellNode.create(node);
  }

  /**
   * 创建一个节点
   * @param data
   * @returns
   */;
  _proto.createNode = function createNode(data) {
    return ShellNode.create(this[documentSymbol].createNode(data));
  }

  /**
   * 移除指定节点/节点id
   * @param idOrNode
   */;
  _proto.removeNode = function removeNode(idOrNode) {
    this[documentSymbol].removeNode(idOrNode);
  }

  /**
   * componentsMap of documentModel
   * @param extraComps
   * @returns
   */;
  _proto.getComponentsMap = function getComponentsMap(extraComps) {
    return this[documentSymbol].getComponentsMap(extraComps);
  }

  /**
   * 检查拖拽放置的目标节点是否可以放置该拖拽对象
   * @param dropTarget 拖拽放置的目标节点
   * @param dragObject 拖拽的对象
   * @returns boolean 是否可以放置
   */;
  _proto.checkNesting = function checkNesting(dropTarget, dragObject) {
    var innerDragObject = dragObject;
    if (isDragNodeObject(dragObject)) {
      var _innerDragObject$node;
      innerDragObject.nodes = (_innerDragObject$node = innerDragObject.nodes) === null || _innerDragObject$node === void 0 ? void 0 : _innerDragObject$node.map(function (node) {
        return node[nodeSymbol] || node;
      });
    }
    return this[documentSymbol].checkNesting(dropTarget[nodeSymbol] || dropTarget, innerDragObject);
  }

  /**
   * 当前 document 新增节点事件
   */;
  _proto.onAddNode = function onAddNode(fn) {
    return this[documentSymbol].onNodeCreate(function (node) {
      fn(ShellNode.create(node));
    });
  }

  /**
   * 当前 document 新增节点事件，此时节点已经挂载到 document 上
   */;
  _proto.onMountNode = function onMountNode(fn) {
    return this[documentSymbol].onMountNode(function (_ref) {
      var node = _ref.node;
      fn({
        node: ShellNode.create(node)
      });
    });
  }

  /**
   * 当前 document 删除节点事件
   */;
  _proto.onRemoveNode = function onRemoveNode(fn) {
    return this[documentSymbol].onNodeDestroy(function (node) {
      fn(ShellNode.create(node));
    });
  }

  /**
   * 当前 document 的 hover 变更事件
   */;
  _proto.onChangeDetecting = function onChangeDetecting(fn) {
    return this[documentSymbol].designer.detecting.onDetectingChange(function (node) {
      fn(ShellNode.create(node));
    });
  }

  /**
   * 当前 document 的选中变更事件
   */;
  _proto.onChangeSelection = function onChangeSelection(fn) {
    return this[documentSymbol].selection.onSelectionChange(function (ids) {
      fn(ids);
    });
  }

  /**
   * 当前 document 的节点显隐状态变更事件
   * @param fn
   */;
  _proto.onChangeNodeVisible = function onChangeNodeVisible(fn) {
    return this[documentSymbol].onChangeNodeVisible(function (node, visible) {
      fn(ShellNode.create(node), visible);
    });
  }

  /**
   * 当前 document 的节点 children 变更事件
   * @param fn
   */;
  _proto.onChangeNodeChildren = function onChangeNodeChildren(fn) {
    return this[documentSymbol].onChangeNodeChildren(function (info) {
      if (!info) {
        return;
      }
      fn({
        type: info.type,
        node: ShellNode.create(info.node)
      });
    });
  }

  /**
   * 当前 document 节点属性修改事件
   * @param fn
   */;
  _proto.onChangeNodeProp = function onChangeNodeProp(fn) {
    var _this = this;
    var callback = function callback(info) {
      fn({
        key: info.key,
        oldValue: info.oldValue,
        newValue: info.newValue,
        prop: ShellProp.create(info.prop),
        node: ShellNode.create(info.node)
      });
    };
    this[editorSymbol].on(GlobalEvent.Node.Prop.InnerChange, callback);
    return function () {
      _this[editorSymbol].off(GlobalEvent.Node.Prop.InnerChange, callback);
    };
  }

  /**
   * import schema event
   * @param fn
   */;
  _proto.onImportSchema = function onImportSchema(fn) {
    return this[editorSymbol].eventBus.on('shell.document.importSchema', fn);
  };
  _proto.isDetectingNode = function isDetectingNode(node) {
    return this.detecting.current === node;
  };
  _proto.onFocusNodeChanged = function onFocusNodeChanged(fn) {
    if (!fn) {
      return function () {};
    }
    return this[editorSymbol].eventBus.on('shell.document.focusNodeChanged', function (payload) {
      var document = payload.document,
        focusNode = payload.focusNode;
      fn(document, focusNode);
    });
  };
  _proto.onDropLocationChanged = function onDropLocationChanged(fn) {
    if (!fn) {
      return function () {};
    }
    return this[editorSymbol].eventBus.on('document.dropLocation.changed', function (payload) {
      var document = payload.document;
      fn(document);
    });
  };
  _createClass(DocumentModel, [{
    key: "id",
    get: function get() {
      return this[documentSymbol].id;
    },
    set: function set(id) {
      this[documentSymbol].id = id;
    }

    /**
     * 获取当前文档所属的 project
     * @returns
     */
  }, {
    key: "project",
    get: function get() {
      return ShellProject.create(this[documentSymbol].project, true);
    }

    /**
     * 获取文档的根节点
     * root node of this documentModel
     * @returns
     */
  }, {
    key: "root",
    get: function get() {
      return ShellNode.create(this[documentSymbol].rootNode);
    }
  }, {
    key: "focusNode",
    get: function get() {
      return this._focusNode || this.root;
    },
    set: function set(node) {
      this._focusNode = node;
      this[editorSymbol].eventBus.emit('shell.document.focusNodeChanged', {
        document: this,
        focusNode: node
      });
    }

    /**
     * 获取文档下所有节点 Map, key 为 nodeId
     * get map of all nodes , using node.id as key
     */
  }, {
    key: "nodesMap",
    get: function get() {
      var map = new Map();
      for (var _iterator = _createForOfIteratorHelperLoose(this[documentSymbol].nodesMap.keys()), _step; !(_step = _iterator()).done;) {
        var id = _step.value;
        map.set(id, this.getNodeById(id));
      }
      return map;
    }

    /**
     * 模态节点管理
     */
  }, {
    key: "modalNodesManager",
    get: function get() {
      return ModalNodesManager.create(this[documentSymbol].modalNodesManager);
    }
  }, {
    key: "dropLocation",
    get: function get() {
      return ShellDropLocation.create(this[documentSymbol].dropLocation);
    },
    set: function set(loc) {
      this[documentSymbol].dropLocation = loc;
    }
  }]);
  return DocumentModel;
}();