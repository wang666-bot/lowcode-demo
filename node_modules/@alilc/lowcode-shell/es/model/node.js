import _createClass from "@babel/runtime/helpers/createClass";
import { IPublicEnumTransformStage } from '@alilc/lowcode-types';
import { Prop as ShellProp } from './prop';
import { Props as ShellProps } from './props';
import { DocumentModel as ShellDocumentModel } from './document-model';
import { NodeChildren as ShellNodeChildren } from './node-children';
import { ComponentMeta as ShellComponentMeta } from './component-meta';
import { SettingTopEntry as ShellSettingTopEntry } from './setting-top-entry';
import { documentSymbol, nodeSymbol } from '../symbols';
import { ConditionGroup } from './condition-group';
var shellNodeSymbol = Symbol('shellNodeSymbol');
function isShellNode(node) {
  return node[shellNodeSymbol];
}
export var Node = /*#__PURE__*/function () {
  function Node(node) {
    this[documentSymbol] = void 0;
    this[nodeSymbol] = void 0;
    this._id = void 0;
    /**
     * judge if it is a node or not
     */
    this.isNode = true;
    this[nodeSymbol] = node;
    this[documentSymbol] = node.document;
    this._id = this[nodeSymbol].id;
  }
  Node.create = function create(node) {
    if (!node) {
      return null;
    }
    // @ts-ignore 直接返回已挂载的 shell node 实例
    if (isShellNode(node)) {
      return node[shellNodeSymbol];
    }
    var shellNode = new Node(node);
    // @ts-ignore 挂载 shell node 实例
    // eslint-disable-next-line no-param-reassign
    node[shellNodeSymbol] = shellNode;
    return shellNode;
  }

  /**
   * @deprecated use .children instead
   */;
  var _proto = Node.prototype;
  _proto.getChildren = function getChildren() {
    return this.children;
  }

  /**
   * 获取节点实例对应的 dom 节点
   */;
  _proto.getDOMNode = function getDOMNode() {
    return this[nodeSymbol].getDOMNode();
  }

  /**
   * 执行新增、删除、排序等操作
   * @param remover
   * @param adder
   * @param sorter
   */;
  _proto.mergeChildren = function mergeChildren(remover, adder, sorter) {
    var _this$children;
    return (_this$children = this.children) === null || _this$children === void 0 ? void 0 : _this$children.mergeChildren(remover, adder, sorter);
  }

  /**
   * 返回节点的尺寸、位置信息
   * @returns
   */;
  _proto.getRect = function getRect() {
    return this[nodeSymbol].getRect();
  }

  /**
   * 是否有挂载插槽节点
   * @returns
   */;
  _proto.hasSlots = function hasSlots() {
    return this[nodeSymbol].hasSlots();
  }

  /**
   * 是否设定了渲染条件
   * @returns
   */;
  _proto.hasCondition = function hasCondition() {
    return this[nodeSymbol].hasCondition();
  }

  /**
   * 是否设定了循环数据
   * @returns
   */;
  _proto.hasLoop = function hasLoop() {
    return this[nodeSymbol].hasLoop();
  };
  _proto.getVisible = function getVisible() {
    return this[nodeSymbol].getVisible();
  };
  _proto.setVisible = function setVisible(flag) {
    this[nodeSymbol].setVisible(flag);
  };
  _proto.isConditionalVisible = function isConditionalVisible() {
    return this[nodeSymbol].isConditionalVisible();
  }

  /**
   * 设置节点锁定状态
   * @param flag
   */;
  _proto.lock = function lock(flag) {
    this[nodeSymbol].lock(flag);
  }

  /**
   * @deprecated use .props instead
   */;
  _proto.getProps = function getProps() {
    return this.props;
  };
  _proto.contains = function contains(node) {
    return this[nodeSymbol].contains(node[nodeSymbol]);
  }

  /**
   * 获取指定 path 的属性模型实例
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @returns
   */;
  _proto.getProp = function getProp(path, createIfNone) {
    if (createIfNone === void 0) {
      createIfNone = true;
    }
    return ShellProp.create(this[nodeSymbol].getProp(path, createIfNone));
  }

  /**
   * 获取指定 path 的属性模型实例值
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @returns
   */;
  _proto.getPropValue = function getPropValue(path) {
    var _this$getProp;
    return (_this$getProp = this.getProp(path, false)) === null || _this$getProp === void 0 ? void 0 : _this$getProp.getValue();
  }

  /**
   * 获取指定 path 的属性模型实例，
   *  注：导出时，不同于普通属性，该属性并不挂载在 props 之下，而是与 props 同级
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @param createIfNone 当没有属性的时候，是否创建一个属性
   * @returns
   */;
  _proto.getExtraProp = function getExtraProp(path, createIfNone) {
    return ShellProp.create(this[nodeSymbol].getExtraProp(path, createIfNone));
  }

  /**
   * 获取指定 path 的属性模型实例，
   *  注：导出时，不同于普通属性，该属性并不挂载在 props 之下，而是与 props 同级
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @returns
   */;
  _proto.getExtraPropValue = function getExtraPropValue(path) {
    var _this$getExtraProp;
    return (_this$getExtraProp = this.getExtraProp(path)) === null || _this$getExtraProp === void 0 ? void 0 : _this$getExtraProp.getValue();
  }

  /**
   * 设置指定 path 的属性模型实例值
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @param value 值
   * @returns
   */;
  _proto.setPropValue = function setPropValue(path, value) {
    var _this$getProp2;
    return (_this$getProp2 = this.getProp(path)) === null || _this$getProp2 === void 0 ? void 0 : _this$getProp2.setValue(value);
  }

  /**
   * 设置指定 path 的属性模型实例值
   * @param path 属性路径，支持 a / a.b / a.0 等格式
   * @param value 值
   * @returns
   */;
  _proto.setExtraPropValue = function setExtraPropValue(path, value) {
    var _this$getExtraProp2;
    return (_this$getExtraProp2 = this.getExtraProp(path)) === null || _this$getExtraProp2 === void 0 ? void 0 : _this$getExtraProp2.setValue(value);
  }

  /**
   * 导入节点数据
   * @param data
   */;
  _proto.importSchema = function importSchema(data) {
    this[nodeSymbol]["import"](data);
  }

  /**
   * 导出节点数据
   * @param stage
   * @param options
   * @returns
   */;
  _proto.exportSchema = function exportSchema(stage, options) {
    if (stage === void 0) {
      stage = IPublicEnumTransformStage.Render;
    }
    return this[nodeSymbol]["export"](stage, options);
  }

  /**
   * 在指定位置之前插入一个节点
   * @param node
   * @param ref
   * @param useMutator
   */;
  _proto.insertBefore = function insertBefore(node, ref, useMutator) {
    this[nodeSymbol].insertBefore(node[nodeSymbol] || node, ref === null || ref === void 0 ? void 0 : ref[nodeSymbol], useMutator);
  }

  /**
   * 在指定位置之后插入一个节点
   * @param node
   * @param ref
   * @param useMutator
   */;
  _proto.insertAfter = function insertAfter(node, ref, useMutator) {
    this[nodeSymbol].insertAfter(node[nodeSymbol] || node, ref === null || ref === void 0 ? void 0 : ref[nodeSymbol], useMutator);
  }

  /**
   * 替换指定节点
   * @param node 待替换的子节点
   * @param data 用作替换的节点对象或者节点描述
   * @returns
   */;
  _proto.replaceChild = function replaceChild(node, data) {
    return Node.create(this[nodeSymbol].replaceChild(node[nodeSymbol], data));
  }

  /**
   * 将当前节点替换成指定节点描述
   * @param schema
   */;
  _proto.replaceWith = function replaceWith(schema) {
    this[nodeSymbol].replaceWith(schema);
  }

  /**
   * 选中当前节点实例
   */;
  _proto.select = function select() {
    this[nodeSymbol].select();
  }

  /**
   * 设置悬停态
   * @param flag
   */;
  _proto.hover = function hover(flag) {
    if (flag === void 0) {
      flag = true;
    }
    this[nodeSymbol].hover(flag);
  }

  /**
   * 删除当前节点实例
   */;
  _proto.remove = function remove() {
    this[nodeSymbol].remove();
  }

  /**
   * @deprecated
   * 设置为磁贴布局节点
   */;
  _proto.internalToShellNode = function internalToShellNode() {
    return this;
  };
  _proto.canPerformAction = function canPerformAction(actionName) {
    return this[nodeSymbol].canPerformAction(actionName);
  }

  /**
   * get conditionGroup
   * @since v1.1.0
   */;
  /**
   * set value for conditionalVisible
   * @since v1.1.0
   */
  _proto.setConditionalVisible = function setConditionalVisible() {
    this[nodeSymbol].setConditionalVisible();
  };
  _proto.getRGL = function getRGL() {
    var _this$nodeSymbol$getR = this[nodeSymbol].getRGL(),
      isContainerNode = _this$nodeSymbol$getR.isContainerNode,
      isEmptyNode = _this$nodeSymbol$getR.isEmptyNode,
      isRGLContainerNode = _this$nodeSymbol$getR.isRGLContainerNode,
      isRGLNode = _this$nodeSymbol$getR.isRGLNode,
      isRGL = _this$nodeSymbol$getR.isRGL,
      rglNode = _this$nodeSymbol$getR.rglNode;
    return {
      isContainerNode: isContainerNode,
      isEmptyNode: isEmptyNode,
      isRGLContainerNode: isRGLContainerNode,
      isRGLNode: isRGLNode,
      isRGL: isRGL,
      rglNode: Node.create(rglNode)
    };
  };
  _createClass(Node, [{
    key: "id",
    get:
    /**
     * 节点 id
     */
    function get() {
      return this._id;
    }

    /**
     * set id
     */,
    set: function set(id) {
      this._id = id;
    }

    /**
     * 节点标题
     */
  }, {
    key: "title",
    get: function get() {
      return this[nodeSymbol].title;
    }

    /**
     * @deprecated
     * 是否为「容器型」节点
     */
  }, {
    key: "isContainer",
    get: function get() {
      return this[nodeSymbol].isContainerNode;
    }

    /**
     * 是否为「容器型」节点
     */
  }, {
    key: "isContainerNode",
    get: function get() {
      return this[nodeSymbol].isContainerNode;
    }

    /**
     * @deprecated
     * 是否为根节点
     */
  }, {
    key: "isRoot",
    get: function get() {
      return this[nodeSymbol].isRootNode;
    }

    /**
     * 是否为根节点
     */
  }, {
    key: "isRootNode",
    get: function get() {
      return this[nodeSymbol].isRootNode;
    }

    /**
     * @deprecated
     * 是否为空节点（无 children 或者 children 为空）
     */
  }, {
    key: "isEmpty",
    get: function get() {
      return this[nodeSymbol].isEmptyNode;
    }

    /**
     * 是否为空节点（无 children 或者 children 为空）
     */
  }, {
    key: "isEmptyNode",
    get: function get() {
      return this[nodeSymbol].isEmptyNode;
    }

    /**
     * @deprecated
     * 是否为 Page 节点
     */
  }, {
    key: "isPage",
    get: function get() {
      return this[nodeSymbol].isPageNode;
    }

    /**
     * 是否为 Page 节点
     */
  }, {
    key: "isPageNode",
    get: function get() {
      return this[nodeSymbol].isPageNode;
    }

    /**
     * @deprecated
     * 是否为 Component 节点
     */
  }, {
    key: "isComponent",
    get: function get() {
      return this[nodeSymbol].isComponentNode;
    }

    /**
     * 是否为 Component 节点
     */
  }, {
    key: "isComponentNode",
    get: function get() {
      return this[nodeSymbol].isComponentNode;
    }

    /**
     * @deprecated
     * 是否为「模态框」节点
     */
  }, {
    key: "isModal",
    get: function get() {
      return this[nodeSymbol].isModalNode;
    }

    /**
     * 是否为「模态框」节点
     */
  }, {
    key: "isModalNode",
    get: function get() {
      return this[nodeSymbol].isModalNode;
    }

    /**
     * @deprecated
     * 是否为插槽节点
     */
  }, {
    key: "isSlot",
    get: function get() {
      return this[nodeSymbol].isSlotNode;
    }

    /**
     * 是否为插槽节点
     */
  }, {
    key: "isSlotNode",
    get: function get() {
      return this[nodeSymbol].isSlotNode;
    }

    /**
     * @deprecated
     * 是否为父类/分支节点
     */
  }, {
    key: "isParental",
    get: function get() {
      return this[nodeSymbol].isParentalNode;
    }

    /**
     * 是否为父类/分支节点
     */
  }, {
    key: "isParentalNode",
    get: function get() {
      return this[nodeSymbol].isParentalNode;
    }

    /**
     * @deprecated
     * 是否为叶子节点
     */
  }, {
    key: "isLeaf",
    get: function get() {
      return this[nodeSymbol].isLeafNode;
    }

    /**
     * 是否为叶子节点
     */
  }, {
    key: "isLeafNode",
    get: function get() {
      return this[nodeSymbol].isLeafNode;
    }
  }, {
    key: "isLocked",
    get:
    /**
     * 获取当前节点的锁定状态
     */
    function get() {
      return this[nodeSymbol].isLocked;
    }

    /**
     * 下标
     */
  }, {
    key: "index",
    get: function get() {
      return this[nodeSymbol].index;
    }

    /**
     * 图标
     */
  }, {
    key: "icon",
    get: function get() {
      return this[nodeSymbol].icon;
    }

    /**
     * 节点所在树的层级深度，根节点深度为 0
     */
  }, {
    key: "zLevel",
    get: function get() {
      return this[nodeSymbol].zLevel;
    }

    /**
     * 节点 componentName
     */
  }, {
    key: "componentName",
    get: function get() {
      return this[nodeSymbol].componentName;
    }

    /**
     * 节点的物料元数据
     */
  }, {
    key: "componentMeta",
    get: function get() {
      return ShellComponentMeta.create(this[nodeSymbol].componentMeta);
    }

    /**
     * 获取节点所属的文档模型对象
     * @returns
     */
  }, {
    key: "document",
    get: function get() {
      return ShellDocumentModel.create(this[documentSymbol]);
    }

    /**
     * 获取当前节点的前一个兄弟节点
     * @returns
     */
  }, {
    key: "prevSibling",
    get: function get() {
      return Node.create(this[nodeSymbol].prevSibling);
    }

    /**
     * 获取当前节点的后一个兄弟节点
     * @returns
     */
  }, {
    key: "nextSibling",
    get: function get() {
      return Node.create(this[nodeSymbol].nextSibling);
    }

    /**
     * 获取当前节点的父亲节点
     * @returns
     */
  }, {
    key: "parent",
    get: function get() {
      return Node.create(this[nodeSymbol].parent);
    }

    /**
     * 获取当前节点的孩子节点模型
     * @returns
     */
  }, {
    key: "children",
    get: function get() {
      return ShellNodeChildren.create(this[nodeSymbol].children);
    }

    /**
     * 节点上挂载的插槽节点们
     */
  }, {
    key: "slots",
    get: function get() {
      return this[nodeSymbol].slots.map(function (node) {
        return Node.create(node);
      });
    }

    /**
     * 当前节点为插槽节点时，返回节点对应的属性实例
     */
  }, {
    key: "slotFor",
    get: function get() {
      return ShellProp.create(this[nodeSymbol].slotFor);
    }

    /**
     * 返回节点的属性集
     */
  }, {
    key: "props",
    get: function get() {
      return ShellProps.create(this[nodeSymbol].props);
    }

    /**
     * 返回节点的属性集
     */
  }, {
    key: "propsData",
    get: function get() {
      return this[nodeSymbol].propsData;
    }

    /**
     * 获取符合搭建协议 - 节点 schema 结构
     */
  }, {
    key: "schema",
    get: function get() {
      return this[nodeSymbol].schema;
    }
  }, {
    key: "settingEntry",
    get: function get() {
      return ShellSettingTopEntry.create(this[nodeSymbol].settingEntry);
    }
  }, {
    key: "visible",
    get: function get() {
      return this[nodeSymbol].getVisible();
    },
    set: function set(value) {
      this[nodeSymbol].setVisible(value);
    }
  }, {
    key: "isRGLContainer",
    get:
    /**
     * @deprecated
     * 获取磁贴布局节点设置状态
     * @returns Boolean
     */
    function get() {
      return this[nodeSymbol].isRGLContainerNode;
    }

    /**
     * 设置为磁贴布局节点
     */,
    set: function set(flag) {
      this[nodeSymbol].isRGLContainerNode = flag;
    }
  }, {
    key: "isRGLContainerNode",
    get:
    /**
     * 获取磁贴布局节点设置状态
     * @returns Boolean
     */
    function get() {
      return this[nodeSymbol].isRGLContainerNode;
    },
    set: function set(flag) {
      this[nodeSymbol].isRGLContainerNode = flag;
    }
  }, {
    key: "conditionGroup",
    get: function get() {
      return ConditionGroup.create(this[nodeSymbol].conditionGroup);
    }
  }]);
  return Node;
}();