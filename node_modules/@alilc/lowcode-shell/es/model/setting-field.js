import _createClass from "@babel/runtime/helpers/createClass";
import { isSettingField } from '@alilc/lowcode-designer';
import { settingFieldSymbol } from '../symbols';
import { Node as ShellNode } from './node';
import { SettingTopEntry, SettingTopEntry as ShellSettingTopEntry } from './setting-top-entry';
import { ComponentMeta as ShellComponentMeta } from './component-meta';
import { isCustomView } from '@alilc/lowcode-utils';
export var SettingField = /*#__PURE__*/function () {
  function SettingField(prop) {
    this[settingFieldSymbol] = void 0;
    this[settingFieldSymbol] = prop;
  }
  SettingField.create = function create(prop) {
    return new SettingField(prop);
  }

  /**
   * 获取设置属性的 isGroup
   */;
  var _proto = SettingField.prototype;
  /**
   * 设置 key 值
   * @param key
   */
  _proto.setKey = function setKey(key) {
    this[settingFieldSymbol].setKey(key);
  }

  /**
   * @deprecated use .node instead
   */;
  _proto.getNode = function getNode() {
    return this.node;
  }

  /**
   * @deprecated use .parent instead
   */;
  _proto.getParent = function getParent() {
    return this.parent;
  }

  /**
   * 设置值
   * @param val 值
   */;
  _proto.setValue = function setValue(val, extraOptions) {
    this[settingFieldSymbol].setValue(val, false, false, extraOptions);
  }

  /**
   * 设置子级属性值
   * @param propName 子属性名
   * @param value 值
   */;
  _proto.setPropValue = function setPropValue(propName, value) {
    this[settingFieldSymbol].setPropValue(propName, value);
  }

  /**
   * 清空指定属性值
   * @param propName
   */;
  _proto.clearPropValue = function clearPropValue(propName) {
    this[settingFieldSymbol].clearPropValue(propName);
  }

  /**
   * 获取配置的默认值
   * @returns
   */;
  _proto.getDefaultValue = function getDefaultValue() {
    return this[settingFieldSymbol].getDefaultValue();
  }

  /**
   * 获取值
   * @returns
   */;
  _proto.getValue = function getValue() {
    return this[settingFieldSymbol].getValue();
  }

  /**
   * 获取子级属性值
   * @param propName 子属性名
   * @returns
   */;
  _proto.getPropValue = function getPropValue(propName) {
    return this[settingFieldSymbol].getPropValue(propName);
  }

  /**
   * 获取顶层附属属性值
   */;
  _proto.getExtraPropValue = function getExtraPropValue(propName) {
    return this[settingFieldSymbol].getExtraPropValue(propName);
  }

  /**
   * 设置顶层附属属性值
   */;
  _proto.setExtraPropValue = function setExtraPropValue(propName, value) {
    this[settingFieldSymbol].setExtraPropValue(propName, value);
  }

  /**
   * 获取设置属性集
   * @returns
   */;
  _proto.getProps = function getProps() {
    return ShellSettingTopEntry.create(this[settingFieldSymbol].getProps());
  }

  /**
   * 是否绑定了变量
   * @returns
   */;
  _proto.isUseVariable = function isUseVariable() {
    return this[settingFieldSymbol].isUseVariable();
  }

  /**
   * 设置绑定变量
   * @param flag
   */;
  _proto.setUseVariable = function setUseVariable(flag) {
    this[settingFieldSymbol].setUseVariable(flag);
  }

  /**
   * 创建一个设置 field 实例
   * @param config
   * @returns
   */;
  _proto.createField = function createField(config) {
    return SettingField.create(this[settingFieldSymbol].createField(config));
  }

  /**
   * 获取值，当为变量时，返回 mock
   * @returns
   */;
  _proto.getMockOrValue = function getMockOrValue() {
    return this[settingFieldSymbol].getMockOrValue();
  }

  /**
   * 销毁当前 field 实例
   */;
  _proto.purge = function purge() {
    this[settingFieldSymbol].purge();
  }

  /**
   * 移除当前 field 实例
   */;
  _proto.remove = function remove() {
    this[settingFieldSymbol].remove();
  }

  /**
   * 设置 autorun
   * @param action
   * @returns
   */;
  _proto.onEffect = function onEffect(action) {
    return this[settingFieldSymbol].onEffect(action);
  }

  /**
   * 返回 shell 模型，兼容某些场景下 field 已经是 shell field 了
   * @returns
   */;
  _proto.internalToShellField = function internalToShellField() {
    return this;
  };
  _createClass(SettingField, [{
    key: "isGroup",
    get: function get() {
      return this[settingFieldSymbol].isGroup;
    }

    /**
     * 获取设置属性的 id
     */
  }, {
    key: "id",
    get: function get() {
      return this[settingFieldSymbol].id;
    }

    /**
     * 获取设置属性的 name
     */
  }, {
    key: "name",
    get: function get() {
      return this[settingFieldSymbol].name;
    }

    /**
     * 获取设置属性的 key
     */
  }, {
    key: "key",
    get: function get() {
      return this[settingFieldSymbol].getKey();
    }

    /**
     * 获取设置属性的 path
     */
  }, {
    key: "path",
    get: function get() {
      return this[settingFieldSymbol].path;
    }

    /**
     * 获取设置属性的 title
     */
  }, {
    key: "title",
    get: function get() {
      return this[settingFieldSymbol].title;
    }

    /**
     * 获取设置属性的 setter
     */
  }, {
    key: "setter",
    get: function get() {
      return this[settingFieldSymbol].setter;
    }

    /**
     * 获取设置属性的 expanded
     */
  }, {
    key: "expanded",
    get: function get() {
      return this[settingFieldSymbol].expanded;
    }

    /**
     * 获取设置属性的 extraProps
     */
  }, {
    key: "extraProps",
    get: function get() {
      return this[settingFieldSymbol].extraProps;
    }
  }, {
    key: "props",
    get: function get() {
      return ShellSettingTopEntry.create(this[settingFieldSymbol].props);
    }

    /**
     * 获取设置属性对应的节点实例
     */
  }, {
    key: "node",
    get: function get() {
      return ShellNode.create(this[settingFieldSymbol].getNode());
    }

    /**
     * 获取设置属性的父设置属性
     */
  }, {
    key: "parent",
    get: function get() {
      if (isSettingField(this[settingFieldSymbol].parent)) {
        return SettingField.create(this[settingFieldSymbol].parent);
      }
      return SettingTopEntry.create(this[settingFieldSymbol].parent);
    }

    /**
     * 获取顶级设置属性
     */
  }, {
    key: "top",
    get: function get() {
      return ShellSettingTopEntry.create(this[settingFieldSymbol].top);
    }

    /**
     * 是否是 SettingField 实例
     */
  }, {
    key: "isSettingField",
    get: function get() {
      return this[settingFieldSymbol].isSettingField;
    }

    /**
     * componentMeta
     */
  }, {
    key: "componentMeta",
    get: function get() {
      return ShellComponentMeta.create(this[settingFieldSymbol].componentMeta);
    }

    /**
     * 获取设置属性的 items
     */
  }, {
    key: "items",
    get: function get() {
      var _this$settingFieldSym;
      return (_this$settingFieldSym = this[settingFieldSymbol].items) === null || _this$settingFieldSym === void 0 ? void 0 : _this$settingFieldSym.map(function (item) {
        if (isCustomView(item)) {
          return item;
        }
        return item.internalToShellField();
      });
    }
  }]);
  return SettingField;
}();