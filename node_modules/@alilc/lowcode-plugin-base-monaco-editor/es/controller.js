import _extends from "@babel/runtime/helpers/extends";
export var Controller = /*#__PURE__*/function () {
  function Controller() {
    this.methodMap = void 0;
    this.meta = void 0;
    this.methodMap = {};
    this.meta = {
      singleton: false
    };
  }
  var _proto = Controller.prototype;
  _proto.registerMethod = function registerMethod(name, fn) {
    this.methodMap[name] = fn;
  };
  _proto.call = function call(name) {
    var _this$methodMap$name, _this$methodMap;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return (_this$methodMap$name = (_this$methodMap = this.methodMap)[name]) === null || _this$methodMap$name === void 0 ? void 0 : _this$methodMap$name.call.apply(_this$methodMap$name, [_this$methodMap].concat(args));
  };
  _proto.updateMeta = function updateMeta(obj) {
    Object.assign(this.meta, obj);
  };
  _proto.getMeta = function getMeta() {
    return Object.freeze(_extends({}, this.meta));
  };
  return Controller;
}();
var CONFIGURE_KEY = '__base_monaco_editor_controller__';
var fakeWindow = window;
if (!fakeWindow[CONFIGURE_KEY]) {
  fakeWindow[CONFIGURE_KEY] = new Controller();
}
export var controller = fakeWindow[CONFIGURE_KEY];