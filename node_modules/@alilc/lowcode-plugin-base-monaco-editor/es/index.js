import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
import { useRef, useEffect, useMemo, useState } from 'react';
import classNames from 'classnames';
import { WORD_EDITOR_INITIALIZING, useEditor, INITIAL_OPTIONS } from './helper';
export * from './monaco';
export * from './controller';
var SingleMonacoEditor = function SingleMonacoEditor(props) {
  var onChange = props.onChange,
    enableOutline = props.enableOutline,
    width = props.width,
    height = props.height,
    language = props.language,
    supportFullScreen = props.supportFullScreen;
  var onChangeRef = useRef(onChange);
  var _useState = useState(false),
    isFullScreen = _useState[0],
    setIsFullScreen = _useState[1];
  var _useState2 = useState({}),
    fullScreenStyle = _useState2[0],
    setFullScreenStyle = _useState2[1];
  var _useEditor = useEditor('single', props),
    isEditorReady = _useEditor.isEditorReady,
    focused = _useEditor.focused,
    loading = _useEditor.loading,
    containerRef = _useEditor.containerRef,
    monacoRef = _useEditor.monacoRef,
    editorRef = _useEditor.editorRef,
    valueRef = _useEditor.valueRef;
  var subscriptionRef = useRef(null);
  var className = classNames('lc-code-control', props.className, {
    've-focused': focused,
    've-outline': enableOutline
  });
  var fullScreenClassName = classNames({
    'base-monaco-full-screen-icon': !isFullScreen,
    'base-monaco-full-screen-icon-cancel': isFullScreen
  });
  var style = useMemo(function () {
    return {
      width: width,
      height: height
    };
  }, [width, height]);
  useEffect(function () {
    onChangeRef.current = onChange;
  }, [onChange]);
  useEffect(function () {
    if (isEditorReady) {
      var _subscriptionRef$curr;
      var editorInstance = editorRef.current;
      (_subscriptionRef$curr = subscriptionRef.current) === null || _subscriptionRef$curr === void 0 ? void 0 : _subscriptionRef$curr.dispose();
      subscriptionRef.current = editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.onDidChangeModelContent(function (event) {
        var editorValue = editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.getModel().getValue();
        if (valueRef.current !== editorValue) {
          var _onChangeRef$current;
          (_onChangeRef$current = onChangeRef.current) === null || _onChangeRef$current === void 0 ? void 0 : _onChangeRef$current.call(onChangeRef, editorValue, event);
        }
      });
    }
  }, [editorRef, isEditorReady, subscriptionRef, valueRef]);
  useEffect(function () {
    return function () {
      var _subscriptionRef$curr2, _editorInstance$getMo, _editorRef$current;
      var editorInstance = editorRef.current;
      (_subscriptionRef$curr2 = subscriptionRef.current) === null || _subscriptionRef$curr2 === void 0 ? void 0 : _subscriptionRef$curr2.dispose();
      editorInstance === null || editorInstance === void 0 ? void 0 : (_editorInstance$getMo = editorInstance.getModel()) === null || _editorInstance$getMo === void 0 ? void 0 : _editorInstance$getMo.dispose();
      // eslint-disable-next-line react-hooks/exhaustive-deps
      (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.dispose();
    };
  }, [editorRef]);
  useEffect(function () {
    var _monacoRef$current, _editorRef$current2;
    if (!isEditorReady) {
      return;
    }
    (_monacoRef$current = monacoRef.current) === null || _monacoRef$current === void 0 ? void 0 : _monacoRef$current.editor.setModelLanguage((_editorRef$current2 = editorRef.current) === null || _editorRef$current2 === void 0 ? void 0 : _editorRef$current2.getModel(), language);
  }, [editorRef, isEditorReady, language, monacoRef]);
  var fullScreen = function fullScreen() {
    var editorInstance = editorRef.current;
    if (!isFullScreen) {
      setIsFullScreen(true);
      setFullScreenStyle({
        width: 'auto',
        height: 'auto',
        position: 'fixed',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        zIndex: 9998
      });
      // 更新小地图配置
      editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.updateOptions(_extends({}, editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.getOptions(), {
        minimap: {
          enabled: true
        }
      }));
      editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.layout();
    } else {
      setIsFullScreen(false);
      editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.updateOptions(_extends({}, editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.getOptions(), {
        minimap: {
          enabled: false
        }
      }));
      editorInstance === null || editorInstance === void 0 ? void 0 : editorInstance.layout();
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: props.style
  }, loading && /*#__PURE__*/React.createElement("span", {
    className: "loading"
  }, WORD_EDITOR_INITIALIZING), /*#__PURE__*/React.createElement("div", {
    ref: containerRef,
    className: "react-monaco-editor-container",
    style: isFullScreen ? fullScreenStyle : style
  }, supportFullScreen && /*#__PURE__*/React.createElement("div", {
    className: fullScreenClassName,
    onClick: fullScreen
  })));
};
var DiffMonacoEditor = function DiffMonacoEditor(props) {
  var enableOutline = props.enableOutline,
    width = props.width,
    height = props.height,
    language = props.language,
    original = props.original;
  var _useEditor2 = useEditor('diff', props),
    isEditorReady = _useEditor2.isEditorReady,
    focused = _useEditor2.focused,
    loading = _useEditor2.loading,
    containerRef = _useEditor2.containerRef,
    monacoRef = _useEditor2.monacoRef,
    editorRef = _useEditor2.editorRef;
  var className = classNames('lc-code-control', props.className, {
    've-focused': focused,
    've-outline': enableOutline
  });
  var style = useMemo(function () {
    return {
      width: width,
      height: height
    };
  }, [width, height]);
  useEffect(function () {
    if (!isEditorReady) {
      return;
    }
    editorRef.current.getModel().original.setValue(original !== null && original !== void 0 ? original : '');
  }, [editorRef, isEditorReady, original]);
  useEffect(function () {
    return function () {
      var _editorRef$current3, _editorRef$current3$g, _editorRef$current4, _editorRef$current4$g, _editorRef$current5;
      (_editorRef$current3 = editorRef.current) === null || _editorRef$current3 === void 0 ? void 0 : (_editorRef$current3$g = _editorRef$current3.getModel().original) === null || _editorRef$current3$g === void 0 ? void 0 : _editorRef$current3$g.dispose();
      (_editorRef$current4 = editorRef.current) === null || _editorRef$current4 === void 0 ? void 0 : (_editorRef$current4$g = _editorRef$current4.getModel().modified) === null || _editorRef$current4$g === void 0 ? void 0 : _editorRef$current4$g.dispose();
      // eslint-disable-next-line react-hooks/exhaustive-deps
      (_editorRef$current5 = editorRef.current) === null || _editorRef$current5 === void 0 ? void 0 : _editorRef$current5.dispose();
    };
  }, [editorRef]);
  useEffect(function () {
    var _editorRef$current6, _monacoRef$current2, _monacoRef$current3;
    if (!isEditorReady) {
      return;
    }
    var _editorRef$current$ge = (_editorRef$current6 = editorRef.current) === null || _editorRef$current6 === void 0 ? void 0 : _editorRef$current6.getModel(),
      originalModel = _editorRef$current$ge.original,
      modifiedModel = _editorRef$current$ge.modified;
    (_monacoRef$current2 = monacoRef.current) === null || _monacoRef$current2 === void 0 ? void 0 : _monacoRef$current2.editor.setModelLanguage(originalModel, language);
    (_monacoRef$current3 = monacoRef.current) === null || _monacoRef$current3 === void 0 ? void 0 : _monacoRef$current3.editor.setModelLanguage(modifiedModel, language);
  }, [editorRef, isEditorReady, language, monacoRef]);
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: props.style
  }, loading && /*#__PURE__*/React.createElement("span", {
    className: "loading"
  }, WORD_EDITOR_INITIALIZING), /*#__PURE__*/React.createElement("div", {
    ref: containerRef,
    className: "react-monaco-editor-container react-monaco-editor-diff-container",
    style: style
  }));
};
var DiffMonacoEditorComponent = Object.assign(DiffMonacoEditor, {
  displayName: 'DiffMonacoEditor',
  defaultProps: {
    width: '100%',
    height: 150,
    defaultValue: '',
    language: 'javascript',
    options: INITIAL_OPTIONS,
    editorDidMount: noop,
    editorWillMount: noop,
    onChange: noop,
    requireConfig: {}
  }
});
export var SingleMonacoEditorComponent = Object.assign(SingleMonacoEditor, {
  displayName: 'SingleMonacoEditor',
  defaultProps: {
    width: '100%',
    height: 150,
    defaultValue: '',
    language: 'javascript',
    options: INITIAL_OPTIONS,
    editorDidMount: noop,
    editorWillMount: noop,
    onChange: noop,
    requireConfig: {}
  },
  MonacoDiffEditor: DiffMonacoEditorComponent
});
export default SingleMonacoEditorComponent;
function noop() {}