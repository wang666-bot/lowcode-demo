"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.configure = configure;
exports.getCommonMonaco = void 0;
exports.getMonaco = getMonaco;
exports.getSingletonMonaco = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _loader = _interopRequireDefault(require("@monaco-editor/loader"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _controller = require("./controller");
//@ts-ignore

var getSingletonMonaco = function () {
  var monaco;
  var prevOptions;
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(options) {
      var hasConfig;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(!monaco || !(0, _isEqual["default"])(prevOptions, options))) {
              _context.next = 7;
              break;
            }
            hasConfig = Object.keys(options || {}).length > 0;
            _loader["default"].config(hasConfig ? options : {
              paths: {
                vs: 'https://g.alicdn.com/code/lib/monaco-editor/0.33.0/min/vs'
              }
            });
            // eslint-disable-next-line require-atomic-updates
            _context.next = 5;
            return _loader["default"].init();
          case 5:
            monaco = _context.sent;
            // eslint-disable-next-line require-atomic-updates
            prevOptions = options;
          case 7:
            return _context.abrupt("return", monaco);
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
}();
exports.getSingletonMonaco = getSingletonMonaco;
var getCommonMonaco = function getCommonMonaco(config) {
  if (config) {
    _loader["default"].config(config);
  } else {
    _loader["default"].config({
      paths: {
        vs: 'https://g.alicdn.com/code/lib/monaco-editor/0.31.1/min/vs'
      }
    });
  }
  return _loader["default"].init();
};
exports.getCommonMonaco = getCommonMonaco;
function getMonaco(config) {
  var hasConfig = Object.keys(config || {}).length > 0;
  var monacoConfig = hasConfig ? config : undefined;
  return _controller.controller.getMeta().singleton ? getSingletonMonaco(monacoConfig) : getCommonMonaco(monacoConfig);
}
function configure(config) {
  _controller.controller.updateMeta(config);
}