function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
import React, { createElement } from "react";
import Calendar from '../../calendar';
import EmbedDatePicker from '../embed-picker/date-picker';
import EmbedDateTimePicker from '../embed-picker/time-picker';
import EmbedMinutePicker from '../embed-picker/minute-picker';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { withTime } from '../utils';
import BasePicker from './base-picker';
var DatePicker = /*#__PURE__*/function (_BasePicker) {
  _inherits(DatePicker, _BasePicker);
  function DatePicker() {
    _classCallCheck(this, DatePicker);
    return _callSuper(this, DatePicker, arguments);
  }
  _createClass(DatePicker, [{
    key: "timeFormat",
    get: function get() {
      var showTime = this.props.showTime;
      return _typeof(showTime) === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
  }, {
    key: "format",
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !withTime(format) ? "".concat(format, " ").concat(this.timeFormat) : format;
    }
  }, {
    key: "renderPicker",
    value: function renderPicker() {
      var _this$props = this.props,
        showTime = _this$props.showTime,
        validRange = _this$props.validRange,
        mode = _this$props.mode,
        dateCellRender = _this$props.dateCellRender;
      if (mode === 'picker') {
        var embedPicker = null;
        if (showTime) {
          var format = showTime.format;
          if (format === 'HH:mm') {
            embedPicker = /*#__PURE__*/React.createElement(EmbedMinutePicker, {
              value: this.state.pickerValue,
              disabledDate: this.props.disabledDate,
              validRange: validRange,
              onChange: this.handleChange
            });
          } else {
            embedPicker = /*#__PURE__*/React.createElement(EmbedDateTimePicker, {
              value: this.state.pickerValue,
              disabledDate: this.props.disabledDate,
              validRange: validRange,
              onChange: this.handleChange
            });
          }
        } else {
          embedPicker = /*#__PURE__*/React.createElement(EmbedDatePicker, {
            value: this.state.pickerValue,
            disabledDate: this.props.disabledDate,
            validRange: validRange,
            onChange: this.handleChange
          });
        }
        return embedPicker;
      }
      if (showTime) {
        if (!validRange) {
          throw new Error('DatePicker with showTime must have validRange');
        }
        var _format = showTime.format;
        return /*#__PURE__*/React.createElement(Calendar, {
          ref: this.calendarRef,
          shape: "panel",
          mode: "month",
          enableYearPicker: true,
          enableTimePicker: true,
          timeFormat: _format,
          dateCellRender: dateCellRender,
          value: this.state.pickerValue,
          disabledDate: this.props.disabledDate,
          validRange: validRange,
          onSelect: this.handleChange,
          onYearPickerVisibleChange: this.handleYearPickerVisibleChange
        });
      } else {
        return /*#__PURE__*/React.createElement(Calendar, {
          ref: this.calendarRef,
          shape: "panel",
          mode: "month",
          enableYearPicker: true,
          value: this.state.pickerValue,
          dateCellRender: dateCellRender,
          disabledDate: this.props.disabledDate,
          validRange: this.props.validRange,
          onSelect: this.handleChange,
          onYearPickerVisibleChange: this.handleYearPickerVisibleChange
        });
      }
    }
  }, {
    key: "getDefaultFormat",
    value: function getDefaultFormat() {
      return '';
    }
  }]);
  return DatePicker;
}(BasePicker);
export { DatePicker as default };