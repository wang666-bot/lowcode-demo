function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
import { __awaiter, __rest } from "tslib";
import React, { Component, createElement, createRef } from "react";
import classNames from 'classnames';
import View from '../../view';
import { ItemContext } from '../../form';
import SelectDrawer from '../../select-drawer';
import Calendar from '../../calendar';
import DateTimePicker from '../embed-picker/date-time-picker';
import { withLocale } from '../../locale';
import { isFunction } from '../../utils';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { formatDate, isValidDate, toDate } from '../../utils/date';
import { withTime } from '../utils';
var RangePicker = /*#__PURE__*/function (_Component) {
  _inherits(RangePicker, _Component);
  function RangePicker(props) {
    var _this;
    _classCallCheck(this, RangePicker);
    _this = _callSuper(this, RangePicker, [props]);
    _this.calendarRef = /*#__PURE__*/createRef();
    _this.state = {
      step: 0,
      value: props.value || props.defaultValue || null,
      pickerValue: _this.getPickerValue(props),
      yearPickerVisible: false
    };
    _this.scrolling = false;
    _this.doScroll = _this.doScroll.bind(_assertThisInitialized(_this));
    _this.handleOk = _this.handleOk.bind(_assertThisInitialized(_this));
    _this.handleClear = _this.handleClear.bind(_assertThisInitialized(_this));
    _this.handleCancel = _this.handleCancel.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleVisibleChange = _this.handleVisibleChange.bind(_assertThisInitialized(_this));
    _this.handleYearPickerVisibleChange = _this.handleYearPickerVisibleChange.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(RangePicker, [{
    key: "getPickerValue",
    value: function getPickerValue(props) {
      if (this.state && this.state.value) {
        return this.state.value;
      }
      var today = new Date();
      return props.value || props.defaultValue || [today, new Date(today.getTime() + 86400000)];
    }
  }, {
    key: "handleYearPickerVisibleChange",
    value: function handleYearPickerVisibleChange(visible) {
      this.setState({
        yearPickerVisible: visible
      });
    }
  }, {
    key: "handleChange",
    value: function handleChange(pickerValue) {
      this.setState({
        pickerValue: pickerValue
      });
    }
  }, {
    key: "handleOneChange",
    value: function handleOneChange(index, value) {
      var pickerValue = index === 0 ? [value] : [this.state.pickerValue[0], value];
      this.setState({
        pickerValue: pickerValue
      });
    }
  }, {
    key: "doScroll",
    value: function doScroll(to) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this2 = this;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.scrolling || this.state.step === to)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.setState({
                step: to
              });
              this.scrolling = true;
              setTimeout(function () {
                return _this2.scrolling = false;
              }, 200);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "handleOk",
    value: function handleOk() {
      var _this$props = this.props,
        onOk = _this$props.onOk,
        showTime = _this$props.showTime,
        onChange = _this$props.onChange;
      var _this$state = this.state,
        value = _this$state.pickerValue,
        yearPickerVisible = _this$state.yearPickerVisible;
      if (yearPickerVisible && this.calendarRef.current) {
        this.calendarRef.current.toggleYearPicker(false);
        return false;
      }
      if (this.state.step === 0 && showTime) {
        this.setState({
          pickerValue: [this.state.pickerValue[0], this.state.pickerValue[0]]
        });
        this.doScroll(1);
        return false;
      }
      if (value.length === 1) {
        return false;
      }
      if (!('value' in this.props)) {
        this.setState({
          value: value
        });
      }
      if (onChange) {
        onChange(value);
      }
      if (onOk) {
        onOk(value);
      }
      return true;
    }
  }, {
    key: "handleVisibleChange",
    value: function handleVisibleChange(to) {
      var _this$props2 = this.props,
        onVisibleChange = _this$props2.onVisibleChange,
        showTime = _this$props2.showTime;
      if (onVisibleChange) {
        onVisibleChange(to);
      }
      if (to && showTime) {
        this.doScroll(0);
      }
      var yearPickerVisible = this.state.yearPickerVisible;
      if (to && yearPickerVisible) {
        this.setState({
          yearPickerVisible: false
        });
      }
    }
  }, {
    key: "handleCancel",
    value: function handleCancel(reason) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var step, _this$props3, showTime, onCancel;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              step = this.state.step;
              _this$props3 = this.props, showTime = _this$props3.showTime, onCancel = _this$props3.onCancel;
              if (!(step === 1 && showTime)) {
                _context2.next = 6;
                break;
              }
              _context2.next = 5;
              return this.doScroll(0);
            case 5:
              return _context2.abrupt("return", false);
            case 6:
              if (isFunction(onCancel)) {
                onCancel(reason);
              }
              this.setState({
                pickerValue: this.getPickerValue(this.props)
              });
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "handleClear",
    value: function handleClear() {
      var _this$props4 = this.props,
        onClear = _this$props4.onClear,
        onChange = _this$props4.onChange;
      if (!('value' in this.props)) {
        this.setState({
          value: null
        });
      }
      if (onClear) {
        onClear();
      }
      if (onChange) {
        onChange(null);
      }
    }
  }, {
    key: "timeFormat",
    get: function get() {
      var showTime = this.props.showTime;
      return _typeof(showTime) === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
  }, {
    key: "format",
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !withTime(format) ? "".concat(format, " ").concat(this.timeFormat) : format;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _a, _b;
      if ('value' in this.props) {
        var _this$props5 = this.props,
          value = _this$props5.value,
          defaultValue = _this$props5.defaultValue;
        var newValue = value || defaultValue;
        if (!newValue && this.state.value) {
          this.setState({
            value: null
          });
          return;
        }
        if (!Array.isArray(newValue) || newValue === this.state.value) {
          return;
        }
        var d1 = toDate(newValue[0]);
        var d2 = toDate(newValue[1]);
        if (!isValidDate(d1) || !isValidDate(d2)) {
          return;
        }
        var newValueDate = [d1, d2];
        if (!this.state.value) {
          this.setState({
            value: newValueDate,
            pickerValue: newValueDate
          });
          return;
        }
        if (d1.getTime() === ((_a = toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) && d2.getTime() === ((_b = toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
          return;
        }
        this.setState({
          value: newValueDate,
          pickerValue: newValueDate
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$state2 = this.state,
        value = _this$state2.value,
        step = _this$state2.step,
        _this$state2$pickerVa = _this$state2.pickerValue,
        pickerValue = _this$state2$pickerVa === void 0 ? [] : _this$state2$pickerVa,
        yearPickerVisible = _this$state2.yearPickerVisible;
      var _a = this.props,
        _a$prefix = _a.prefix,
        prefix = _a$prefix === void 0 ? 'mt-' : _a$prefix,
        iconType = _a.iconType,
        placeholder = _a.placeholder,
        alignProp = _a.align,
        sizeProp = _a.size,
        disabled = _a.disabled,
        readOnly = _a.readOnly,
        hasClear = _a.hasClear,
        showTime = _a.showTime,
        validRange = _a.validRange,
        locale = _a.locale,
        disabledDate = _a.disabledDate,
        others = __rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "showTime", "validRange", "locale", "disabledDate"]);
      if (showTime && !validRange) {
        throw new Error('DatePicker with showTime must have validRange');
      }
      var showNext = showTime && step === 0;
      var showPrev = showTime && step === 1;
      var clsPrefix = "".concat(prefix, "datepicker-");
      var nextRange = showTime && step === 1 ? [pickerValue[0], validRange[1]] : validRange;
      return /*#__PURE__*/React.createElement(ItemContext.Consumer, null, function (context) {
        var isInsideForm = context.isInsideForm,
          contentAlign = context.contentAlign,
          contextSize = context.size;
        var align = alignProp || (isInsideForm ? contentAlign : 'left');
        var size = sizeProp || (isInsideForm ? contextSize : 'medium');
        var useRangeLocale = locale ? locale.ok && locale.cancel : null;
        return /*#__PURE__*/React.createElement(SelectDrawer, _extends({}, others, {
          locale: useRangeLocale ? locale : undefined,
          prefix: prefix,
          content: value ? "".concat(formatDate(value[0], _this3.format), " - ").concat(formatDate(value[1], _this3.format)) : '',
          align: align,
          size: size,
          hasClear: hasClear,
          iconType: iconType,
          placeholder: placeholder,
          disabled: disabled,
          readOnly: readOnly,
          onOk: _this3.handleOk,
          onCancel: _this3.handleCancel,
          onClear: _this3.handleClear,
          onVisibleChange: _this3.handleVisibleChange,
          drawerTitle: showTime ? showNext && locale ? locale.selectStartTime : locale.selectEndTime : undefined,
          okText: yearPickerVisible ? locale.foldUp : showTime && showNext && locale ? locale.next : undefined,
          cancelText: showTime && showPrev && locale ? locale.prev : undefined
        }), /*#__PURE__*/React.createElement(View, {
          className: "".concat(clsPrefix, "container")
        }, showTime ? /*#__PURE__*/React.createElement(View, {
          className: classNames("".concat(clsPrefix, "range"), _defineProperty({}, "".concat(clsPrefix, "range--next"), showPrev))
        }, /*#__PURE__*/React.createElement(DateTimePicker, {
          className: "".concat(clsPrefix, "range-item"),
          showTime: showTime,
          validRange: validRange,
          value: pickerValue[0],
          disabledDate: disabledDate,
          onChange: _this3.handleOneChange.bind(_this3, 0)
        }), /*#__PURE__*/React.createElement(DateTimePicker, {
          className: "".concat(clsPrefix, "range-item"),
          showTime: showTime,
          validRange: nextRange,
          value: pickerValue[1],
          disabledDate: disabledDate,
          onChange: _this3.handleOneChange.bind(_this3, 1)
        })) : /*#__PURE__*/React.createElement(Calendar, {
          ref: _this3.calendarRef,
          prefix: prefix,
          shape: "range",
          mode: "month",
          enableYearPicker: true,
          value: pickerValue,
          disabledDate: disabledDate,
          validRange: validRange,
          onSelect: _this3.handleChange,
          onYearPickerVisibleChange: _this3.handleYearPickerVisibleChange
        })));
      });
    }
  }]);
  return RangePicker;
}(Component);
export default withLocale(RangePicker, {
  name: 'DatePicker',
  defaultLocale: {
    ok: '',
    cancel: '',
    prev: '上一步',
    next: '下一步',
    foldUp: '收起',
    selectStartTime: '选择开始时间',
    selectEndTime: '选择结束时间'
  }
});