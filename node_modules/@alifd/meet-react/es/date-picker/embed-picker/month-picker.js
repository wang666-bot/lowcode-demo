function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
import dayjs from 'dayjs';
import YearPicker from './year-picker';
import { rangeMonthOptions, rangeOptions, resetTime } from '../utils';
import { get } from '../../utils';
var MonthPicker = /*#__PURE__*/function (_YearPicker) {
  _inherits(MonthPicker, _YearPicker);
  function MonthPicker() {
    _classCallCheck(this, MonthPicker);
    return _callSuper(this, MonthPicker, arguments);
  }
  _createClass(MonthPicker, [{
    key: "getStep",
    value: function getStep() {
      return 'month';
    }
  }, {
    key: "getDisableType",
    value: function getDisableType() {
      return 'month';
    }
  }, {
    key: "getRangeCheck",
    value: function getRangeCheck() {
      return {
        date: {
          hasYear: true,
          hasMonth: true,
          hasDay: false
        }
      };
    }
  }, {
    key: "getDataSource",
    value: function getDataSource(locale) {
      var _this = this;
      var result = _get(_getPrototypeOf(MonthPicker.prototype), "getDataSource", this).call(this, locale);
      var monthLocale = get(locale, 'locale.DatePicker.month', 'æœˆ');
      var year = dayjs().year(this.value.getFullYear());
      var startOfYear = year.startOf('year');
      var endOfYear = year.endOf('year');
      var range = this.validRange || [];
      var start = dayjs(range[0] || '-');
      var end = dayjs(range[1] || '-');
      var rangeOpts = rangeOptions(1, 12, monthLocale);
      if (startOfYear.isValid() && start.isValid() && end.isValid()) {
        if (start.isBefore(startOfYear) && end.isAfter(startOfYear) && end.isBefore(endOfYear)) {
          rangeOpts = rangeMonthOptions(startOfYear, end, monthLocale);
        } else if (start.isAfter(startOfYear) && end.isBefore(endOfYear)) {
          rangeOpts = rangeMonthOptions(start, end, monthLocale);
        } else if (start.isAfter(startOfYear) && start.isBefore(endOfYear) && end.isAfter(endOfYear)) {
          rangeOpts = rangeMonthOptions(start, endOfYear, monthLocale);
        }
      }
      result.push(this.filterDataSource(rangeOpts, function (d, it) {
        resetTime(d);
        d.setDate(1);
        d.setFullYear(_this.value.getFullYear());
        d.setMonth(it.value - 1);
      }, 'month'));
      return result;
    }
  }, {
    key: "toDate",
    value: function toDate(values) {
      var d = _get(_getPrototypeOf(MonthPicker.prototype), "toDate", this).call(this, values);
      d.setMonth(values[1] - 1);
      return d;
    }
  }, {
    key: "toValues",
    value: function toValues(d) {
      var values = _get(_getPrototypeOf(MonthPicker.prototype), "toValues", this).call(this, d);
      values.push(d.getMonth() + 1);
      return values;
    }
  }]);
  return MonthPicker;
}(YearPicker);
export { MonthPicker as default };