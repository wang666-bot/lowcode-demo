function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { createElement, useEffect, useState } from "react";
import { Text } from "@alifd/meet-react-component-one";
import Button from '../../button/button';
import Drawer from '../../drawer/drawer';
import List from '../../list';
import { findInArray } from '../../utils';
import View from '../../view';
import Option from '../option';
import SafeArea from '../../safe-area';
import { removeItemFromArray } from '../util';
export default function SelectedListDrawer(props) {
  var prefix = props.prefix,
    innerValue = props.innerValue,
    locale = props.locale;
  var visible = props.visible,
    onOk = props.onOk,
    onCancel = props.onCancel;
  var clsPrefix = "".concat(prefix, "select");
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    selectedList = _useState2[0],
    setSelectedList = _useState2[1];
  var handleOk = function handleOk() {
    return onOk(selectedList);
  };
  var handleItemClick = function handleItemClick(item) {
    var isSelected = findInArray(selectedList, function (it) {
      return it.value === item.value;
    });
    if (isSelected) {
      var arr = removeItemFromArray(selectedList, item.value);
      setSelectedList(arr);
    } else {
      setSelectedList([].concat(_toConsumableArray(selectedList), [item]));
    }
  };
  useEffect(function () {
    return setSelectedList(innerValue);
  }, [innerValue]);
  return /*#__PURE__*/React.createElement(Drawer, {
    visible: visible,
    closeMode: ['mask'],
    className: "".concat(clsPrefix, "-confirm-drawer"),
    containerClassName: "".concat(clsPrefix, "-confirm-drawer-container"),
    onClose: onCancel
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-confirm-drawer-header")
  }, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-confirm-total")
  }, locale.totalPrefixText, " ", selectedList.length, " ", locale.totalSuffixText), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    model: "text",
    onClick: handleOk
  }, locale.secondaryOkText)), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-confirm-drawer-body")
  }, /*#__PURE__*/React.createElement(List, null, innerValue.map(function (item) {
    var selected = findInArray(selectedList, function (it) {
      return it.value === item.value;
    });
    return /*#__PURE__*/React.createElement(Option, {
      selected: selected,
      key: item.value,
      onClick: function onClick() {
        return handleItemClick(item);
      }
    }, item.label);
  }))), /*#__PURE__*/React.createElement(SafeArea, {
    className: "".concat(clsPrefix, "-safe-area")
  }));
}
SelectedListDrawer.displayName = 'SelectedListDrawer';