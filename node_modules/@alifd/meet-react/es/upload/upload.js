import { rpx2vw4style as __rpx2vw__ } from "@alifd/babel-runtime-jsx-style-transform";
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { __awaiter, __rest } from "tslib";
import React, { createElement, forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import chooseImage from 'universal-choose-image';
import View from '../view';
import Icon from '../icon';
import Message from '../message';
import Card from './item/card';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { default as defaultRequest } from './request';
import { getWidth, isBoolean, isFunction, isStrictWechatMiniProgram, isString, isValidArray, replaceMessage } from '../utils';
import { useGuid } from '../utils/hooks';
import { chooseImageForWechat, createFileItem, UPLOAD_THROTTLE } from './utils';
import { isPromise } from '../utils/types';
var FILE_CACHAE = {};
var updateFileStatus = function updateFileStatus() {
  var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  if (!isValidArray(files)) {
    return [];
  }
  return _toConsumableArray(files).map(function (file) {
    var uid = file.uid,
      state = file.state;
    if (FILE_CACHAE[uid] === 'done' && state === 'uploading') {
      file.state = 'done';
    }
    return file;
  });
};
var Upload = function Upload(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    extraIcon = props.extraIcon,
    className = props.className,
    action = props.action,
    _props$limit = props.limit,
    limit = _props$limit === void 0 ? 1 : _props$limit,
    _props$label = props.label,
    label = _props$label === void 0 ? '' : _props$label,
    valueProp = props.value,
    defaultValue = props.defaultValue,
    dataProp = props.data,
    headers = props.headers,
    request = props.request,
    formatter = props.formatter,
    disabled = props.disabled,
    _props$cols = props.cols,
    cols = _props$cols === void 0 ? 4 : _props$cols,
    _props$size = props.size,
    size = _props$size === void 0 ? 'medium' : _props$size,
    _props$listType = props.listType,
    listType = _props$listType === void 0 ? 'card' : _props$listType,
    _props$name = props.name,
    nameProp = _props$name === void 0 ? 'file' : _props$name,
    filePicker = props.filePicker,
    withCredentials = props.withCredentials,
    fileKeyName = props.fileKeyName,
    _props$fileType = props.fileType,
    fileType = _props$fileType === void 0 ? 'image' : _props$fileType,
    _props$accept = props.accept,
    accept = _props$accept === void 0 ? 'image/*' : _props$accept,
    _props$useDataURL = props.useDataURL,
    useDataURL = _props$useDataURL === void 0 ? true : _props$useDataURL,
    _props$autoUpload = props.autoUpload,
    autoUpload = _props$autoUpload === void 0 ? true : _props$autoUpload,
    _props$hasRemove = props.hasRemove,
    hasRemove = _props$hasRemove === void 0 ? true : _props$hasRemove,
    _props$showAddButton = props.showAddButton,
    showAddButton = _props$showAddButton === void 0 ? true : _props$showAddButton,
    _props$singleLimit = props.singleLimit,
    singleLimit = _props$singleLimit === void 0 ? 9 : _props$singleLimit,
    beforeUpload = props.beforeUpload,
    afterSelect = props.afterSelect,
    onProgress = props.onProgress,
    _onSuccess = props.onSuccess,
    _onError = props.onError,
    progressProps = props.progressProps,
    onSelect = props.onSelect,
    onChange = props.onChange,
    onRemove = props.onRemove,
    onPreview = props.onPreview,
    _props$sizeType = props.sizeType,
    sizeType = _props$sizeType === void 0 ? ['original', 'compressed'] : _props$sizeType,
    _props$sourceType = props.sourceType,
    sourceType = _props$sourceType === void 0 ? ['album', 'camera'] : _props$sourceType,
    children = props.children,
    style = props.style,
    others = __rest(props, ["prefix", "extraIcon", "className", "action", "limit", "label", "value", "defaultValue", "data", "headers", "request", "formatter", "disabled", "cols", "size", "listType", "name", "filePicker", "withCredentials", "fileKeyName", "fileType", "accept", "useDataURL", "autoUpload", "hasRemove", "showAddButton", "singleLimit", "beforeUpload", "afterSelect", "onProgress", "onSuccess", "onError", "progressProps", "onSelect", "onChange", "onRemove", "onPreview", "sizeType", "sourceType", "children", "style"]);
  var name = fileKeyName || nameProp;
  var locale = useLocale('Upload', others, defaultLang.Upload);
  var _useState = useState('0px'),
    _useState2 = _slicedToArray(_useState, 2),
    itemSize = _useState2[0],
    setItemSize = _useState2[1];
  var _useState3 = useState(valueProp || defaultValue || []),
    _useState4 = _slicedToArray(_useState3, 2),
    value = _useState4[0],
    setValue = _useState4[1];
  var newestValue = useRef(value);
  var timerQueue = useRef([]);
  var uploadRef = useRef();
  var uploadId = useGuid('mtUpload');
  var uploadStyle = Object.assign({
    gridTemplateColumns: "repeat(".concat(cols, ", 1fr)")
  }, style);
  useEffect(function () {
    if (isValidArray(valueProp)) {
      valueProp.forEach(function (file) {
        if (file.state && file.uid) {
          FILE_CACHAE[file.uid] = file.state;
        }
      });
    }
    setTimeout(function () {
      (function () {
        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var width, newCardSize;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getWidth(uploadId);
              case 2:
                width = _context.sent;
                newCardSize = "calc(((".concat(width, "px - var(--upload-card-spacing)*").concat(cols - 1, " )) / ").concat(cols, ")");
                setItemSize(newCardSize);
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
      })();
    }, 200);
    return function () {
      timerQueue.current.forEach(function (x) {
        return clearInterval(x);
      });
      timerQueue.current = [];
    };
  }, []);
  var getFile = useCallback(function (uid) {
    var item = newestValue.current.find(function (it) {
      return it.uid === uid;
    });
    if (item) {
      return {
        file: item,
        index: newestValue.current.indexOf(item)
      };
    }
    return undefined;
  }, []);
  var updateFile = useCallback(function (uid, mod) {
    var gotFile = getFile(uid);
    if (!gotFile) {
      throw new Error("File id ".concat(uid, " not found"));
    }
    var file = gotFile.file,
      index = gotFile.index;
    if (mod.state) {
      FILE_CACHAE[uid] = mod.state;
    }
    var isSame = true;
    for (var k in mod) {
      if (mod.hasOwnProperty(k) && file[k] !== mod[k]) {
        isSame = false;
        break;
      }
    }
    if (isSame) {
      return file;
    }
    var newFile = Object.assign(Object.assign({}, file), mod);
    var newValue = _toConsumableArray(newestValue.current);
    newValue.splice(index, 1, newFile);
    newestValue.current = newValue;
    if (onChange) {
      onChange(newValue);
    }
    if (!('value' in props)) {
      setValue(newValue);
    }
    return newFile;
  }, [valueProp, onChange]);
  var uploadFiles = useCallback(function (files) {
    var uploadFile = function uploadFile(it) {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var uid, options, res, curFile, timer, clearTimer, complete, newProcess;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(it.state !== 'selected')) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              uid = it.uid;
              updateFile(uid, {
                state: 'pending'
              });
              options = {
                action: action,
                data: dataProp || {},
                headers: headers || {}
              };
              if (isFunction(options.data)) {
                options.data = options.data();
              }
              if (!beforeUpload) {
                _context2.next = 29;
                break;
              }
              _context2.prev = 7;
              res = beforeUpload(it, options);
              if (!isBoolean(res)) {
                _context2.next = 15;
                break;
              }
              if (!(res === false)) {
                _context2.next = 13;
                break;
              }
              updateFile(uid, {
                state: 'uploading'
              });
              return _context2.abrupt("return");
            case 13:
              _context2.next = 22;
              break;
            case 15:
              if (!isPromise(res)) {
                _context2.next = 21;
                break;
              }
              _context2.next = 18;
              return res;
            case 18:
              options = _context2.sent;
              _context2.next = 22;
              break;
            case 21:
              options = res;
            case 22:
              _context2.next = 29;
              break;
            case 24:
              _context2.prev = 24;
              _context2.t0 = _context2["catch"](7);
              updateFile(uid, {
                state: 'error'
              });
              console.error(_context2.t0);
              return _context2.abrupt("return");
            case 29:
              curFile = updateFile(uid, {
                state: 'uploading'
              });
              if (onProgress) {
                onProgress();
              }
              if (options === null || options === void 0 ? void 0 : options.action) {
                _context2.next = 36;
                break;
              }
              console.warn('Upload request failed,  action prop is required');
              curFile = updateFile(uid, {
                state: 'error'
              });
              if (_onError) {
                _onError(curFile, newestValue.current);
              }
              return _context2.abrupt("return");
            case 36:
              timer = null;
              clearTimer = function clearTimer() {
                if (timer && timerQueue.current.includes(timer)) {
                  clearInterval(timer);
                  timerQueue.current.splice(timerQueue.current.indexOf(timer), 1);
                }
                timer = null;
              };
              complete = function complete() {
                return clearTimer();
              };
              newProcess = 0;
              _context2.next = 42;
              return new Promise(function (resolve, reject) {
                var requestObj = {
                  onProgress: function onProgress(ev) {
                    if (curFile.state !== 'uploading') {
                      return;
                    }
                    if (!timer) {
                      timer = setInterval(function () {
                        if (curFile.state !== 'uploading') {
                          clearTimer();
                          return;
                        }
                        curFile = updateFile(uid, {
                          state: 'uploading',
                          percent: newProcess
                        });
                        if (newProcess === 100) {
                          clearTimer();
                        }
                      }, UPLOAD_THROTTLE);
                      timerQueue.current.push(timer);
                    }
                    newProcess = ev.percent;
                  },
                  onError: function onError(err, body) {
                    console.error('Upload request failed', err);
                    curFile = updateFile(uid, {
                      state: 'error',
                      response: body
                    });
                    if (_onError) {
                      _onError(curFile, newestValue.current);
                    }
                    resolve('error');
                    complete();
                  },
                  onSuccess: function onSuccess(res) {
                    res.status = res.statusCode;
                    if (isString(res.data)) {
                      try {
                        res.data = JSON.parse(res.data);
                      } catch (e) {}
                    }
                    var result = formatter ? formatter(res, it) : res.data;
                    if (_typeof(result) !== 'object') {
                      console.error("Expect a json object response, ".concat(result, " got"));
                      curFile = updateFile(uid, {
                        state: 'error'
                      });
                      if (_onError) {
                        _onError(curFile, newestValue.current);
                      }
                      resolve('error');
                      return;
                    }
                    var finalState = {
                      response: result,
                      percent: 100,
                      state: result.success ? 'done' : 'error'
                    };
                    if (result.success && result.url) {
                      finalState.url = result.url;
                      finalState.imgURL = result.imgURL || result.url;
                      finalState.downloadURL = result.downloadURL || result.url;
                    }
                    curFile = updateFile(uid, finalState);
                    if (finalState.state === 'done' && _onSuccess) {
                      _onSuccess(curFile, newestValue.current);
                    }
                    if (finalState.state === 'error' && _onError) {
                      _onError(curFile, newestValue.current);
                    }
                    clearTimer();
                    resolve('success');
                  },
                  fileType: fileType,
                  data: options.data,
                  filename: name,
                  file: it.file,
                  withCredentials: withCredentials,
                  action: options.action,
                  method: 'post',
                  timeout: 0,
                  headers: options.headers
                };
                if (request) {
                  request(requestObj);
                } else {
                  defaultRequest(requestObj);
                }
              });
            case 42:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[7, 24]]);
      }));
    };
    if (!isValidArray(files)) {
      return;
    }
    try {
      Promise.all(files.map(function (it) {
        return uploadFile(it);
      })).then(function () {
        var arr = updateFileStatus(newestValue.current);
        if (arr) {
          if (isFunction(onChange)) {
            onChange(arr);
          }
          if (!('value' in props)) {
            setValue(arr);
            newestValue.current = arr;
          }
        }
      });
    } catch (e) {
      console.warn('上传失败');
    }
  }, [action, dataProp, headers, beforeUpload, onProgress, formatter, _onSuccess, _onError, request]);
  var doUpload = useCallback(function () {
    return uploadFiles(newestValue.current.filter(function (it) {
      return it.state === 'selected';
    }));
  }, []);
  var doReUpload = useCallback(function (it) {
    updateFile(it.uid, {
      state: 'selected',
      percent: 0
    });
    doUpload();
  }, []);
  var handleAdd = useCallback(function () {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var file, defaultSizeType, defaultSourceType, mediaType, fileItems, newValue;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(limit <= newestValue.current.length || disabled)) {
              _context3.next = 3;
              break;
            }
            Message.notice(replaceMessage(locale.limit, {
              limit: limit
            }));
            return _context3.abrupt("return");
          case 3:
            defaultSizeType = ['original', 'compressed'];
            defaultSourceType = ['album', 'camera'];
            _context3.prev = 5;
            if (!isFunction(filePicker)) {
              _context3.next = 12;
              break;
            }
            _context3.next = 9;
            return filePicker();
          case 9:
            file = _context3.sent;
            _context3.next = 23;
            break;
          case 12:
            if (!isStrictWechatMiniProgram) {
              _context3.next = 20;
              break;
            }
            mediaType = ['video', 'image'];
            if (accept === 'image/*') {
              mediaType = ['image'];
            } else if (accept === 'video/*') {
              mediaType = ['video'];
            }
            _context3.next = 17;
            return chooseImageForWechat({
              count: Math.min(singleLimit, limit - newestValue.current.length),
              mediaType: mediaType,
              sizeType: sizeType || defaultSizeType,
              sourceType: sourceType || defaultSourceType
            });
          case 17:
            file = _context3.sent;
            _context3.next = 23;
            break;
          case 20:
            _context3.next = 22;
            return chooseImage({
              count: Math.min(singleLimit, limit - newestValue.current.length),
              accept: accept,
              sizeType: sizeType || defaultSizeType,
              sourceType: sourceType || defaultSourceType
            });
          case 22:
            file = _context3.sent;
          case 23:
            _context3.next = 28;
            break;
          case 25:
            _context3.prev = 25;
            _context3.t0 = _context3["catch"](5);
            console.error(_context3.t0);
          case 28:
            if (!(!file || !Array.isArray(file === null || file === void 0 ? void 0 : file.data))) {
              _context3.next = 30;
              break;
            }
            return _context3.abrupt("return");
          case 30:
            fileItems = file.data.map(function (it, index) {
              return createFileItem(it, file.files ? file.files[index] : null);
            });
            if (afterSelect) {
              fileItems = fileItems.filter(function (it) {
                return afterSelect(it) !== false;
              });
            }
            if (useDataURL) {
              fileItems.forEach(function (it) {
                if (it.dataURL && it.isImage) {
                  it.imgURL = it.dataURL;
                }
              });
            }
            if (onSelect) {
              onSelect();
            }
            newValue = [].concat(_toConsumableArray(newestValue.current), _toConsumableArray(fileItems));
            if (onChange) {
              onChange(newValue);
            }
            if (!('value' in props)) {
              setValue(newValue);
              newestValue.current = newValue;
            }
            if (autoUpload) {
              doUpload();
            }
          case 38:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[5, 25]]);
    }));
  }, [limit, disabled, locale, sizeType, sourceType, afterSelect, autoUpload, onSelect, onChange]);
  var handleRemove = useCallback(function (file) {
    var doRemove = function doRemove() {
      var index = newestValue.current.indexOf(file);
      if (index === -1) {
        return;
      }
      var newValue = _toConsumableArray(newestValue.current);
      newValue.splice(index, 1);
      if (onChange) {
        onChange(newValue);
      }
      if (!('value' in props)) {
        setValue(newValue);
        newestValue.current = newValue;
      }
    };
    if (!onRemove) {
      doRemove();
      return;
    }
    var result = onRemove(file);
    if (isBoolean(result)) {
      if (result === true) {
        doRemove();
      }
      return;
    }
    if (isPromise(result)) {
      result.then(function (should) {
        return should && doRemove();
      })["catch"](function () {});
    }
  }, [onChange, onRemove]);
  var handleItemClick = useCallback(function (file, e) {
    if (onPreview) {
      onPreview(file, Object.assign(Object.assign({}, e), {
        fileList: value
      }));
    }
  }, [onPreview]);
  useEffect(function () {
    if ('value' in props) {
      newestValue.current = updateFileStatus(valueProp || defaultValue || []);
      setValue(newestValue.current);
      if (autoUpload) {
        doUpload();
      }
    }
  }, [valueProp]);
  useImperativeHandle(ref, function () {
    return Object.assign(uploadRef.current, {
      add: handleAdd,
      upload: doUpload,
      getInstance: function getInstance() {
        return {
          startUpload: doUpload
        };
      }
    });
  });
  var clsPrefix = "".concat(prefix, "upload");
  var hasAdd = showAddButton && limit > value.length && !disabled;
  var ItemComponent = Card;
  return /*#__PURE__*/React.createElement(View, {
    id: uploadId,
    ref: uploadRef
  }, label || extraIcon ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-header")
  }, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-label ").concat(clsPrefix, "-label--").concat(size)
  }, label), extraIcon ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-extra")
  }, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-counter")
  }, value.length || 0, "/", limit), /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(clsPrefix, "-extra-icon"),
    size: size,
    onClick: handleAdd,
    name: extraIcon
  })) : null) : null, /*#__PURE__*/React.createElement(View, _extends({
    className: classNames(clsPrefix, "".concat(clsPrefix, "--").concat(listType), className),
    style: __rpx2vw__(uploadStyle)
  }, others), value.map(function (file) {
    return /*#__PURE__*/React.createElement(ItemComponent, {
      key: file.uid,
      file: file,
      prefix: clsPrefix,
      progressProps: progressProps,
      onClick: handleItemClick,
      reUpload: locale.reupload,
      onReUpload: doReUpload,
      hasRemove: hasRemove && !disabled,
      onRemove: handleRemove,
      style: __rpx2vw__({
        width: "".concat(itemSize),
        height: "".concat(itemSize)
      })
    });
  }), hasAdd && /*#__PURE__*/React.createElement(View, {
    className: classNames("".concat(clsPrefix, "-item"), "".concat(clsPrefix, "-item--add"), "".concat(clsPrefix, "-item--").concat(listType)),
    onClick: handleAdd,
    style: __rpx2vw__({
      width: "".concat(itemSize),
      height: "".concat(itemSize)
    })
  }, children ? children : /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(clsPrefix, "-item-icon"),
    name: "add"
  }))));
};
Upload.displayName = 'Upload';
export default /*#__PURE__*/forwardRef(Upload);