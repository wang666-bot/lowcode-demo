function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { createElement, forwardRef, Fragment, useImperativeHandle, useState } from "react";
import dayjs from 'dayjs';
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import View from '../view';
import Icon from '../icon';
import Button from '../button';
import { EmbedMonthPicker, EmbedYearPicker } from '../date-picker';
import { HeaderType } from './types';
import { formatNumber, updateMonth, updateWeek, updateYear } from './utils';
var formatTitle = function formatTitle(date, mode) {
  if (!date) {
    return '';
  }
  var year = date.getFullYear();
  var month = date.getMonth() + 1;
  if (mode === 'month' || mode === 'week') {
    return "".concat(formatNumber(year), ".").concat(formatNumber(month));
  }
  return formatNumber(year);
};
var CalendarHeader = function CalendarHeader(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    date = props.date,
    mode = props.mode,
    type = props.type,
    maxDate = props.maxDate,
    minDate = props.minDate,
    _props$enableYearPick = props.enableYearPicker,
    enableYearPickerProp = _props$enableYearPick === void 0 ? false : _props$enableYearPick,
    enableTimePicker = props.enableTimePicker,
    disabledDate = props.disabledDate,
    renderHeadLeft = props.renderHeadLeft,
    renderHeadRight = props.renderHeadRight,
    locale = props.locale,
    _props$onDateChange = props.onDateChange,
    onDateChange = _props$onDateChange === void 0 ? function () {} : _props$onDateChange,
    _props$onModeChange = props.onModeChange,
    onModeChange = _props$onModeChange === void 0 ? function () {} : _props$onModeChange,
    _props$onPickerShow = props.onPickerShow,
    onPickerShow = _props$onPickerShow === void 0 ? function () {} : _props$onPickerShow;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    showPicker = _useState2[0],
    setShowPicker = _useState2[1];
  var enableYearPicker = type === HeaderType.select || enableYearPickerProp;
  var datePickerProps = {
    value: date,
    disabledDate: disabledDate,
    onChange: function onChange(v) {
      var d = dayjs(v);
      var y = d.get('year');
      var m = d.get('month');
      var newDate = dayjs().year(y).month(m).date(1);
      onDateChange(newDate.toDate(), false, 'picker');
    }
  };
  var clsPrefix = "".concat(prefix, "calendar");
  var clses = {
    picker: classNames(_defineProperty(_defineProperty({}, "".concat(clsPrefix, "-header-picker"), !enableTimePicker), "".concat(clsPrefix, "-header-picker--with-time"), enableTimePicker))
  };
  var togglePicker = function togglePicker(show) {
    if (!enableYearPicker) {
      return;
    }
    if (showPicker !== show) {
      setShowPicker(show);
      if (onPickerShow) {
        onPickerShow(show);
      }
    }
  };
  useImperativeHandle(ref, function () {
    return {
      togglePicker: togglePicker
    };
  });
  var handleTogglePicker = function handleTogglePicker() {
    var nextState = !showPicker;
    togglePicker(nextState);
  };
  var renderSelectedHeader = function renderSelectedHeader() {
    var headPrefix = "".concat(prefix, "calendar-header");
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(View, {
      className: classNames("".concat(headPrefix), "".concat(headPrefix, "-select"))
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(headPrefix, "-select-title-container ").concat(headPrefix, "-select-title-container-").concat(mode),
      onClick: handleTogglePicker
    }, /*#__PURE__*/React.createElement(Text, {
      className: classNames("".concat(headPrefix, "-select-title"), _defineProperty({}, "".concat(headPrefix, "-select-title--highlight"), showPicker))
    }, dayjs(date).format(mode === 'year' ? 'YYYY' : 'YYYY.MM')), /*#__PURE__*/React.createElement(Icon, {
      name: "arrow-down",
      size: "xs",
      className: showPicker ? "".concat(prefix, "calendar-header-arrow-up") : "".concat(prefix, "calendar-header-arrow")
    })), /*#__PURE__*/React.createElement(View, {
      className: "".concat(headPrefix, "-select-button-container")
    }, /*#__PURE__*/React.createElement(Button.Group, {
      size: "small"
    }, /*#__PURE__*/React.createElement(Button, {
      disabled: enableYearPicker && showPicker,
      type: mode === 'month' ? 'primary' : 'normal',
      onClick: function onClick() {
        if (onModeChange) {
          onModeChange('month');
        }
      }
    }, locale && locale.month || '月'), /*#__PURE__*/React.createElement(Button, {
      disabled: enableYearPicker && showPicker,
      type: mode === 'year' ? 'primary' : 'normal',
      onClick: function onClick() {
        if (onModeChange) {
          onModeChange('year');
        }
      }
    }, locale && locale.year || '年')))), showPicker ? /*#__PURE__*/React.createElement(EmbedMonthPicker, _extends({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps)) : null);
  };
  var renderNormalHeader = function renderNormalHeader() {
    var headPrefix = "".concat(prefix, "calendar-header");
    var leftYearIcon = null;
    var rightYearIcon = null;
    if (!enableYearPickerProp) {
      leftYearIcon = /*#__PURE__*/React.createElement(Icon, {
        className: classNames("".concat(headPrefix, "-normal-icon double"), _defineProperty({}, "".concat(headPrefix, "-normal-icon-disabled"), showPicker)),
        name: "arrow-double-left",
        onClick: function onClick() {
          if (showPicker) {
            return;
          }
          if (onDateChange) {
            if (mode !== 'week') {
              onDateChange(updateYear(date, false, maxDate, minDate), false, 'year');
            } else {
              onDateChange(updateMonth(date, false, maxDate, minDate), false, 'month');
            }
          }
        }
      });
      rightYearIcon = /*#__PURE__*/React.createElement(Icon, {
        className: classNames("".concat(headPrefix, "-normal-icon double"), _defineProperty({}, "".concat(headPrefix, "-normal-icon-disabled"), showPicker)),
        name: "arrow-double-right",
        onClick: function onClick() {
          if (showPicker) {
            return;
          }
          if (onDateChange) {
            if (mode !== 'week') {
              onDateChange(updateYear(date, true, maxDate, minDate), true, 'year');
            } else {
              onDateChange(updateMonth(date, true, maxDate, minDate), true, 'month');
            }
          }
        }
      });
    }
    if (renderHeadLeft) {
      leftYearIcon = renderHeadLeft();
    }
    if (renderHeadRight) {
      rightYearIcon = renderHeadRight();
    }
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(View, {
      className: classNames("".concat(headPrefix), "".concat(headPrefix, "-normal"), _defineProperty({}, "".concat(headPrefix, "-normal--highlighted"), showPicker))
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(headPrefix, "-normal-left-container")
    }, leftYearIcon, /*#__PURE__*/React.createElement(Icon, {
      className: classNames("".concat(headPrefix, "-normal-icon"), _defineProperty(_defineProperty({}, "".concat(headPrefix, "-normal-icon-disabled"), showPicker), "".concat(headPrefix, "-normal-icon--only"), !leftYearIcon)),
      name: "arrow-left",
      onClick: function onClick() {
        if (showPicker) {
          return;
        }
        if (onDateChange) {
          if (mode !== 'week') {
            onDateChange(updateMonth(date, false, maxDate, minDate), false, 'month');
          } else {
            onDateChange(updateWeek(date, false, maxDate, minDate), false, 'week');
          }
        }
      }
    })), /*#__PURE__*/React.createElement(View, {
      className: "".concat(headPrefix, "-normal-title-text-wrapper"),
      onClick: handleTogglePicker
    }, /*#__PURE__*/React.createElement(Text, {
      className: classNames("".concat(headPrefix, "-normal-title-text"), _defineProperty({}, "".concat(headPrefix, "-normal-title-text--highlighted"), showPicker)),
      onClick: function onClick() {}
    }, showPicker ? formatTitle(date, mode) : formatTitle(date, mode)), enableYearPicker ? /*#__PURE__*/React.createElement(Icon, {
      name: "arrow-down",
      size: "xs",
      className: showPicker ? "".concat(prefix, "calendar-header-arrow-up") : "".concat(prefix, "calendar-header-arrow")
    }) : null), /*#__PURE__*/React.createElement(View, {
      className: "".concat(headPrefix, "-normal-right-container")
    }, /*#__PURE__*/React.createElement(Icon, {
      className: classNames("".concat(headPrefix, "-normal-icon"), _defineProperty(_defineProperty({}, "".concat(headPrefix, "-normal-icon-disabled"), showPicker), "".concat(headPrefix, "-normal-icon--only"), !rightYearIcon)),
      name: "arrow-right",
      onClick: function onClick() {
        if (showPicker) {
          return;
        }
        if (onDateChange) {
          if (mode !== 'week') {
            onDateChange(updateMonth(date, true, maxDate, minDate), true, 'month');
          } else {
            onDateChange(updateWeek(date, true, maxDate, minDate), true, 'week');
          }
        }
      }
    }), rightYearIcon)), showPicker ? /*#__PURE__*/React.createElement(Fragment, null, mode === 'year' ? /*#__PURE__*/React.createElement(EmbedYearPicker, _extends({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps)) : /*#__PURE__*/React.createElement(EmbedMonthPicker, _extends({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps))) : null);
  };
  return type === HeaderType.select ? renderSelectedHeader() : renderNormalHeader();
};
export default /*#__PURE__*/forwardRef(CalendarHeader);