function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import { __rest } from "tslib";
import { screenRate } from './env';
import React, { Children } from "react";
import { findInArray } from './fp';
export function makeChain() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function chainedFunction() {
    var i = 0;
    var j = fns.length;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    for (; i < j; i++) {
      if (fns[i] && fns[i].apply) {
        fns[i].apply(this, args);
      }
    }
  };
}
export function px2rpx(val) {
  return val / screenRate;
}
export function stopPropagation(e) {
  if (!e) {
    return;
  }
  if (e.stopPropagation) {
    e.stopPropagation();
    return;
  }
  if (_typeof(e.originalEvent) === 'object' && e.originalEvent.stopPropagation) {
    e.originalEvent.stopPropagation();
  }
}
export function getDataSourceFromChildren(children) {
  if (!children) {
    return [];
  }
  return Children.map(children, function (child) {
    var _a = child.props,
      value = _a.value,
      text = _a.text,
      childText = _a.children,
      rest = __rest(_a, ["value", "text", "children"]);
    return Object.assign({
      value: value,
      label: childText || text
    }, rest);
  });
}
export function getDataSource(dataSource, children) {
  var ds = dataSource;
  if (!dataSource && Children.count(children) > 0) {
    ds = getDataSourceFromChildren(children);
  }
  return ds || [];
}
export function mergeDataSource(ds1, ds2) {
  var tmpArr = [];
  ds2.forEach(function (it) {
    if ((it === null || it === void 0 ? void 0 : it.value) && !findInArray([].concat(_toConsumableArray(ds1), tmpArr), function (_it) {
      return _it.value === it.value;
    })) {
      tmpArr.push(it);
    }
  });
  return [].concat(tmpArr, _toConsumableArray(ds1));
}