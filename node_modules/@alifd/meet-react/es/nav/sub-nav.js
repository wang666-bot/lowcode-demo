function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { __rest } from "tslib";
import React, { createElement, forwardRef, Fragment, useContext, useState, Children, cloneElement, isValidElement } from "react";
import classNames from 'classnames';
import View from '../view';
import Icon from '../icon';
import NavItem from './item';
import NavContext from './context';
import { isValidArray } from '../utils';
var SubNav = function SubNav(props, ref) {
  var className = props.className,
    icon = props.icon,
    _props$label = props.label,
    label = _props$label === void 0 ? '' : _props$label,
    _props$level = props.level,
    level = _props$level === void 0 ? 1 : _props$level,
    _props$expanded = props.expanded,
    expanded = _props$expanded === void 0 ? false : _props$expanded,
    _props$itemKey = props.itemKey,
    itemKey = _props$itemKey === void 0 ? '' : _props$itemKey,
    dataSource = props.dataSource,
    children = props.children,
    others = __rest(props, ["className", "icon", "label", "level", "expanded", "itemKey", "dataSource", "children"]);
  var ctx = useContext(NavContext);
  var onItemSelect = ctx.onItemSelect,
    clsPrefix = ctx.clsPrefix,
    model = ctx.model,
    type = ctx.type,
    size = ctx.size;
  var _useState = useState(expanded),
    _useState2 = _slicedToArray(_useState, 2),
    isExpanded = _useState2[0],
    setExpanded = _useState2[1];
  var keyCounter = 0;
  var handleSelect = function handleSelect() {
    setExpanded(!isExpanded);
  };
  var renderChildrenByData = function renderChildrenByData() {
    if (!dataSource) {
      return null;
    }
    return dataSource.map(function (item) {
      var newLevel = level + 1;
      var _itemKey = item.key;
      var _icon = item.icon,
        iconUri = item.iconUri,
        _children = item.children;
      return isValidArray(_children) ? /*#__PURE__*/React.createElement(SubNav, {
        key: _itemKey,
        itemKey: _itemKey,
        icon: icon,
        iconUri: iconUri,
        label: item.label,
        level: newLevel,
        dataSource: _children
      }) : /*#__PURE__*/React.createElement(NavItem, {
        key: _itemKey,
        itemKey: _itemKey,
        level: newLevel,
        icon: _icon,
        iconUri: iconUri,
        label: item.label
      });
    });
  };
  var renderChild = function renderChild(child) {
    keyCounter++;
    var _key = child.key || "".concat(itemKey, "-").concat(keyCounter);
    if (!isValidElement(child)) {
      return null;
    }
    return cloneElement(child, {
      key: _key,
      itemKey: _key,
      size: size,
      level: level + 1,
      onItemSelect: onItemSelect
    });
  };
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(NavItem, _extends({
    ref: ref
  }, others, {
    icon: icon,
    label: label,
    level: level,
    onClick: handleSelect,
    className: classNames(className, _defineProperty({}, "".concat(clsPrefix, "--").concat(type, "-").concat(model, "-active"), isExpanded)),
    disableSelect: true,
    extra: /*#__PURE__*/React.createElement(Icon, {
      name: isExpanded ? 'arrow-up' : 'arrow-down',
      size: "s"
    })
  })), isExpanded ? /*#__PURE__*/React.createElement(View, null, dataSource ? renderChildrenByData() : Children.map(children, renderChild)) : null);
};
SubNav.displayName = 'Nav.SubNav';
export default /*#__PURE__*/forwardRef(SubNav);