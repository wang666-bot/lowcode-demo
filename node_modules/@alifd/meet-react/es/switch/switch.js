function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import { rpx2vw4style as __rpx2vw__ } from "@alifd/babel-runtime-jsx-style-transform";
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { __rest } from "tslib";
import React, { createElement, forwardRef, useEffect, useState } from "react";
import classNames from 'classnames';
import { vibrateShort } from '@uni/vibrate';
import View from '../view';
import Icon from '../icon';
import { isUndef } from '../utils';
var getCheckedState = function getCheckedState(props) {
  return isUndef(props.checked) ? !!props.defaultChecked : !!props.checked;
};
var Switch = function Switch(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    className = props.className,
    style = props.style,
    _props$size = props.size,
    size = _props$size === void 0 ? 'medium' : _props$size,
    _props$defaultChecked = props.defaultChecked,
    defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
    checked = props.checked,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    _props$readOnly = props.readOnly,
    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
    _props$loading = props.loading,
    loading = _props$loading === void 0 ? false : _props$loading,
    _props$vibrative = props.vibrative,
    vibrative = _props$vibrative === void 0 ? true : _props$vibrative,
    onChange = props.onChange,
    others = __rest(props, ["prefix", "className", "style", "size", "defaultChecked", "checked", "disabled", "readOnly", "loading", "vibrative", "onChange"]);
  var initChecked = getCheckedState(props);
  var _useState = useState(initChecked),
    _useState2 = _slicedToArray(_useState, 2),
    hasChecked = _useState2[0],
    setChecked = _useState2[1];
  var checkedPrefix = hasChecked ? '-checked' : '';
  var disabledPrefix = disabled ? '-disabled' : '';
  var switchClassNames = classNames("".concat(prefix, "switch"), "".concat(prefix, "switch--").concat(size), _defineProperty({}, "".concat(prefix, "switch-").concat(disabledPrefix).concat(checkedPrefix), hasChecked || disabled), className);
  var switchKnobClassNames = classNames("".concat(prefix, "switch-knob"), "".concat(prefix, "switch-knob--").concat(size).concat(checkedPrefix));
  var switchLoadingClassNames = classNames("".concat(prefix, "switch-knob-loading"), "".concat(prefix, "switch-knob-loading--").concat(size));
  var onSwitchTap = function onSwitchTap(e) {
    if (disabled || readOnly) {
      return;
    }
    var checkedValue = !hasChecked;
    if (vibrative) {
      vibrateShort({}).then(function () {});
    }
    if (!('checked' in props)) {
      setChecked(checkedValue);
    }
    if (onChange) {
      onChange(checkedValue, e);
    }
  };
  useEffect(function () {
    if (initChecked !== hasChecked) {
      setChecked(initChecked);
    }
  }, [checked]);
  return /*#__PURE__*/React.createElement(View, _extends({
    className: switchClassNames,
    style: __rpx2vw__(style),
    onClick: onSwitchTap
  }, others), /*#__PURE__*/React.createElement(View, {
    className: switchKnobClassNames
  }, loading ? /*#__PURE__*/React.createElement(Icon, {
    className: switchLoadingClassNames,
    name: "loading"
  }) : null));
};
Switch.displayName = 'Switch';
export default /*#__PURE__*/forwardRef(Switch);