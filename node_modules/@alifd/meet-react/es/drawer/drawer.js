function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { __rest } from "tslib";
import React, { createElement, forwardRef, useState, useEffect } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import View from '../view';
import Icon from '../icon';
import Modal from '../modal';
import { isStrictByteDanceMicroApp, isStrictWechatMiniProgram } from '../utils';
var Drawer = function Drawer(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bottom' : _props$placement,
    _props$visible = props.visible,
    visible = _props$visible === void 0 ? false : _props$visible,
    className = props.className,
    height = props.height,
    width = props.width,
    title = props.title,
    _props$titleAlign = props.titleAlign,
    titleAlign = _props$titleAlign === void 0 ? 'left' : _props$titleAlign,
    containerClassName = props.containerClassName,
    _props$closeMode = props.closeMode,
    closeMode = _props$closeMode === void 0 ? ['mask', 'close'] : _props$closeMode,
    _props$onShow = props.onShow,
    onShow = _props$onShow === void 0 ? function () {} : _props$onShow,
    _props$onClose = props.onClose,
    onClose = _props$onClose === void 0 ? function () {} : _props$onClose,
    children = props.children,
    _props$style = props.style,
    style = _props$style === void 0 ? {} : _props$style,
    others = __rest(props, ["prefix", "placement", "visible", "className", "height", "width", "title", "titleAlign", "containerClassName", "closeMode", "onShow", "onClose", "children", "style"]);
  var drawerCls = classNames("".concat(prefix, "drawer"), className, "".concat(prefix, "drawer--").concat(placement));
  var _useState = useState(visible),
    _useState2 = _slicedToArray(_useState, 2),
    drawerVisible = _useState2[0],
    setVisible = _useState2[1];
  var showCloseIcon = Array.isArray(closeMode) && closeMode.indexOf('close') > -1;
  useEffect(function () {
    if (visible && (isStrictWechatMiniProgram || isStrictByteDanceMicroApp)) {
      setTimeout(function () {
        setVisible(true);
      }, 50);
    } else {
      setVisible(visible);
    }
  }, [visible]);
  return /*#__PURE__*/React.createElement(Modal, _extends({}, others, {
    ref: ref,
    maskClosable: closeMode.indexOf('mask') > -1,
    onClose: onClose,
    visible: drawerVisible,
    placement: placement,
    className: "".concat(prefix, "drawer-modal"),
    containerClassName: drawerCls,
    containerStyle: Object.assign({
      width: width,
      height: height
    }, style)
  }), /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefix, "drawer-container")
  }, title ? /*#__PURE__*/React.createElement(Text, {
    className: classNames("".concat(prefix, "drawer-title"), _defineProperty(_defineProperty({}, "".concat(prefix, "drawer-title--center"), titleAlign === 'center'), "".concat(prefix, "drawer-title--with-icon"), titleAlign === 'left' && showCloseIcon)),
    numberOfLines: 1
  }, title) : null, showCloseIcon ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefix, "drawer-close"),
    onClick: function onClick() {
      onClose('close');
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(prefix, "drawer-close-icon"),
    name: "close"
  })) : null, /*#__PURE__*/React.createElement(View, {
    className: classNames("".concat(prefix, "drawer-body"), containerClassName)
  }, children)));
};
Drawer.displayName = 'Drawer';
export default /*#__PURE__*/forwardRef(Drawer);