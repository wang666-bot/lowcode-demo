function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import { rpx2vw4style as __rpx2vw__ } from "@alifd/babel-runtime-jsx-style-transform";
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState } from "react";
import View from '../view';
import Icon from '../icon';
import CreateChildren from './create-children';
var getInitCheckedValue = function getInitCheckedValue(props) {
  if ('checked' in props) {
    return props.checked;
  } else if (props.defaultChecked) {
    return props.defaultChecked;
  } else {
    return false;
  }
};
var SelectableTag = function SelectableTag(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    _props$size = props.size,
    size = _props$size === void 0 ? 'medium' : _props$size,
    _props$type = props.type,
    type = _props$type === void 0 ? 'normal' : _props$type,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    _props$checked = props.checked,
    checked = _props$checked === void 0 ? false : _props$checked,
    _props$defaultChecked = props.defaultChecked,
    defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
    _props$onChange = props.onChange,
    onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
    _props$style = props.style,
    style = _props$style === void 0 ? {} : _props$style,
    children = props.children,
    className = props.className,
    others = __rest(props, ["prefix", "size", "type", "disabled", "checked", "defaultChecked", "onChange", "style", "children", "className"]);
  var shape = 'selectable';
  var initCheckedValue = getInitCheckedValue(props);
  var _useState = useState(initCheckedValue),
    _useState2 = _slicedToArray(_useState, 2),
    hasChecked = _useState2[0],
    setChecked = _useState2[1];
  var textCls = "".concat(prefix, "tag-font--").concat(size);
  var iconCls = "".concat(prefix, "tag-font--").concat(size);
  var classes = {
    textCls: textCls,
    iconCls: iconCls
  };
  var cssType = type === 'normal' ? 'outline' : 'solid';
  var tagCls = classNames(className, "".concat(prefix, "tag"), "".concat(prefix, "tag--").concat(size), "".concat(prefix, "tag--").concat(shape, "-").concat(cssType), _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefix, "tag--").concat(shape, "-").concat(cssType, "-selected-disabled"), disabled && hasChecked), "".concat(prefix, "tag--").concat(shape, "-").concat(cssType, "-disabled"), disabled), "".concat(prefix, "tag--").concat(shape, "-").concat(cssType, "-selected"), hasChecked));
  var selectCls = classNames("".concat(prefix, "tag--selectable-select"));
  var selectIconCls = classNames("".concat(prefix, "tag-icon--").concat(size, "-select"), _defineProperty({}, "".concat(prefix, "tag--").concat(shape, "-").concat(cssType, "-icon-selected-disabled"), disabled && hasChecked));
  var handleClick = function handleClick(e) {
    if (disabled) {
      return;
    }
    if (onChange) {
      onChange(!hasChecked, e);
    }
    if (!('checked' in props)) {
      setChecked(!hasChecked);
    }
  };
  useEffect(function () {
    if ('checked' in props) {
      setChecked(checked);
    }
  }, [checked]);
  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    ref: ref,
    className: tagCls,
    onClick: handleClick,
    style: __rpx2vw__(props.style)
  }), CreateChildren(children, classes, prefix, size), type === 'normal' && hasChecked ? /*#__PURE__*/React.createElement(View, {
    className: selectCls,
    onChange: handleClick
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "select",
    className: selectIconCls
  })) : null);
};
SelectableTag.displayName = 'SelectableTag';
export default /*#__PURE__*/forwardRef(SelectableTag);