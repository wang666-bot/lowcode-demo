function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
import React, { Component, createElement, Fragment } from "react";
import { Portal } from "@alifd/meet-react-component-one";
import { Context as LocaleContext, LocaleProvider } from '../locale';
import { guid } from '../utils/hooks';
import { onProviderMount, onProviderUnMount } from '../utils/render';
var ConfigProvider = /*#__PURE__*/function (_Component) {
  _inherits(ConfigProvider, _Component);
  function ConfigProvider(props) {
    var _this;
    _classCallCheck(this, ConfigProvider);
    _this = _callSuper(this, ConfigProvider, [props]);
    _this.state = {
      portals: []
    };
    return _this;
  }
  _createClass(ConfigProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!this.props.disablePortal) {
        onProviderMount(this);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.disablePortal !== prevProps.disablePortal) {
        if (this.props.disablePortal) {
          onProviderUnMount();
        } else {
          onProviderMount(this);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      onProviderUnMount();
    }
  }, {
    key: "addPortal",
    value: function addPortal(item) {
      var _this2 = this;
      var id = guid('portal-');
      var arr = _toConsumableArray(this.state.portals);
      arr.push(Object.assign(Object.assign({}, item), {
        id: id
      }));
      this.setState({
        portals: arr
      });
      return function () {
        var i = _this2.state.portals.find(function (it) {
          return it.id === id;
        });
        if (i) {
          var a = _toConsumableArray(_this2.state.portals);
          a.splice(a.indexOf(i), 1);
          _this2.setState({
            portals: a
          });
          if (i.onHide) {
            i.onHide();
          }
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var portals = this.state.portals;
      var _this$props = this.props,
        locale = _this$props.locale,
        children = _this$props.children;
      return /*#__PURE__*/React.createElement(LocaleProvider, {
        locale: locale
      }, /*#__PURE__*/React.createElement(Fragment, null, portals.length > 0 && /*#__PURE__*/React.createElement(Portal, null, portals.map(function (it) {
        return /*#__PURE__*/React.createElement(Fragment, {
          key: it.id
        }, it.element);
      })), children));
    }
  }]);
  return ConfigProvider;
}(Component);
ConfigProvider.Consumer = function (_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement(LocaleContext.Consumer, null, function (_ref2) {
    var locale = _ref2.locale;
    return children ? children({
      locale: locale
    }) : null;
  });
};
export default ConfigProvider;