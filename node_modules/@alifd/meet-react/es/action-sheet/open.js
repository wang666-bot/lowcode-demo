function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
import { __rest } from "tslib";
import React, { Component, createElement } from "react";
import { renderToRoot } from '../utils/render';
import { isFunction } from '../utils';
import ActionSheet from './action-sheet';
var ActionSheetWrapper = /*#__PURE__*/function (_Component) {
  _inherits(ActionSheetWrapper, _Component);
  function ActionSheetWrapper(props) {
    var _this;
    _classCallCheck(this, ActionSheetWrapper);
    _this = _callSuper(this, ActionSheetWrapper, [props]);
    _this.handleClick = function (option, index, e) {
      if (_this.props.onClick) {
        _this.props.onClick(option, index, e);
      }
    };
    _this.handleClose = function (reason) {
      _this.setState({
        visible: false
      });
      if (_this.props.onClose) {
        _this.props.onClose(reason);
      }
    };
    _this.state = {
      visible: true
    };
    return _this;
  }
  _createClass(ActionSheetWrapper, [{
    key: "render",
    value: function render() {
      var _a = this.props,
        message = _a.message,
        options = _a.options,
        others = __rest(_a, ["message", "options"]);
      var visible = this.state.visible;
      return /*#__PURE__*/React.createElement(ActionSheet, _extends({
        visible: visible
      }, others, {
        disablePortal: true,
        message: message,
        options: options,
        onClose: this.handleClose,
        onClick: this.handleClick
      }));
    }
  }]);
  return ActionSheetWrapper;
}(Component);
ActionSheetWrapper.defaultProps = {
  message: '',
  options: [],
  onClick: function onClick() {},
  onClose: function onClose() {}
};
export default function (options) {
  var onClose = options.onClose,
    others = __rest(options, ["onClose"]);
  var hide = null;
  var handleClose = function handleClose(v) {
    if (isFunction(onClose)) {
      onClose(v);
    }
    setTimeout(function () {
      hide();
    }, 300);
  };
  hide = renderToRoot( /*#__PURE__*/React.createElement(ActionSheetWrapper, _extends({}, others, {
    onClose: handleClose
  })));
  return {
    close: function close() {
      return hide();
    }
  };
}