function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState } from "react";
import { isWeb } from '@uni/env';
import View from '../view';
var Mask = function Mask(props, ref) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    className = props.className,
    visible = props.visible,
    view = props.view,
    others = __rest(props, ["prefix", "className", "visible", "view"]);
  var _useState = useState(visible),
    _useState2 = _slicedToArray(_useState, 2),
    show = _useState2[0],
    setShow = _useState2[1];
  var clsPrefix = "".concat(prefix, "modal");
  var clsDisableScroll = "".concat(clsPrefix, "-mask--disable-scroll");
  useEffect(function () {
    if (!visible && show) {
      var t1 = setTimeout(function () {
        setShow(false);
      }, 100);
      return function () {
        clearTimeout(t1);
      };
    } else {
      setShow(visible);
    }
    var tryRemoveDisableScrollCls = function tryRemoveDisableScrollCls() {
      var activeMasks = document.getElementsByClassName("".concat(clsPrefix, "-mask--active"));
      if (activeMasks.length === 0) {
        document.body.classList.remove(clsDisableScroll);
      }
    };
    if (isWeb) {
      if (visible) {
        document.body.classList.add(clsDisableScroll);
      } else {
        tryRemoveDisableScrollCls();
      }
      return function () {
        tryRemoveDisableScrollCls();
      };
    }
  }, [visible]);
  if (!show) {
    return null;
  }
  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, others, {
    "disable-scroll": true,
    catchTouchMove: true,
    className: classNames(className, "".concat(clsPrefix, "-mask"), _defineProperty(_defineProperty({}, "".concat(clsPrefix, "-mask--active"), visible), "".concat(clsPrefix, "-mask--inactive"), !visible))
  }));
};
Mask.displayName = 'Modal.Mask';
export default /*#__PURE__*/forwardRef(Mask);