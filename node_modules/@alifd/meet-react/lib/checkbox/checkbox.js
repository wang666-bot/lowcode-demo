"use strict";

exports.__esModule = true;
exports.default = void 0;
var _tslib = require("tslib");
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("react"));
var _meetReactComponentOne = require("@alifd/meet-react-component-one");
var _view = _interopRequireDefault(require("../view"));
var _icon = _interopRequireDefault(require("../icon"));
var _utils = require("../utils");
var _hooks = require("../utils/hooks");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var Checkbox = function (props, ref) {
  var _props$size = props.size,
    size = _props$size === void 0 ? 'medium' : _props$size,
    _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    children = props.children,
    _checked = props.checked,
    _indeterminate = props.indeterminate,
    disabled = props.disabled,
    className = props.className,
    _defaultChecked = props.defaultChecked,
    _defaultIndeterminate = props.defaultIndeterminate,
    _props$checkIcon = props.checkIcon,
    checkIcon = _props$checkIcon === void 0 ? 'select' : _props$checkIcon,
    _props$indeterminateI = props.indeterminateIcon,
    indeterminateIcon = _props$indeterminateI === void 0 ? 'semi-select' : _props$indeterminateI,
    readOnly = props.readOnly,
    onChange = props.onChange,
    value = props.value,
    label = props.label,
    text = props.text,
    others = (0, _tslib.__rest)(props, ["size", "prefix", "children", "checked", "indeterminate", "disabled", "className", "defaultChecked", "defaultIndeterminate", "checkIcon", "indeterminateIcon", "readOnly", "onChange", "value", "label", "text"]);
  var _useValue = (0, _hooks.useValue)(props, false, {
      valueName: 'checked'
    }),
    checked = _useValue[0],
    setChecked = _useValue[1],
    isCheckedControlled = _useValue[2];
  var _useValue2 = (0, _hooks.useValue)(props, false, {
      valueName: 'indeterminate'
    }),
    indeterminate = _useValue2[0],
    setIndeterminate = _useValue2[1],
    isIndeterminateControlled = _useValue2[2];
  var state = 'normal';
  var selectedPrefix = !indeterminate && checked ? '--selected' : '--unselected';
  var disabledPrefix = disabled ? '-disabled' : '';
  var indeterminatePrefix = indeterminate ? '-indeterminate' : '';
  var statePrefix = '';
  var iconCls = (0, _classnames.default)(prefix + "checkbox-icon", prefix + "checkbox-icon--" + size, prefix + "checkbox-icon" + selectedPrefix + indeterminatePrefix + disabledPrefix);
  var textCls = (0, _classnames.default)(prefix + "checkbox-text", prefix + "checkbox-text--" + size, prefix + "checkbox-text" + selectedPrefix + indeterminatePrefix + disabledPrefix);
  var handleClick = (0, _react.useCallback)(function (e) {
    if (disabled || readOnly) {
      return;
    }
    var newChecked = null;
    if (indeterminate) {
      if (isIndeterminateControlled) {
        if (onChange) {
          onChange(!checked, e);
        }
        return;
      } else {
        setIndeterminate(false);
        newChecked = true;
      }
    }
    if (newChecked === null) {
      newChecked = !checked;
    }
    if (!isCheckedControlled) {
      setChecked(newChecked);
    }
    if (onChange) {
      onChange(newChecked, e);
    }
  }, [onChange, disabled, readOnly, checked, setChecked, isCheckedControlled, indeterminate, setIndeterminate, isIndeterminateControlled]);
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    ref: ref
  }, others, {
    className: (0, _classnames.default)(prefix + "checkbox-container", prefix + "checkbox-container--" + size, className),
    onClick: handleClick
  }), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: (0, _classnames.default)(prefix + "checkbox-circle", prefix + "checkbox-circle--" + size, prefix + "checkbox-circle" + selectedPrefix + indeterminatePrefix + statePrefix + disabledPrefix)
  }, indeterminate && /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: indeterminateIcon,
    className: iconCls
  }), checked && !indeterminate && /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: checkIcon,
    className: iconCls
  })), function renderChildren(c) {
    if ((0, _utils.isString)(c)) {
      return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
        className: textCls
      }, children);
    } else if (!(0, _utils.isUndef)(c)) {
      return /*#__PURE__*/(0, _react.createElement)(_view.default, {
        className: textCls
      }, children);
    }
    return null;
  }(children));
};
Checkbox.displayName = 'Checkbox';
var _default = exports.default = /*#__PURE__*/(0, _react.forwardRef)(Checkbox);