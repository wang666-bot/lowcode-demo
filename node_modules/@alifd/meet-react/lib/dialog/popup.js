"use strict";

exports.__esModule = true;
exports.default = void 0;
var _babelRuntimeJsxStyleTransform = require("@alifd/babel-runtime-jsx-style-transform");
var _tslib = require("tslib");
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _view = _interopRequireDefault(require("../view"));
var _modal = _interopRequireDefault(require("../modal"));
var _icon = _interopRequireDefault(require("../icon"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var Popup = function (props) {
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    _props$closeIconType = props.closeIconType,
    closeIconType = _props$closeIconType === void 0 ? 'error' : _props$closeIconType,
    _props$bgColor = props.bgColor,
    bgColor = _props$bgColor === void 0 ? 'transparent' : _props$bgColor,
    visible = props.visible,
    children = props.children,
    _props$closeMode = props.closeMode,
    closeMode = _props$closeMode === void 0 ? ['mask', 'close'] : _props$closeMode,
    className = props.className,
    style = props.style,
    onClose = props.onClose,
    others = (0, _tslib.__rest)(props, ["prefix", "closeIconType", "bgColor", "visible", "children", "closeMode", "className", "style", "onClose"]);
  var clsPrefix = prefix + "dialog-popup";
  var containerStyle = style || {};
  if (bgColor) {
    containerStyle.backgroundColor = bgColor;
  }
  var handleClose = function (reason) {
    if ((0, _utils.isFunction)(onClose) && Array.isArray(closeMode) && closeMode.indexOf(reason) > -1) {
      onClose(reason);
    }
  };
  return /*#__PURE__*/(0, _react.createElement)(_modal.default, _extends({}, others, {
    visible: visible,
    containerClassName: clsPrefix,
    onClose: handleClose
  }), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: (0, _classnames.default)(className, clsPrefix + "-container"),
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(containerStyle)
  }, children), /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-close",
    type: closeIconType,
    size: "l",
    onClick: function onClick() {
      return handleClose('close');
    }
  }));
};
var _default = exports.default = Popup;