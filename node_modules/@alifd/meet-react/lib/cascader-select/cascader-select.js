"use strict";

exports.__esModule = true;
exports.default = void 0;
var _babelRuntimeJsxStyleTransform = require("@alifd/babel-runtime-jsx-style-transform");
var _tslib = require("tslib");
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _meetReactComponentOne = require("@alifd/meet-react-component-one");
var _view = _interopRequireDefault(require("../view"));
var _icon = _interopRequireDefault(require("../icon"));
var _breadCrumb = _interopRequireDefault(require("../bread-crumb"));
var _list = _interopRequireDefault(require("../list"));
var _picker = _interopRequireDefault(require("../picker"));
var _selectDrawer = _interopRequireDefault(require("../select-drawer"));
var _locale = require("../locale");
var _utils = require("../utils");
var _tree = require("../utils/tree");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function (t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : "suspendedYield", p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var getInitValue = function (props) {
  var _props$dataSource = props.dataSource,
    dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,
    defaultValue = props.defaultValue,
    value = props.value;
  var ret = [];
  if ('value' in props) {
    if ((0, _utils.isValidArray)(value)) {
      ret = value;
    } else if (!Array.isArray(value) && value) {
      ret = (0, _tree.getFullPathByValue)(props.dataSource, props.value);
    }
  } else if (!(0, _utils.isUndef)(defaultValue)) {
    if ((0, _utils.isValidArray)(defaultValue)) {
      ret = defaultValue;
    } else if (!Array.isArray(defaultValue) && defaultValue) {
      ret = (0, _tree.getFullPathByValue)(dataSource, defaultValue);
    }
  }
  return ret;
};
var getInitInternalValue = function (props) {
  var r = getInitValue(props);
  var isNormalMode = props.mode !== 'mini';
  if (r.length === 0) {
    if (!isNormalMode) {
      return (0, _tree.getFirstValue)(props.dataSource);
    } else {
      return [];
    }
  } else {
    return r;
  }
};
var defaultRenderContent = function (values, separator) {
  if (values === void 0) {
    values = [];
  }
  return Array.isArray(values) ? values.map(function (val) {
    return val.label;
  }).join(separator) : '';
};
var CascaderSelect = function (props, ref) {
  var _classNames;
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    _props$dataSource2 = props.dataSource,
    dataSource = _props$dataSource2 === void 0 ? [] : _props$dataSource2,
    _props$separator = props.separator,
    separator = _props$separator === void 0 ? '/' : _props$separator,
    _props$mode = props.mode,
    mode = _props$mode === void 0 ? 'normal' : _props$mode,
    value = props.value,
    defaultValue = props.defaultValue,
    className = props.className,
    hasClear = props.hasClear,
    _props$useSimpleValue = props.useSimpleValue,
    useSimpleValue = _props$useSimpleValue === void 0 ? false : _props$useSimpleValue,
    onChange = props.onChange,
    _props$rootTipText = props.rootTipText,
    rootTipText = _props$rootTipText === void 0 ? '' : _props$rootTipText,
    localeProp = props.locale,
    loadData = props.loadData,
    isPreview = props.isPreview,
    renderPreview = props.renderPreview,
    _props$size = props.size,
    size = _props$size === void 0 ? 'medium' : _props$size,
    drawerClassName = props.drawerClassName,
    previewClassNameProp = props.previewClassName,
    previewStyle = props.previewStyle,
    _props$onSelect = props.onSelect,
    onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,
    _props$onClear = props.onClear,
    onClear = _props$onClear === void 0 ? function () {} : _props$onClear,
    onCancel = props.onCancel,
    _props$renderContent = props.renderContent,
    renderContent = _props$renderContent === void 0 ? defaultRenderContent : _props$renderContent,
    others = (0, _tslib.__rest)(props, ["prefix", "dataSource", "separator", "mode", "value", "defaultValue", "className", "hasClear", "useSimpleValue", "onChange", "rootTipText", "locale", "loadData", "isPreview", "renderPreview", "size", "drawerClassName", "previewClassName", "previewStyle", "onSelect", "onClear", "onCancel", "renderContent"]);
  var scrollRef = (0, _react.useRef)(null);
  var clsPrefix = prefix + "cascader-select";
  var isControlled = ('value' in props);
  var isNormalMode = mode !== 'mini';
  var previewClassName = (0, _classnames.default)(previewClassNameProp, prefix + "form-item-input--preview-" + size);
  var loadingIcon = /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-icon--loading",
    name: "loading",
    size: "s"
  });
  var selectedIcon = /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-icon--selected",
    name: "select",
    size: "s"
  });
  var _useState = (0, _react.useState)(getInitValue(props)),
    curVal = _useState[0],
    setVal = _useState[1];
  var _useState2 = (0, _react.useState)(getInitInternalValue(props)),
    internalValue = _useState2[0],
    setInternalVal = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    loadingNode = _useState3[0],
    setLoadingNode = _useState3[1];
  var _useState4 = (0, _react.useState)(false),
    drawerVisible = _useState4[0],
    setDrawerVisible = _useState4[1];
  var locale = localeProp || (0, _locale.useLocale)('Cascader', props, {
    rootTipText: '首页'
  });
  var innerSelectedPath = (0, _tree.getDataByValues)(dataSource, internalValue);
  var handlePickerChange = function (v) {
    return setInternalVal(v);
  };
  var handleCancel = function (reason) {
    setInternalVal(curVal);
    if ((0, _utils.isFunction)(onCancel)) {
      onCancel(reason);
    }
  };
  var handleListClick = function (item, dpt) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var val, newInternalVal;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            val = item.value;
            newInternalVal = [].concat(internalValue.slice(0, dpt), [val]);
            if (loadData && internalValue.indexOf(val) > -1) {
              newInternalVal = internalValue.slice(0, internalValue.indexOf(val) + 1);
            }
            setInternalVal(newInternalVal);
            if (!(loadData && !item.isLeaf)) {
              _context.next = 9;
              break;
            }
            setLoadingNode(val);
            _context.next = 8;
            return loadData(item);
          case 8:
            setLoadingNode(null);
          case 9:
            if (item.children && scrollRef.current) {
              scrollRef.current.scrollTo(0, 0);
            }
            if (onSelect) {
              onSelect(val, item);
            }
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
  };
  (0, _react.useEffect)(function () {
    setVal(getInitValue(props));
    setInternalVal(getInitInternalValue(props));
  }, [value]);
  (0, _react.useEffect)(function () {
    if (!drawerVisible) {
      setVal(getInitValue(props));
      setInternalVal(getInitInternalValue(props));
    }
  }, [props.dataSource]);
  var nextList = [];
  if (isNormalMode) {
    if ((0, _utils.isValidArray)(internalValue)) {
      var lastVal = internalValue[internalValue.length - 1];
      var t = (0, _tree.find)(dataSource, function (node) {
        return node.value === lastVal;
      });
      if (t && loadingNode === t.value) {
        nextList = [];
      } else if (t && (0, _utils.isValidArray)(t.children)) {
        nextList = t.children;
      }
    } else {
      nextList = dataSource;
    }
  }
  if (isPreview) {
    if ((0, _utils.isFunction)(renderPreview)) {
      return /*#__PURE__*/(0, _react.createElement)(_view.default, {
        className: previewClassName,
        style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(previewStyle)
      }, renderPreview(innerSelectedPath));
    }
    return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
      className: previewClassName,
      style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(previewStyle)
    }, innerSelectedPath.map(function (node) {
      return node.label;
    }).join(separator));
  }
  return /*#__PURE__*/(0, _react.createElement)(_selectDrawer.default, _extends({}, others, {
    ref: ref,
    hasClear: hasClear,
    className: (0, _classnames.default)(clsPrefix, className),
    content: renderContent((0, _tree.getDataByValues)(dataSource, curVal), separator),
    drawerClassName: (0, _classnames.default)(clsPrefix + "-container", drawerClassName),
    onVisibleChange: function handleVisibleChange(visible) {
      return setDrawerVisible(visible);
    },
    onOk: function handleOk() {
      if (isNormalMode) {
        if ((0, _utils.isValidArray)(internalValue)) {
          var lastVal = internalValue[internalValue.length - 1];
          var n = (0, _tree.find)(dataSource, function (node) {
            return node.value === lastVal;
          });
          if (n && n.children) {
            handleCancel('invalid-selection');
            return;
          }
        } else {
          handleCancel('invalid-selection');
          return;
        }
      }
      if (!isControlled) {
        setVal(internalValue);
      }
      if (onChange) {
        var selectedPath = (0, _tree.getDataByValues)(dataSource, internalValue);
        var lastData = selectedPath[selectedPath.length - 1];
        onChange(useSimpleValue ? lastData.value || '' : internalValue, lastData, {
          selectedPath: selectedPath
        });
      }
    },
    onCancel: handleCancel,
    onClear: function handleClear() {
      if (!isControlled) {
        setVal([]);
        setInternalVal([]);
      }
      if (onClear) {
        onClear();
      }
      if (onChange) {
        onChange(useSimpleValue ? '' : [], {}, {
          selectedPath: []
        });
      }
    }
  }), isNormalMode ? /*#__PURE__*/(0, _react.createElement)(_react.Fragment, null, /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default, {
    className: (0, _classnames.default)(clsPrefix + "-nav", (_classNames = {}, _classNames[clsPrefix + "-nav--wechat"] = _utils.isStrictWechatMiniProgram, _classNames)),
    onClick: function handleBreadCrumbClick(index) {
      if (index === void 0) {
        index = 0;
      }
      setInternalVal(internalValue.slice(0, index));
      if (scrollRef.current) {
        scrollRef.current.scrollTo(0, 0);
      }
    }
  }, /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default.Item, null, rootTipText || locale.rootTipText), (0, _utils.isValidArray)(innerSelectedPath) ? innerSelectedPath.map(function (val) {
    return /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default.Item, {
      key: val.value
    }, val.label);
  }) : null), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-gutter"
  })) : null, !isNormalMode ? function renderPicker() {
    return (0, _utils.isValidArray)(dataSource) ? /*#__PURE__*/(0, _react.createElement)(_picker.default, {
      cascade: true,
      data: dataSource,
      value: internalValue,
      onChange: handlePickerChange
    }) : null;
  }() : /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.ScrollView, {
    showsVerticalScrollIndicator: true,
    showsHorizontalScrollIndicator: false,
    ref: scrollRef,
    className: clsPrefix + "-scrollview"
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-item-container"
  }, (0, _utils.isValidArray)(internalValue) ? internalValue.map(function (val, index) {
    var list = (0, _tree.getSiblings)(dataSource, val);
    return (0, _utils.isValidArray)(list) ? /*#__PURE__*/(0, _react.createElement)(_list.default, {
      className: clsPrefix + "-list",
      key: val
    }, list.map(function (item) {
      var icon = null;
      var hasArrow = loadData && !item.isLeaf || !loadData && item.children;
      if (loadData && loadingNode === item.value) {
        icon = loadingIcon;
      } else if (loadData && item.value === val || !loadData && item.value === val) {
        icon = selectedIcon;
      }
      return /*#__PURE__*/(0, _react.createElement)(_list.default.Item, {
        key: item.value,
        title: item.label,
        extra: icon,
        arrow: hasArrow && !icon ? 'right' : null,
        disabled: item.disabled,
        onClick: function onClick() {
          return handleListClick(item, index);
        }
      });
    })) : null;
  }) : null, (0, _utils.isValidArray)(nextList) ? /*#__PURE__*/(0, _react.createElement)(_list.default, {
    className: clsPrefix + "-list"
  }, nextList.map(function (item) {
    var icon = null;
    var hasArrow = item.children || loadData && !item.isLeaf;
    if (loadData && item.isLeaf && item.value === loadingNode) {
      icon = loadingIcon;
    }
    return /*#__PURE__*/(0, _react.createElement)(_list.default.Item, {
      key: item.value,
      title: item.label,
      extra: icon,
      arrow: hasArrow && !icon ? 'right' : null,
      disabled: item.disabled,
      onClick: function onClick() {
        return handleListClick(item, internalValue ? internalValue.length : 0);
      }
    });
  })) : null)));
};
CascaderSelect.displayName = 'CascaderSelect';
var _default = exports.default = /*#__PURE__*/(0, _react.forwardRef)(CascaderSelect);