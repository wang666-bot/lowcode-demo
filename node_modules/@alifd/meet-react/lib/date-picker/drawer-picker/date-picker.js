"use strict";

exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _calendar = _interopRequireDefault(require("../../calendar"));
var _datePicker = _interopRequireDefault(require("../embed-picker/date-picker"));
var _timePicker = _interopRequireDefault(require("../embed-picker/time-picker"));
var _minutePicker = _interopRequireDefault(require("../embed-picker/minute-picker"));
var _utils = require("../../time-picker/utils");
var _utils2 = require("../utils");
var _basePicker = _interopRequireDefault(require("./base-picker"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var DatePicker = exports.default = /*#__PURE__*/function (_BasePicker) {
  _inheritsLoose(DatePicker, _BasePicker);
  function DatePicker() {
    return _BasePicker.apply(this, arguments) || this;
  }
  var _proto = DatePicker.prototype;
  _proto.renderPicker = function renderPicker() {
    var _this$props = this.props,
      showTime = _this$props.showTime,
      validRange = _this$props.validRange,
      mode = _this$props.mode,
      dateCellRender = _this$props.dateCellRender;
    if (mode === 'picker') {
      var embedPicker = null;
      if (showTime) {
        var format = showTime.format;
        if (format === 'HH:mm') {
          embedPicker = /*#__PURE__*/(0, _react.createElement)(_minutePicker.default, {
            value: this.state.pickerValue,
            disabledDate: this.props.disabledDate,
            validRange: validRange,
            onChange: this.handleChange
          });
        } else {
          embedPicker = /*#__PURE__*/(0, _react.createElement)(_timePicker.default, {
            value: this.state.pickerValue,
            disabledDate: this.props.disabledDate,
            validRange: validRange,
            onChange: this.handleChange
          });
        }
      } else {
        embedPicker = /*#__PURE__*/(0, _react.createElement)(_datePicker.default, {
          value: this.state.pickerValue,
          disabledDate: this.props.disabledDate,
          validRange: validRange,
          onChange: this.handleChange
        });
      }
      return embedPicker;
    }
    if (showTime) {
      if (!validRange) {
        throw new Error('DatePicker with showTime must have validRange');
      }
      var _format = showTime.format;
      return /*#__PURE__*/(0, _react.createElement)(_calendar.default, {
        ref: this.calendarRef,
        shape: "panel",
        mode: "month",
        enableYearPicker: true,
        enableTimePicker: true,
        timeFormat: _format,
        dateCellRender: dateCellRender,
        value: this.state.pickerValue,
        disabledDate: this.props.disabledDate,
        validRange: validRange,
        onSelect: this.handleChange,
        onYearPickerVisibleChange: this.handleYearPickerVisibleChange
      });
    } else {
      return /*#__PURE__*/(0, _react.createElement)(_calendar.default, {
        ref: this.calendarRef,
        shape: "panel",
        mode: "month",
        enableYearPicker: true,
        value: this.state.pickerValue,
        dateCellRender: dateCellRender,
        disabledDate: this.props.disabledDate,
        validRange: this.props.validRange,
        onSelect: this.handleChange,
        onYearPickerVisibleChange: this.handleYearPickerVisibleChange
      });
    }
  };
  _proto.getDefaultFormat = function getDefaultFormat() {
    return '';
  };
  _createClass(DatePicker, [{
    key: "timeFormat",
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : _utils.DEFAULT_FORMAT;
    }
  }, {
    key: "format",
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !(0, _utils2.withTime)(format) ? format + " " + this.timeFormat : format;
    }
  }]);
  return DatePicker;
}(_basePicker.default);