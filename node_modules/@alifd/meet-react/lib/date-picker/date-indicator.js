"use strict";

exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _meetReactComponentOne = require("@alifd/meet-react-component-one");
var _view = _interopRequireDefault(require("../view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DateIndicator = function (props) {
  var _classNames, _classNames2;
  var _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
    highlight = props.highlight,
    _props$separator = props.separator,
    separator = _props$separator === void 0 ? ' ' : _props$separator,
    _props$values = props.values,
    values = _props$values === void 0 ? [] : _props$values;
  var clsPrefix = prefix + "datepicker";
  return /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-time-indicator"
  }, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: (0, _classnames.default)(clsPrefix + "-time-indicator-text", (_classNames = {}, _classNames[clsPrefix + "-time-indicator--highlight"] = highlight === 0, _classNames)),
    "x-if": highlight === 0
  }, values[0]), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: clsPrefix + "-time-indicator-text"
  }, separator), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: (0, _classnames.default)(clsPrefix + "-time-indicator-text", (_classNames2 = {}, _classNames2[clsPrefix + "-time-indicator--highlight"] = highlight === 1, _classNames2)),
    "x-if": highlight === 1
  }, values[1]));
};
var _default = exports.default = DateIndicator;