"use strict";

exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _meetReactComponentOne = require("@alifd/meet-react-component-one");
var _icon = _interopRequireDefault(require("../icon"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CreateChildren = function (children, classes, prefix, size) {
  var count = _react.Children.count(children);
  return _react.Children.map(children, function (child, index) {
    var _classNames;
    if ((0, _utils.isNil)(child) || (0, _utils.isBoolean)(child)) {
      return null;
    }
    var key = child.key || "mt-tag-" + index;
    if ((0, _utils.isNumber)(child) || (0, _utils.isString)(child)) {
      return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
        key: key,
        className: classes.textCls
      }, child);
    }
    if (!(0, _react.isValidElement)(child)) {
      return child;
    }
    switch (true) {
      case child.type === _meetReactComponentOne.Text:
        return (0, _react.cloneElement)(child, {
          key: key,
          className: classes.textCls,
          style: child.props.style || {}
        });
      case child.type === _icon.default:
        return (0, _react.cloneElement)(child, {
          key: key,
          className: (0, _classnames.default)(classes.iconCls, (_classNames = {}, _classNames[prefix + "tag-icon--" + size + "-first"] = index === 0, _classNames[prefix + "tag-icon--" + size + "-last"] = index === count - 1, _classNames)),
          style: child.props.style || {}
        });
      default:
        return (0, _react.cloneElement)(child, {
          key: key
        });
    }
  });
};
var _default = exports.default = CreateChildren;