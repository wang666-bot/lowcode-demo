"use strict";

exports.__esModule = true;
exports.default = void 0;
var _tslib = require("tslib");
var _react = _interopRequireWildcard(require("react"));
var _button = _interopRequireDefault(require("../button/button"));
var _context = _interopRequireDefault(require("./context"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var Reset = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var onClick = props.onClick,
    _props$toDefault = props.toDefault,
    toDefault = _props$toDefault === void 0 ? true : _props$toDefault,
    names = props.names,
    children = props.children,
    other = (0, _tslib.__rest)(props, ["onClick", "toDefault", "names", "children"]);
  var _useContext = (0, _react.useContext)(_context.default),
    form = _useContext.form,
    size = _useContext.size;
  return /*#__PURE__*/(0, _react.createElement)(_button.default, _extends({
    ref: ref,
    size: size
  }, other, {
    onClick: function handleClick(e) {
      if (form) {
        form.reset(toDefault, names);
      }
      if (onClick) {
        onClick(e);
      }
    }
  }), children);
});
var _default = exports.default = Reset;