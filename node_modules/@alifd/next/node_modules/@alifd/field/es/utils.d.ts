import type { ChangeEvent } from 'react';
import type { UnknownFunction } from './types';
export declare function splitNameToPath(name: ''): '';
export declare function splitNameToPath(name: string): string[];
export declare function splitNameToPath(name: unknown): '';
export declare function hasIn(state: unknown, name: string | undefined | null): boolean;
export declare function getIn<V = unknown>(state: unknown, name: string): V;
export declare function setIn<R = any>(state: unknown, name: string, value: unknown): R;
export declare function deleteIn(state: undefined | null, name: string): undefined;
export declare function deleteIn<S extends Record<string, unknown> | unknown[]>(state: S, name: string): S;
export declare function getErrorStrs(): undefined;
export declare function getErrorStrs<Errors extends undefined | null>(errors: Errors, processErrorMessage?: (message: unknown) => unknown): Errors;
export declare function getErrorStrs<MessageType, R>(errors: {
    message: MessageType;
}[], processErrorMessage?: ((message: MessageType) => R) | undefined): typeof processErrorMessage extends undefined ? MessageType[] : R[];
export declare function getErrorStrs<Error, R>(errors: Error[], processErrorMessage?: ((message: Error) => R) | undefined): typeof processErrorMessage extends undefined ? Error[] : R[];
export declare function getParams<Cb extends (...args: unknown[]) => unknown>(ns: Cb, cb?: undefined): {
    names: undefined;
    callback: Cb;
};
export declare function getParams<Ns extends string | string[] | undefined, Cb extends UnknownFunction | undefined>(ns: Ns | Cb, cb: Cb): {
    names: Ns extends undefined ? undefined : string[];
    callback: Cb;
};
export declare function isOverwritten(values: unknown, name: unknown): typeof values extends object ? boolean : false;
export declare function isOverwritten(values: unknown, name: unknown): typeof name extends string ? boolean : false;
export declare function isOverwritten(values: unknown, name: unknown): boolean;
export declare function getValueFromEvent<E extends ChangeEvent<HTMLInputElement>>(e: E): string | boolean;
export declare function getValueFromEvent<E>(e: E): E;
/**
 * 提取rule里面的trigger并且做映射
 * @param rules - 规则
 * @param defaultTrigger - 默认触发器
 */
export declare function mapValidateRules<Rule extends {
    [key: string]: unknown;
    trigger?: string | string[];
}>(rules: Rule[], defaultTrigger: string): Record<string, Rule[]>;
export declare const warning: (...args: unknown[]) => void;
export declare function cloneToRuleArr(rules?: undefined | null): [];
export declare function cloneToRuleArr<Rule>(rules: Rule): Rule extends unknown[] ? Rule : Rule[];
