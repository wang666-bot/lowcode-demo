import type { RuleMap, Option, NormalizedOption, ValidateSource, MessagesConfig, ValidateCallback, NormalizedValidateError, ValidationNoErrorResult, ValidationErrorResult } from './types';
declare class Schema {
    _rules: RuleMap | undefined;
    _options: NormalizedOption;
    complete: Array<(results: Array<NormalizedValidateError | NormalizedValidateError[]>) => void>;
    constructor(rules?: RuleMap, options?: Option);
    abort(): void;
    messages(messages: MessagesConfig): void;
    /**
     * Validate and use `Promise` to receive results
     * @param source - map of field names and values to use in validation
     * @returns Validation results
     */
    validate(source: ValidateSource): Promise<ValidationNoErrorResult | ValidationErrorResult>;
    /**
     * Validate and use `callback` to receive results
     * @param source - map of field names and values to use in validation
     * @param callback - callback to run after all
     */
    validate(source: ValidateSource, callback: ValidateCallback): void;
    /**
     * Validate and use `Promise` to receive results
     * @param source - map of field names and values to use in validation
     * @returns Validation results
     */
    validatePromise(source: ValidateSource): Promise<ValidationNoErrorResult | ValidationErrorResult>;
}
export * from './types';
export default Schema;
