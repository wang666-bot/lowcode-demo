"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidationMethod = exports.validateFunc = void 0;
var tslib_1 = require("tslib");
var rules_1 = tslib_1.__importDefault(require("./rules"));
/**
 * {required, format} => format; {required} => required
 * If a promise is wanted from the validator, either return a promise from the callback,
 *      or do not pass a callback
 */
function validateFunc(validator, ruleType) {
    return function (rule, value, cb, options) {
        var errors = [];
        // 如果是非 required 校验
        if (ruleType !== 'required') {
            var errors_1 = [];
            rules_1.default.required(rule, value, errors_1, options);
            // 空数据
            if (errors_1.length > 0) {
                if ('required' in rule && rule.required) {
                    if (cb) {
                        return cb(errors_1);
                    }
                    else {
                        return Promise.reject(errors_1);
                    }
                }
                else if (cb) {
                    return cb([]); //空数据，并且没有 require 要求，则忽略
                }
                else {
                    return Promise.resolve(null);
                }
            }
        }
        validator(rule, value, errors, options);
        if (cb) {
            return cb(errors);
        }
        if (Promise) {
            return Promise.resolve(errors);
        }
    };
}
exports.validateFunc = validateFunc;
/**
 * {required, format} => format; {required} => required
 */
function getValidationMethod(rule) {
    if (typeof rule.validator === 'function') {
        return rule.validator;
    }
    var keys = Object.keys(rule);
    // required 和其他校验规则共存
    // {required, format} {required, unknown}
    for (var i = 0; i < keys.length; i++) {
        var ruleType = keys[i];
        if (ruleType === 'required') {
            continue;
        }
        if (ruleType in rules_1.default) {
            return validateFunc(rules_1.default[ruleType], ruleType);
        }
    }
    // 有其他位置参数
    if ('required' in rule && rule.required) {
        return validateFunc(rules_1.default.required, 'required');
    }
    return null;
}
exports.getValidationMethod = getValidationMethod;
