import type { NormalizedValidateError, SerializedRule, ValidateError } from './types';
export declare function format<R>(f: () => R, ...args: unknown[]): R;
export declare function format(f: string, ...args: unknown[]): string;
export declare function format<V>(f: V, ...args: unknown[]): V;
/**
 * 异步调用
 * @param objArr   校验规则对象列表
 * @param option   配置项
 * @param validator     每个校验规则
 * @param callback 全部完成后的执行
 */
export declare function asyncMap<Item, ResultItem>(objArr: Record<string, Item[]>, option: {
    first?: boolean;
}, validator: (item: Item, next: (errors?: ResultItem[]) => void) => void, callback: (results: Array<ResultItem | ResultItem[]>) => void): void;
export declare function asyncMapPromise<Item, ErrorItem>(objArr: Record<string, Item[]>, option: {
    first?: boolean;
}, validator: (rule: Item) => ErrorItem[] | Promise<ErrorItem[]>): Promise<ErrorItem[] | ErrorItem[][]>;
export declare function complementError(rule: SerializedRule): (oe: ValidateError | string) => NormalizedValidateError;
/**
 *
 * @param results errors from running validation
 * @returns \{ errors: Array, fields: Object }
 */
export declare function processErrorResults(results?: Array<NormalizedValidateError | NormalizedValidateError[]> | undefined): {
    errors: null;
    fields: null;
} | {
    errors: NormalizedValidateError[];
    fields: Record<string, NormalizedValidateError[]>;
};
