"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneToRuleArr = cloneToRuleArr;
exports.deleteIn = deleteIn;
exports.getErrorStrs = getErrorStrs;
exports.getIn = getIn;
exports.getParams = getParams;
exports.getValueFromEvent = getValueFromEvent;
exports.hasIn = hasIn;
exports.isOverwritten = isOverwritten;
exports.mapValidateRules = mapValidateRules;
exports.setIn = setIn;
exports.splitNameToPath = splitNameToPath;
exports.warning = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function splitNameToPath(name) {
  return typeof name === 'string' && name ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
}
function hasIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return false;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return false;
    }
    // has no property
    var thisName = path[i];
    if (!(thisName in result)) {
      return false;
    }
    // pass on
    result = result[thisName];
  }
  return true;
}
function getIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return undefined;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return undefined;
    }
    result = result[path[i]];
  }
  return result;
}
var setInWithPath = function setInWithPath(state, value, path, pathIndex) {
  if (pathIndex >= path.length) {
    return value;
  }
  var first = path[pathIndex];
  var next = setInWithPath(state && state[first], value, path, pathIndex + 1);
  if (!state) {
    var initialized = isNaN(first) ? {} : [];
    initialized[first] = next;
    return initialized;
  }
  if (Array.isArray(state)) {
    var copy = [].concat(state);
    copy[first] = next;
    return copy;
  }
  return (0, _extends3.default)({}, state, (0, _defineProperty2.default)({}, first, next));
};
function setIn(state, name, value) {
  return setInWithPath(state, value, typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '', 0);
}
function deleteIn(state, name) {
  if (!state) {
    return;
  }
  var path = typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
  var length = path.length;
  if (!length) {
    return state;
  }
  var result = state;
  for (var i = 0; i < length && !!result; ++i) {
    if (i === length - 1) {
      delete result[path[i]];
    } else {
      result = result[path[i]];
    }
  }
  return state;
}
function getErrorStrs(errors, processErrorMessage) {
  if (errors) {
    return errors.map(function (e) {
      var message = typeof e.message !== 'undefined' ? e.message : e;
      if (typeof processErrorMessage === 'function') {
        return processErrorMessage(message);
      }
      return message;
    });
  }
  return errors;
}
function getParams(ns, cb) {
  var names = typeof ns === 'string' ? [ns] : ns;
  var callback = cb;
  if (cb === undefined && typeof names === 'function') {
    callback = names;
    names = undefined;
  }
  return {
    names: names,
    callback: callback
  };
}

/**
 * name是否被覆写
 * e.g. { a: { b: 1 } } and 'a.b', should return true
 * e.g. { a: { b: 1 } } and 'a.b.c', should return true
 * e.g. { a: { b: 1 } } and 'a.b2', should return false
 * e.g. { a: { b: 1 } } and 'a2', should return false
 * e.g. { a: { b: [0, 1] } } and 'a.b[0]' return true
 * e.g. { a: { b: [0, 1] } } and 'a.b[5]' return true (miss index means overwritten in array)
 * @param {object} values 写入对象
 * @param {string} name 字段key
 */
function isOverwritten(values, name) {
  if (!values || (0, _typeof2.default)(values) !== 'object' || !name || typeof name !== 'string') {
    return false;
  }
  var paths = splitNameToPath(name);
  var obj = values;
  var _iterator = _createForOfIteratorHelper(paths),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var path = _step.value;
      if (path in obj) {
        var pathValue = obj[path];
        // 任意一层path值不是对象了，则代表被覆盖
        if (!pathValue || (0, _typeof2.default)(pathValue) !== 'object') {
          return true;
        } else {
          obj = pathValue;
        }
      } else {
        // 数组的index已经移除，则代表被覆写
        if (Array.isArray(obj)) {
          return true;
        }
        return false;
      }
    }
    // 代表 name in values，则返回 true
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * 从组件事件中获取数据
 * @param e Event或者value
 * @returns value
 */
function getValueFromEvent(e) {
  // support custom element
  if (!e || !e.target || !e.preventDefault) {
    return e;
  }
  var target = e.target;
  if (target.type === 'checkbox') {
    return target.checked;
  } else if (target.type === 'radio') {
    //兼容原生radioGroup
    if (target.value) {
      return target.value;
    } else {
      return target.checked;
    }
  }
  return target.value;
}
function validateMap(rulesMap, rule, defaultTrigger) {
  var nrule = (0, _extends3.default)({}, rule);
  if (!nrule.trigger) {
    nrule.trigger = [defaultTrigger];
  }
  if (typeof nrule.trigger === 'string') {
    nrule.trigger = [nrule.trigger];
  }
  for (var i = 0; i < nrule.trigger.length; i++) {
    var trigger = nrule.trigger[i];
    if (trigger in rulesMap) {
      rulesMap[trigger].push(nrule);
    } else {
      rulesMap[trigger] = [nrule];
    }
  }
  delete nrule.trigger;
}

/**
 * 提取rule里面的trigger并且做映射
 * @param  {Array} rules   规则
 * @param  {String} defaultTrigger 默认触发
 * @return {Object} {onChange:rule1, onBlur: rule2}
 */
function mapValidateRules(rules, defaultTrigger) {
  var rulesMap = {};
  rules.forEach(function (rule) {
    validateMap(rulesMap, rule, defaultTrigger);
  });
  return rulesMap;
}
var warn = function warn() {};
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
  warn = function warn() {
    /* eslint-disable no-console */
    if (typeof console !== 'undefined' && console.error) {
      var _console;
      (_console = console).error.apply(_console, arguments);
    }
  };
}
var warning = exports.warning = warn;
function cloneToRuleArr(rules) {
  if (!rules) {
    return [];
  }
  var rulesArr = Array.isArray(rules) ? rules : [rules];
  // 后续会修改rule对象，这里做浅复制以避免对传入对象的修改
  return rulesArr.map(function (rule) {
    return _objectSpread({}, rule);
  });
}