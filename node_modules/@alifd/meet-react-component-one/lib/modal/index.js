"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _view = _interopRequireDefault(require("../view"));
var _universalTransition = _interopRequireDefault(require("universal-transition"));
var _universalEnv = require("universal-env");
require("./index.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var bodyEl, originalBodyOverflow;
var modalCount = 0;
if (_universalEnv.isWeb) {
  bodyEl = document.body;
}
function stopPropagation(event) {
  if (_universalEnv.isWeb) {
    event.stopPropagation();
  }
}
function stopEventEffect(event) {
  if (_universalEnv.isWeb) {
    event.preventDefault();
    event.stopPropagation();
  }
}
function Modal(props) {
  var visible = props.visible,
    onMaskClick = props.onMaskClick,
    _props$maskCanBeClick = props.maskCanBeClick,
    maskCanBeClick = _props$maskCanBeClick === void 0 ? true : _props$maskCanBeClick,
    _props$maskStyle = props.maskStyle,
    maskStyle = _props$maskStyle === void 0 ? {} : _props$maskStyle,
    _props$contentStyle = props.contentStyle,
    contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle,
    onShow = props.onShow,
    onHide = props.onHide,
    children = props.children,
    _props$animation = props.animation,
    animation = _props$animation === void 0 ? true : _props$animation,
    _props$delay = props.delay,
    delay = _props$delay === void 0 ? 0 : _props$delay;
  var _props$duration = props.duration,
    duration = _props$duration === void 0 ? [300, 300] : _props$duration;
  if (typeof duration === 'number') {
    duration = [duration, duration];
  } else if (duration.length === 1) {
    duration = [duration[0], duration[0]];
  }
  var maskRef = {
    current: null,
    __animationValid: false,
    __timer: null,
    __pendingShow: null,
    __pendingHide: null
  };
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    visibleState = _useState2[0],
    setVisibleState = _useState2[1];
  var animate = function (show, callback) {
    maskRef.__animationValid = true;
    var animateDuration = show ? duration[0] : duration[1];
    maskRef.__timer = setTimeout(function () {
      maskRef.__animationValid = false;
      if (show && maskRef.current) {
        maskRef.current.style.opacity = '1';
      }
      callback && callback();
    }, animateDuration);
    (0, _universalTransition["default"])(maskRef.current, {
      opacity: show ? 1 : 0
    }, {
      timingFunction: 'ease',
      delay: delay,
      duration: animateDuration
    }, function () {
      if (maskRef.__animationValid) {
        clearTimeout(maskRef.__timer);
        if (show && maskRef.current) {
          maskRef.current.style.opacity = '1';
        }
        callback && callback();
      }
    });
  };
  var show = function () {
    if (!maskRef.__pendingShow) {
      maskRef.__pendingShow = true;
      if (maskRef.__pendingHide) {
        maskRef.__pendingHide = false;
      } else {
        modalCount++;
      }
      if (_universalEnv.isWeb) {
        if (modalCount === 1) {
          originalBodyOverflow = bodyEl.style.overflow;
        }
        bodyEl.style.overflow = 'hidden';
      }
      setVisibleState(true);
      if (animation) {
        maskRef.current.style.opacity = '0';
        animate(true, function () {
          onShow && onShow();
        });
      } else {
        maskRef.current.style.opacity = '1';
        onShow && onShow();
      }
    }
  };
  var hideAction = function () {
    if (_universalEnv.isWeb && modalCount === 1) {
      bodyEl.style.overflow = originalBodyOverflow;
    }
    modalCount--;
    setVisibleState(false);
    onHide && onHide();
  };
  var hide = function () {
    var withAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : animation;
    if (visibleState && !maskRef.__pendingHide) {
      maskRef.__pendingHide = true;
      maskRef.__pendingShow = false;
      if (withAnimate) {
        animate(false, function () {
          if (maskRef.__pendingHide) {
            hideAction();
          }
        });
      } else {
        hideAction();
      }
    }
  };
  (0, _react.useEffect)(function () {
    return function () {
      clearTimeout(maskRef.__timer);
      hide(false);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (visible !== visibleState) {
      visible ? show() : hide();
    } else if (visible) {
      show();
    }
  }, [visible]);
  (0, _react.useEffect)(function () {
    maskRef.__pendingShow = false;
    maskRef.__pendingHide = false;
  }, [visibleState]);
  return /*#__PURE__*/_react["default"].createElement(_view["default"], {
    className: "react-modal-mask",
    style: Object.assign(Object.assign({}, maskStyle), {
      visibility: visibleState ? 'visible' : 'hidden',
      height: '100vh' || 0
    }),
    onTouchMove: stopEventEffect,
    onClick: function onClick() {
      if (props.hasOwnProperty('onMaskClick')) {
        onMaskClick && onMaskClick();
      } else if (maskCanBeClick) {
        hide();
      }
    },
    ref: maskRef
  }, /*#__PURE__*/_react["default"].createElement(_view["default"], {
    className: "react-modal-main",
    style: contentStyle,
    onClick: stopPropagation,
    onTouchMove: stopPropagation
  }, children));
}
Modal.displayName = 'Modal';
var _default = exports["default"] = Modal;