"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeProp = exports.scrollProp = exports.positionProp = exports.oppositeMarginProp = exports.marginProp = exports.SCROLL_CHANGE_REASON = exports.DIRECTION = exports.ALIGNMENT = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ALIGNMENT = exports.ALIGNMENT = {
  AUTO: 'auto',
  START: 'start',
  CENTER: 'center',
  END: 'end'
};
var DIRECTION = exports.DIRECTION = {
  HORIZONTAL: 'horizontal',
  VERTICAL: 'vertical'
};
var SCROLL_CHANGE_REASON = exports.SCROLL_CHANGE_REASON = {
  OBSERVED: 'observed',
  REQUESTED: 'requested'
};
var scrollProp = exports.scrollProp = _defineProperty(_defineProperty({}, DIRECTION.VERTICAL, 'scrollTop'), DIRECTION.HORIZONTAL, 'scrollLeft');
var sizeProp = exports.sizeProp = _defineProperty(_defineProperty({}, DIRECTION.VERTICAL, 'height'), DIRECTION.HORIZONTAL, 'width');
var positionProp = exports.positionProp = _defineProperty(_defineProperty({}, DIRECTION.VERTICAL, 'top'), DIRECTION.HORIZONTAL, 'left');
var marginProp = exports.marginProp = _defineProperty(_defineProperty({}, DIRECTION.VERTICAL, 'marginTop'), DIRECTION.HORIZONTAL, 'marginLeft');
var oppositeMarginProp = exports.oppositeMarginProp = _defineProperty(_defineProperty({}, DIRECTION.VERTICAL, 'marginBottom'), DIRECTION.HORIZONTAL, 'marginRight');