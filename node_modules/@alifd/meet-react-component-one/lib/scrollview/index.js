"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _view = _interopRequireDefault(require("../view"));
var _classnames = _interopRequireDefault(require("classnames"));
var _timer = _interopRequireDefault(require("./timer"));
var _throttle = _interopRequireDefault(require("./throttle"));
require("./index.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FULL_WIDTH = 750;
var ANIMATION_DURATION = 400;
var DEFAULT_END_REACHED_THRESHOLD = 500;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
var STYLE_NODE_ID = 'one-scrollview-style';
var baseCls = 'one-scrollview';
function _scrollTo(scrollerRef, x, y, animated, duration) {
  var scrollView = scrollerRef.current;
  var scrollLeft = scrollView.scrollLeft;
  var scrollTop = scrollView.scrollTop;
  if (animated) {
    var timer = new _timer["default"]({
      duration: duration,
      easing: 'easeOutSine',
      onRun: function onRun(e) {
        if (x >= 0) {
          scrollerRef.current.scrollLeft = scrollLeft + e.percent * (x - scrollLeft);
        }
        if (y >= 0) {
          scrollerRef.current.scrollTop = scrollTop + e.percent * (y - scrollTop);
        }
      }
    });
    timer.run();
  } else {
    if (x >= 0) {
      scrollerRef.current.scrollLeft = x;
    }
    if (y >= 0) {
      scrollerRef.current.scrollTop = y;
    }
  }
}
var ScrollView = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
    style = props.style,
    horizontal = props.horizontal,
    contentContainerStyle = props.contentContainerStyle,
    scrollEventThrottle = props.scrollEventThrottle,
    showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,
    showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,
    onEndReached = props.onEndReached,
    onEndReachedThreshold = props.onEndReachedThreshold,
    onScroll = props.onScroll,
    children = props.children;
  var lastScrollDistance = (0, _react.useRef)(0);
  var lastScrollContentSize = (0, _react.useRef)(0);
  var scrollerNodeSize = (0, _react.useRef)(0);
  var scrollerRef = (0, _react.useRef)(null);
  var contentContainerRef = (0, _react.useRef)(null);
  var handleScroll = function (e) {
    if (props.onScroll) {
      e.nativeEvent = {
        get contentOffset() {
          return {
            x: e.target.scrollLeft,
            y: e.target.scrollTop
          };
        },
        get contentSize() {
          return {
            width: e.target.scrollWidth,
            height: e.target.scrollHeight
          };
        }
      };
      onScroll(e);
    }
    if (onEndReached) {
      var scrollerNode = scrollerRef.current;
      scrollerNodeSize.current = horizontal ? scrollerNode.offsetWidth : scrollerNode.offsetHeight;
      var scrollContentSize = horizontal ? scrollerNode.scrollWidth : scrollerNode.scrollHeight;
      var scrollDistance = horizontal ? scrollerNode.scrollLeft : scrollerNode.scrollTop;
      var isEndReached = scrollContentSize - scrollDistance - scrollerNodeSize.current < onEndReachedThreshold;
      var isScrollToEnd = scrollDistance > lastScrollDistance.current;
      var isLoadedMoreContent = scrollContentSize != lastScrollContentSize.current;
      if (isEndReached && isScrollToEnd && isLoadedMoreContent) {
        lastScrollContentSize.current = scrollContentSize;
        props.onEndReached(e);
      }
      lastScrollDistance.current = scrollDistance;
    }
  };
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      _nativeNode: scrollerRef.current,
      resetScroll: function resetScroll() {
        lastScrollContentSize.current = 0;
        lastScrollDistance.current = 0;
      },
      scrollTo: function scrollTo(options) {
        var _ref = options || {},
          _ref$x = _ref.x,
          x = _ref$x === void 0 ? 0 : _ref$x,
          _ref$y = _ref.y,
          y = _ref$y === void 0 ? 0 : _ref$y,
          _ref$animated = _ref.animated,
          animated = _ref$animated === void 0 ? true : _ref$animated,
          _ref$duration = _ref.duration,
          duration = _ref$duration === void 0 ? ANIMATION_DURATION : _ref$duration;
        var pixelRatio = document.documentElement.clientWidth / FULL_WIDTH;
        _scrollTo(scrollerRef, x * pixelRatio, y * pixelRatio, animated, duration);
      },
      scrollIntoView: function scrollIntoView(options) {
        var _ref2 = options || {},
          id = _ref2.id,
          _ref2$animated = _ref2.animated,
          animated = _ref2$animated === void 0 ? true : _ref2$animated,
          _ref2$duration = _ref2.duration,
          duration = _ref2$duration === void 0 ? ANIMATION_DURATION : _ref2$duration;
        if (!id) {
          throw new Error('Params missing id.');
        }
        var targetElement = document.getElementById(id);
        if (targetElement) {
          _scrollTo(scrollerRef, targetElement.offsetLeft, targetElement.offsetTop, animated, duration);
        }
      }
    };
  });
  if (style) {
    var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
      return style[prop] !== undefined;
    });
    if (childLayoutProps.length !== 0) {
      console.warn('ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }
  }
  var contentContainer = /*#__PURE__*/_react["default"].createElement(_view["default"], {
    ref: contentContainerRef,
    className: (0, _classnames["default"])(_defineProperty(_defineProperty({}, "".concat(baseCls, "-content-container-horizontal"), horizontal), "".concat(baseCls, "-webcontainer"), !horizontal)),
    style: contentContainerStyle
  }, children);
  var scrollerStyle = Object.assign({}, style);
  if (scrollerStyle.height === null || scrollerStyle.height === undefined) {
    scrollerStyle.flex = 1;
  }
  var cls = (0, _classnames["default"])(baseCls, "".concat(baseCls, "-").concat(horizontal ? 'horizontal' : 'vertical'), className);
  var showsScrollIndicator = horizontal ? showsHorizontalScrollIndicator : showsVerticalScrollIndicator;
  {
    if (!showsScrollIndicator && typeof document !== 'undefined' && typeof document.getElementById === 'function' && !document.getElementById(STYLE_NODE_ID)) {
      var styleNode = document.createElement('style');
      styleNode.id = STYLE_NODE_ID;
      document.head.appendChild(styleNode);
      styleNode.innerHTML = ".".concat(baseCls, "::-webkit-scrollbar{display: none;}");
    }
    scrollerStyle.WebkitOverflowScrolling = 'touch';
    if (horizontal) {
      scrollerStyle.overflowX = 'scroll';
      scrollerStyle.overflowY = 'hidden';
    } else {
      scrollerStyle.overflowX = 'hidden';
      scrollerStyle.overflowY = 'scroll';
    }
    var webProps = Object.assign({}, props);
    delete webProps.onEndReachedThreshold;
    return /*#__PURE__*/_react["default"].createElement(_view["default"], Object.assign({}, webProps, {
      ref: scrollerRef,
      className: cls,
      style: scrollerStyle,
      onScroll: scrollEventThrottle ? (0, _throttle["default"])(handleScroll, scrollEventThrottle) : handleScroll
    }), contentContainer);
  }
});
ScrollView.defaultProps = {
  scrollEventThrottle: DEFAULT_SCROLL_CALLBACK_THROTTLE,
  onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
  showsHorizontalScrollIndicator: true,
  showsVerticalScrollIndicator: true,
  className: 'rax-scrollview'
};
ScrollView.displayName = 'ScrollView';
var _default = exports["default"] = ScrollView;