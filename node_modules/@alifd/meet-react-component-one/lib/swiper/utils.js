"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extend = extend;
exports.isObject = isObject;
exports.needsNavigation = needsNavigation;
exports.needsPagination = needsPagination;
exports.needsScrollbar = needsScrollbar;
exports.uniqueClasses = uniqueClasses;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function isObject(o) {
  return _typeof(o) === 'object' && o !== null && o.constructor && o.constructor === Object;
}
function extend(target, src) {
  Object.keys(src).forEach(function (key) {
    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {
      extend(target[key], src[key]);
    } else {
      target[key] = src[key];
    }
  });
}
function needsNavigation() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';
}
function needsPagination() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return params.pagination && typeof params.pagination.el === 'undefined';
}
function needsScrollbar() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return params.scrollbar && typeof params.scrollbar.el === 'undefined';
}
function uniqueClasses() {
  var classNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var classes = classNames.split(' ').map(function (c) {
    return c.trim();
  }).filter(function (c) {
    return !!c;
  });
  var unique = [];
  classes.forEach(function (c) {
    if (unique.indexOf(c) < 0) unique.push(c);
  });
  return unique.join(' ');
}