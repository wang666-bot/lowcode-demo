"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _tslib = require("tslib");
var _react = _interopRequireWildcard(require("react"));
require("./index.css");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var prefixCls = 'one-text';
var Text = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
    style = props.style,
    numberOfLines = props.numberOfLines,
    children = props.children,
    onPress = props.onPress,
    onClick = props.onClick,
    rest = (0, _tslib.__rest)(props, ["className", "style", "numberOfLines", "children", "onPress", "onClick"]);
  var lines = typeof numberOfLines === 'string' ? parseInt(numberOfLines, 10) : numberOfLines;
  var textString = '';
  if (children != null) {
    textString = Array.isArray(children) ? children.join('') : children.toString();
  }
  var classNames = [prefixCls, className];
  if (lines) {
    classNames.push("".concat(prefixCls, "--overflow-hidden"));
    if (lines === 1) {
      classNames.push("".concat(prefixCls, "--singleline"));
    } else {
      classNames.push("".concat(prefixCls, "--multiline"));
    }
  }
  return /*#__PURE__*/_react["default"].createElement("span", Object.assign({}, rest, {
    ref: ref,
    className: classNames.join(' '),
    style: Object.assign(Object.assign({}, style), {
      WebkitLineClamp: lines > 1 ? lines : undefined
    }),
    onClick: onClick || onPress
  }), textString);
});
Text.displayName = 'Text';
var _default = exports["default"] = Text;