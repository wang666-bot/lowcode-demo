"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.OutLevel = void 0;
var OutLevel;
(function (OutLevel) {
    OutLevel[OutLevel["Log"] = 0] = "Log";
    OutLevel[OutLevel["Info"] = 1] = "Info";
    OutLevel[OutLevel["Warn"] = 2] = "Warn";
    OutLevel[OutLevel["Error"] = 3] = "Error";
    OutLevel[OutLevel["None"] = 4] = "None";
})(OutLevel = exports.OutLevel || (exports.OutLevel = {}));
var Logger = /** @class */ (function () {
    function Logger() {
        this.outLevel = OutLevel.Warn;
    }
    Logger.prototype.setOutLevel = function (level) {
        this.outLevel = level;
    };
    Logger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.outLevel <= OutLevel.Error) {
            console.error.apply(console, __spreadArray([message], optionalParams, false));
        }
    };
    Logger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.outLevel <= OutLevel.Info) {
            console.info.apply(console, __spreadArray([message], optionalParams, false));
        }
    };
    Logger.prototype.log = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.outLevel <= OutLevel.Log) {
            console.log.apply(console, __spreadArray([message], optionalParams, false));
        }
    };
    Logger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.outLevel <= OutLevel.Warn) {
            console.warn.apply(console, __spreadArray([message], optionalParams, false));
        }
    };
    return Logger;
}());
exports.Logger = Logger;
var logger = new Logger();
exports.default = logger;
//# sourceMappingURL=logger.js.map