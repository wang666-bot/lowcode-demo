"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aspect = exports.genAspectWrapper = void 0;
var metadata_1 = require("../class/metadata");
/* istanbul ignore next */
var normalFn = function normalFn() { };
/* istanbul ignore next */
var generatorFn = function () { return __generator(this, function (_a) {
    return [2 /*return*/];
}); };
var normalFuncPrototype = Object.getPrototypeOf(normalFn);
var generatorFuncPrototype = Object.getPrototypeOf(generatorFn);
function isGeneratorFunction(fn) {
    // if use some transformer, generator is polyfill maybe.
    return (typeof fn === 'function' &&
        normalFuncPrototype !== generatorFuncPrototype &&
        Object.getPrototypeOf(fn) === generatorFuncPrototype);
}
function run(func, context) {
    func && func(context);
}
function createContext(ioc, inst, fn, args) {
    return {
        ioc: ioc,
        functionName: fn.__name || fn.name,
        inst: inst,
        data: {},
        args: args,
    };
}
function genAspectWrapper(ioc, point, oriFn) {
    var newFn;
    if (isGeneratorFunction(oriFn)) {
        newFn = function () {
            var _i, context, _a, error_1;
            var args = [];
            for (_i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        context = createContext(ioc, this, oriFn, args);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        run(point.before, context);
                        if (!!context.skipRunning) return [3 /*break*/, 3];
                        _a = context;
                        return [4 /*yield*/, oriFn.apply(this, context.args)];
                    case 2:
                        _a.ret = _b.sent();
                        _b.label = 3;
                    case 3:
                        run(point.after, context);
                        return [2 /*return*/, context.ret];
                    case 4:
                        error_1 = _b.sent();
                        context.err = error_1;
                        run(point.error, context);
                        if (context.err) {
                            throw context.err;
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        };
    }
    else {
        newFn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var context = createContext(ioc, this, oriFn, args);
            try {
                run(point.before, context);
                if (!context.skipRunning) {
                    context.ret = oriFn.apply(this, context.args);
                }
                if (context.ret instanceof Promise) {
                    context.ret = context.ret.then(function (ret) {
                        context.ret = ret;
                        run(point.after, context);
                        return context.ret;
                    });
                    if (point.error) {
                        context.ret = context.ret.catch(function (error) {
                            context.err = error;
                            run(point.error, context);
                            if (context.err) {
                                throw context.err;
                            }
                        });
                    }
                    return context.ret;
                }
                else {
                    run(point.after, context);
                    return context.ret;
                }
            }
            catch (error) {
                context.err = error;
                run(point.error, context);
                if (context.err) {
                    throw context.err;
                }
            }
        };
    }
    newFn.__name = oriFn.__name || oriFn.name;
    return newFn;
}
exports.genAspectWrapper = genAspectWrapper;
function aspect(point) {
    if (point === void 0) { point = {}; }
    return function (target, key) {
        (0, metadata_1.getMetadata)(target.constructor).aspects.push({
            key: key,
            point: point,
        });
    };
}
exports.aspect = aspect;
//# sourceMappingURL=aspect.js.map